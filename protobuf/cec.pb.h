// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cec.proto

#ifndef PROTOBUF_cec_2eproto__INCLUDED
#define PROTOBUF_cec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cec_2eproto();
void protobuf_AssignDesc_cec_2eproto();
void protobuf_ShutdownFile_cec_2eproto();

class CECMessage;

enum CECAction {
  POWER_ON = 0,
  POWER_OFF = 1,
  CECAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CECAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CECAction_IsValid(int value);
const CECAction CECAction_MIN = POWER_ON;
const CECAction CECAction_MAX = POWER_OFF;
const int CECAction_ARRAYSIZE = CECAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* CECAction_descriptor();
inline const ::std::string& CECAction_Name(CECAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    CECAction_descriptor(), value);
}
inline bool CECAction_Parse(
    const ::std::string& name, CECAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CECAction>(
    CECAction_descriptor(), name, value);
}
// ===================================================================

class CECMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.CECMessage) */ {
 public:
  CECMessage();
  virtual ~CECMessage();

  CECMessage(const CECMessage& from);

  inline CECMessage& operator=(const CECMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CECMessage& default_instance();

  void Swap(CECMessage* other);

  // implements Message ----------------------------------------------

  inline CECMessage* New() const { return New(NULL); }

  CECMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CECMessage& from);
  void MergeFrom(const CECMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CECMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .naki3d.common.protocol.CECAction action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::naki3d::common::protocol::CECAction action() const;
  void set_action(::naki3d::common::protocol::CECAction value);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.CECMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int action_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cec_2eproto();
  friend void protobuf_AssignDesc_cec_2eproto();
  friend void protobuf_ShutdownFile_cec_2eproto();

  void InitAsDefaultInstance();
  static CECMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CECMessage

// optional .naki3d.common.protocol.CECAction action = 1;
inline void CECMessage::clear_action() {
  action_ = 0;
}
inline ::naki3d::common::protocol::CECAction CECMessage::action() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CECMessage.action)
  return static_cast< ::naki3d::common::protocol::CECAction >(action_);
}
inline void CECMessage::set_action(::naki3d::common::protocol::CECAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CECMessage.action)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::naki3d::common::protocol::CECAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::CECAction>() {
  return ::naki3d::common::protocol::CECAction_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cec_2eproto__INCLUDED

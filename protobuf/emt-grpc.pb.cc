// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emt-grpc.proto

#include "emt-grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace naki3d {
namespace common {
namespace protocol {
constexpr BeaconMessage::BeaconMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_version_(0){}
struct BeaconMessageDefaultTypeInternal {
  constexpr BeaconMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeaconMessageDefaultTypeInternal() {}
  union {
    BeaconMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeaconMessageDefaultTypeInternal _BeaconMessage_default_instance_;
constexpr PingRequest::PingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PingRequestDefaultTypeInternal {
  constexpr PingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingRequestDefaultTypeInternal _PingRequest_default_instance_;
constexpr PingResponse::PingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : echo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PingResponseDefaultTypeInternal {
  constexpr PingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingResponseDefaultTypeInternal _PingResponse_default_instance_;
constexpr LoadPackageRequest::LoadPackageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptor_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_preview_(false){}
struct LoadPackageRequestDefaultTypeInternal {
  constexpr LoadPackageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadPackageRequestDefaultTypeInternal() {}
  union {
    LoadPackageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadPackageRequestDefaultTypeInternal _LoadPackageRequest_default_instance_;
constexpr ClearStartupPackageRequest::ClearStartupPackageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purge_data_(false){}
struct ClearStartupPackageRequestDefaultTypeInternal {
  constexpr ClearStartupPackageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearStartupPackageRequestDefaultTypeInternal() {}
  union {
    ClearStartupPackageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearStartupPackageRequestDefaultTypeInternal _ClearStartupPackageRequest_default_instance_;
constexpr StartupPackageResponse::StartupPackageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StartupPackageResponseDefaultTypeInternal {
  constexpr StartupPackageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartupPackageResponseDefaultTypeInternal() {}
  union {
    StartupPackageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartupPackageResponseDefaultTypeInternal _StartupPackageResponse_default_instance_;
constexpr SetStartupPackageRequest::SetStartupPackageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetStartupPackageRequestDefaultTypeInternal {
  constexpr SetStartupPackageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetStartupPackageRequestDefaultTypeInternal() {}
  union {
    SetStartupPackageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetStartupPackageRequestDefaultTypeInternal _SetStartupPackageRequest_default_instance_;
constexpr StartPackageRequest::StartPackageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StartPackageRequestDefaultTypeInternal {
  constexpr StartPackageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartPackageRequestDefaultTypeInternal() {}
  union {
    StartPackageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartPackageRequestDefaultTypeInternal _StartPackageRequest_default_instance_;
constexpr CachedPackagesResponse_SinglePackage::CachedPackagesResponse_SinglePackage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , checksum_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , download_time_(nullptr){}
struct CachedPackagesResponse_SinglePackageDefaultTypeInternal {
  constexpr CachedPackagesResponse_SinglePackageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CachedPackagesResponse_SinglePackageDefaultTypeInternal() {}
  union {
    CachedPackagesResponse_SinglePackage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CachedPackagesResponse_SinglePackageDefaultTypeInternal _CachedPackagesResponse_SinglePackage_default_instance_;
constexpr CachedPackagesResponse::CachedPackagesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packages_(){}
struct CachedPackagesResponseDefaultTypeInternal {
  constexpr CachedPackagesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CachedPackagesResponseDefaultTypeInternal() {}
  union {
    CachedPackagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CachedPackagesResponseDefaultTypeInternal _CachedPackagesResponse_default_instance_;
constexpr DeviceDescriptorResponse::DeviceDescriptorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : available_sensors_()
  , hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , firmware_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_version_(0){}
struct DeviceDescriptorResponseDefaultTypeInternal {
  constexpr DeviceDescriptorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceDescriptorResponseDefaultTypeInternal() {}
  union {
    DeviceDescriptorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceDescriptorResponseDefaultTypeInternal _DeviceDescriptorResponse_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_emt_2dgrpc_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_emt_2dgrpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_emt_2dgrpc_2eproto = nullptr;

const uint32_t TableStruct_emt_2dgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::BeaconMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::BeaconMessage, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::BeaconMessage, hostname_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::BeaconMessage, device_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PingRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PingResponse, echo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LoadPackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LoadPackageRequest, descriptor_json_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LoadPackageRequest, is_preview_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ClearStartupPackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ClearStartupPackageRequest, purge_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::StartupPackageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::StartupPackageResponse, package_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SetStartupPackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SetStartupPackageRequest, package_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::StartPackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::StartPackageRequest, package_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CachedPackagesResponse_SinglePackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CachedPackagesResponse_SinglePackage, package_id_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CachedPackagesResponse_SinglePackage, checksum_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CachedPackagesResponse_SinglePackage, download_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CachedPackagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CachedPackagesResponse, packages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptorResponse, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptorResponse, hostname_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptorResponse, device_type_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptorResponse, firmware_version_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptorResponse, available_sensors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::naki3d::common::protocol::BeaconMessage)},
  { 9, -1, -1, sizeof(::naki3d::common::protocol::PingRequest)},
  { 16, -1, -1, sizeof(::naki3d::common::protocol::PingResponse)},
  { 23, -1, -1, sizeof(::naki3d::common::protocol::LoadPackageRequest)},
  { 31, -1, -1, sizeof(::naki3d::common::protocol::ClearStartupPackageRequest)},
  { 38, -1, -1, sizeof(::naki3d::common::protocol::StartupPackageResponse)},
  { 45, -1, -1, sizeof(::naki3d::common::protocol::SetStartupPackageRequest)},
  { 52, -1, -1, sizeof(::naki3d::common::protocol::StartPackageRequest)},
  { 59, -1, -1, sizeof(::naki3d::common::protocol::CachedPackagesResponse_SinglePackage)},
  { 68, -1, -1, sizeof(::naki3d::common::protocol::CachedPackagesResponse)},
  { 75, -1, -1, sizeof(::naki3d::common::protocol::DeviceDescriptorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_BeaconMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_PingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_LoadPackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_ClearStartupPackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_StartupPackageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_SetStartupPackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_StartPackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_CachedPackagesResponse_SinglePackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_CachedPackagesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_DeviceDescriptorResponse_default_instance_),
};

const char descriptor_table_protodef_emt_2dgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016emt-grpc.proto\022\026naki3d.common.protocol"
  "\032\036google/protobuf/wrappers.proto\032\033google"
  "/protobuf/empty.proto\032\037google/protobuf/t"
  "imestamp.proto\032\017discovery.proto\"P\n\rBeaco"
  "nMessage\022\030\n\020protocol_version\030\001 \001(\005\022\020\n\010ho"
  "stname\030\002 \001(\t\022\023\n\013device_type\030\003 \001(\t\"\032\n\013Pin"
  "gRequest\022\013\n\003msg\030\001 \001(\t\"\034\n\014PingResponse\022\014\n"
  "\004echo\030\001 \001(\t\"A\n\022LoadPackageRequest\022\027\n\017des"
  "criptor_json\030\001 \001(\t\022\022\n\nis_preview\030\002 \001(\010\"0"
  "\n\032ClearStartupPackageRequest\022\022\n\npurge_da"
  "ta\030\001 \001(\010\",\n\026StartupPackageResponse\022\022\n\npa"
  "ckage_id\030\001 \001(\t\".\n\030SetStartupPackageReque"
  "st\022\022\n\npackage_id\030\001 \001(\t\")\n\023StartPackageRe"
  "quest\022\022\n\npackage_id\030\001 \001(\t\"\322\001\n\026CachedPack"
  "agesResponse\022N\n\010packages\030\001 \003(\0132<.naki3d."
  "common.protocol.CachedPackagesResponse.S"
  "inglePackage\032h\n\rSinglePackage\022\022\n\npackage"
  "_id\030\001 \001(\t\022\020\n\010checksum\030\002 \001(\t\0221\n\rdownload_"
  "time\030\003 \001(\0132\032.google.protobuf.Timestamp\"\272"
  "\001\n\030DeviceDescriptorResponse\022\030\n\020protocol_"
  "version\030\001 \001(\005\022\020\n\010hostname\030\002 \001(\t\022\023\n\013devic"
  "e_type\030\003 \001(\t\022\030\n\020firmware_version\030\004 \001(\t\022C"
  "\n\021available_sensors\030\005 \003(\0132(.naki3d.commo"
  "n.protocol.SensorDescriptor2f\n\021Connectio"
  "nService\022Q\n\004Ping\022#.naki3d.common.protoco"
  "l.PingRequest\032$.naki3d.common.protocol.P"
  "ingResponse2\213\005\n\016PackageService\022U\n\013LoadPa"
  "ckage\022*.naki3d.common.protocol.LoadPacka"
  "geRequest\032\032.google.protobuf.BoolValue\022e\n"
  "\023ClearStartupPackage\0222.naki3d.common.pro"
  "tocol.ClearStartupPackageRequest\032\032.googl"
  "e.protobuf.BoolValue\022[\n\021GetStartupPackag"
  "e\022\026.google.protobuf.Empty\032..naki3d.commo"
  "n.protocol.StartupPackageResponse\022a\n\021Set"
  "StartupPackage\0220.naki3d.common.protocol."
  "SetStartupPackageRequest\032\032.google.protob"
  "uf.BoolValue\022E\n\023PurgeCachedPackages\022\026.go"
  "ogle.protobuf.Empty\032\026.google.protobuf.Em"
  "pty\022[\n\021GetCachedPackages\022\026.google.protob"
  "uf.Empty\032..naki3d.common.protocol.Cached"
  "PackagesResponse\022W\n\014StartPackage\022+.naki3"
  "d.common.protocol.StartPackageRequest\032\032."
  "google.protobuf.BoolValue2\262\001\n\rDeviceServ"
  "ice\022_\n\023GetDeviceDescriptor\022\026.google.prot"
  "obuf.Empty\0320.naki3d.common.protocol.Devi"
  "ceDescriptorResponse\022@\n\tSetVolume\022\033.goog"
  "le.protobuf.FloatValue\032\026.google.protobuf"
  ".Emptyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_emt_2dgrpc_2eproto_deps[4] = {
  &::descriptor_table_discovery_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_emt_2dgrpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_emt_2dgrpc_2eproto = {
  false, false, 1894, descriptor_table_protodef_emt_2dgrpc_2eproto, "emt-grpc.proto", 
  &descriptor_table_emt_2dgrpc_2eproto_once, descriptor_table_emt_2dgrpc_2eproto_deps, 4, 11,
  schemas, file_default_instances, TableStruct_emt_2dgrpc_2eproto::offsets,
  file_level_metadata_emt_2dgrpc_2eproto, file_level_enum_descriptors_emt_2dgrpc_2eproto, file_level_service_descriptors_emt_2dgrpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_emt_2dgrpc_2eproto_getter() {
  return &descriptor_table_emt_2dgrpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_emt_2dgrpc_2eproto(&descriptor_table_emt_2dgrpc_2eproto);
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class BeaconMessage::_Internal {
 public:
};

BeaconMessage::BeaconMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.BeaconMessage)
}
BeaconMessage::BeaconMessage(const BeaconMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_type().empty()) {
    device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_type(), 
      GetArenaForAllocation());
  }
  protocol_version_ = from.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.BeaconMessage)
}

inline void BeaconMessage::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_version_ = 0;
}

BeaconMessage::~BeaconMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.BeaconMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BeaconMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BeaconMessage::ArenaDtor(void* object) {
  BeaconMessage* _this = reinterpret_cast< BeaconMessage* >(object);
  (void)_this;
}
void BeaconMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeaconMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BeaconMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.BeaconMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  device_type_.ClearToEmpty();
  protocol_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeaconMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.BeaconMessage.hostname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.BeaconMessage.device_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeaconMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.BeaconMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  // string hostname = 2;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.BeaconMessage.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // string device_type = 3;
  if (!this->_internal_device_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.BeaconMessage.device_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.BeaconMessage)
  return target;
}

size_t BeaconMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.BeaconMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 2;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string device_type = 3;
  if (!this->_internal_device_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // int32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_protocol_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeaconMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BeaconMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeaconMessage::GetClassData() const { return &_class_data_; }

void BeaconMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BeaconMessage *>(to)->MergeFrom(
      static_cast<const BeaconMessage &>(from));
}


void BeaconMessage::MergeFrom(const BeaconMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.BeaconMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_device_type().empty()) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from._internal_protocol_version() != 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeaconMessage::CopyFrom(const BeaconMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.BeaconMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeaconMessage::IsInitialized() const {
  return true;
}

void BeaconMessage::InternalSwap(BeaconMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_type_, lhs_arena,
      &other->device_type_, rhs_arena
  );
  swap(protocol_version_, other->protocol_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeaconMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[0]);
}

// ===================================================================

class PingRequest::_Internal {
 public:
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.PingRequest)
}

inline void PingRequest::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.PingRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PingRequest::ArenaDtor(void* object) {
  PingRequest* _this = reinterpret_cast< PingRequest* >(object);
  (void)_this;
}
void PingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.PingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.PingRequest.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.PingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.PingRequest.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.PingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingRequest::GetClassData() const { return &_class_data_; }

void PingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PingRequest *>(to)->MergeFrom(
      static_cast<const PingRequest &>(from));
}


void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[1]);
}

// ===================================================================

class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  echo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_echo().empty()) {
    echo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_echo(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.PingResponse)
}

inline void PingResponse::SharedCtor() {
echo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.PingResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  echo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PingResponse::ArenaDtor(void* object) {
  PingResponse* _this = reinterpret_cast< PingResponse* >(object);
  (void)_this;
}
void PingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.PingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  echo_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string echo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_echo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.PingResponse.echo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.PingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string echo = 1;
  if (!this->_internal_echo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_echo().data(), static_cast<int>(this->_internal_echo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.PingResponse.echo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_echo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.PingResponse)
  return target;
}

size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.PingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string echo = 1;
  if (!this->_internal_echo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_echo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingResponse::GetClassData() const { return &_class_data_; }

void PingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PingResponse *>(to)->MergeFrom(
      static_cast<const PingResponse &>(from));
}


void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_echo().empty()) {
    _internal_set_echo(from._internal_echo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  return true;
}

void PingResponse::InternalSwap(PingResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &echo_, lhs_arena,
      &other->echo_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[2]);
}

// ===================================================================

class LoadPackageRequest::_Internal {
 public:
};

LoadPackageRequest::LoadPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.LoadPackageRequest)
}
LoadPackageRequest::LoadPackageRequest(const LoadPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  descriptor_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    descriptor_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descriptor_json().empty()) {
    descriptor_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descriptor_json(), 
      GetArenaForAllocation());
  }
  is_preview_ = from.is_preview_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LoadPackageRequest)
}

inline void LoadPackageRequest::SharedCtor() {
descriptor_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  descriptor_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
is_preview_ = false;
}

LoadPackageRequest::~LoadPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LoadPackageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  descriptor_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadPackageRequest::ArenaDtor(void* object) {
  LoadPackageRequest* _this = reinterpret_cast< LoadPackageRequest* >(object);
  (void)_this;
}
void LoadPackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LoadPackageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptor_json_.ClearToEmpty();
  is_preview_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadPackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string descriptor_json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_descriptor_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.LoadPackageRequest.descriptor_json"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_preview = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadPackageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LoadPackageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_json = 1;
  if (!this->_internal_descriptor_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descriptor_json().data(), static_cast<int>(this->_internal_descriptor_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.LoadPackageRequest.descriptor_json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_descriptor_json(), target);
  }

  // bool is_preview = 2;
  if (this->_internal_is_preview() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_preview(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LoadPackageRequest)
  return target;
}

size_t LoadPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LoadPackageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string descriptor_json = 1;
  if (!this->_internal_descriptor_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descriptor_json());
  }

  // bool is_preview = 2;
  if (this->_internal_is_preview() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadPackageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadPackageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadPackageRequest::GetClassData() const { return &_class_data_; }

void LoadPackageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadPackageRequest *>(to)->MergeFrom(
      static_cast<const LoadPackageRequest &>(from));
}


void LoadPackageRequest::MergeFrom(const LoadPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LoadPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_descriptor_json().empty()) {
    _internal_set_descriptor_json(from._internal_descriptor_json());
  }
  if (from._internal_is_preview() != 0) {
    _internal_set_is_preview(from._internal_is_preview());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadPackageRequest::CopyFrom(const LoadPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LoadPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPackageRequest::IsInitialized() const {
  return true;
}

void LoadPackageRequest::InternalSwap(LoadPackageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &descriptor_json_, lhs_arena,
      &other->descriptor_json_, rhs_arena
  );
  swap(is_preview_, other->is_preview_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPackageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[3]);
}

// ===================================================================

class ClearStartupPackageRequest::_Internal {
 public:
};

ClearStartupPackageRequest::ClearStartupPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.ClearStartupPackageRequest)
}
ClearStartupPackageRequest::ClearStartupPackageRequest(const ClearStartupPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purge_data_ = from.purge_data_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ClearStartupPackageRequest)
}

inline void ClearStartupPackageRequest::SharedCtor() {
purge_data_ = false;
}

ClearStartupPackageRequest::~ClearStartupPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.ClearStartupPackageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearStartupPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearStartupPackageRequest::ArenaDtor(void* object) {
  ClearStartupPackageRequest* _this = reinterpret_cast< ClearStartupPackageRequest* >(object);
  (void)_this;
}
void ClearStartupPackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearStartupPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearStartupPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.ClearStartupPackageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purge_data_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearStartupPackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool purge_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          purge_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClearStartupPackageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.ClearStartupPackageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool purge_data = 1;
  if (this->_internal_purge_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_purge_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.ClearStartupPackageRequest)
  return target;
}

size_t ClearStartupPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.ClearStartupPackageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool purge_data = 1;
  if (this->_internal_purge_data() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearStartupPackageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearStartupPackageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearStartupPackageRequest::GetClassData() const { return &_class_data_; }

void ClearStartupPackageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearStartupPackageRequest *>(to)->MergeFrom(
      static_cast<const ClearStartupPackageRequest &>(from));
}


void ClearStartupPackageRequest::MergeFrom(const ClearStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.ClearStartupPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_purge_data() != 0) {
    _internal_set_purge_data(from._internal_purge_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearStartupPackageRequest::CopyFrom(const ClearStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.ClearStartupPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearStartupPackageRequest::IsInitialized() const {
  return true;
}

void ClearStartupPackageRequest::InternalSwap(ClearStartupPackageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(purge_data_, other->purge_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearStartupPackageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[4]);
}

// ===================================================================

class StartupPackageResponse::_Internal {
 public:
};

StartupPackageResponse::StartupPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.StartupPackageResponse)
}
StartupPackageResponse::StartupPackageResponse(const StartupPackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_package_id().empty()) {
    package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.StartupPackageResponse)
}

inline void StartupPackageResponse::SharedCtor() {
package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartupPackageResponse::~StartupPackageResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.StartupPackageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartupPackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartupPackageResponse::ArenaDtor(void* object) {
  StartupPackageResponse* _this = reinterpret_cast< StartupPackageResponse* >(object);
  (void)_this;
}
void StartupPackageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartupPackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartupPackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.StartupPackageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartupPackageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.StartupPackageResponse.package_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartupPackageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.StartupPackageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package_id().data(), static_cast<int>(this->_internal_package_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.StartupPackageResponse.package_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.StartupPackageResponse)
  return target;
}

size_t StartupPackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.StartupPackageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartupPackageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartupPackageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartupPackageResponse::GetClassData() const { return &_class_data_; }

void StartupPackageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartupPackageResponse *>(to)->MergeFrom(
      static_cast<const StartupPackageResponse &>(from));
}


void StartupPackageResponse::MergeFrom(const StartupPackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.StartupPackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_package_id().empty()) {
    _internal_set_package_id(from._internal_package_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartupPackageResponse::CopyFrom(const StartupPackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.StartupPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupPackageResponse::IsInitialized() const {
  return true;
}

void StartupPackageResponse::InternalSwap(StartupPackageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &package_id_, lhs_arena,
      &other->package_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartupPackageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[5]);
}

// ===================================================================

class SetStartupPackageRequest::_Internal {
 public:
};

SetStartupPackageRequest::SetStartupPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SetStartupPackageRequest)
}
SetStartupPackageRequest::SetStartupPackageRequest(const SetStartupPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_package_id().empty()) {
    package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SetStartupPackageRequest)
}

inline void SetStartupPackageRequest::SharedCtor() {
package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetStartupPackageRequest::~SetStartupPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SetStartupPackageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetStartupPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetStartupPackageRequest::ArenaDtor(void* object) {
  SetStartupPackageRequest* _this = reinterpret_cast< SetStartupPackageRequest* >(object);
  (void)_this;
}
void SetStartupPackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetStartupPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetStartupPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SetStartupPackageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStartupPackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.SetStartupPackageRequest.package_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetStartupPackageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SetStartupPackageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package_id().data(), static_cast<int>(this->_internal_package_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SetStartupPackageRequest.package_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SetStartupPackageRequest)
  return target;
}

size_t SetStartupPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SetStartupPackageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetStartupPackageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetStartupPackageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetStartupPackageRequest::GetClassData() const { return &_class_data_; }

void SetStartupPackageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetStartupPackageRequest *>(to)->MergeFrom(
      static_cast<const SetStartupPackageRequest &>(from));
}


void SetStartupPackageRequest::MergeFrom(const SetStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SetStartupPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_package_id().empty()) {
    _internal_set_package_id(from._internal_package_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetStartupPackageRequest::CopyFrom(const SetStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SetStartupPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStartupPackageRequest::IsInitialized() const {
  return true;
}

void SetStartupPackageRequest::InternalSwap(SetStartupPackageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &package_id_, lhs_arena,
      &other->package_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStartupPackageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[6]);
}

// ===================================================================

class StartPackageRequest::_Internal {
 public:
};

StartPackageRequest::StartPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.StartPackageRequest)
}
StartPackageRequest::StartPackageRequest(const StartPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_package_id().empty()) {
    package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.StartPackageRequest)
}

inline void StartPackageRequest::SharedCtor() {
package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartPackageRequest::~StartPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.StartPackageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartPackageRequest::ArenaDtor(void* object) {
  StartPackageRequest* _this = reinterpret_cast< StartPackageRequest* >(object);
  (void)_this;
}
void StartPackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.StartPackageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartPackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.StartPackageRequest.package_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartPackageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.StartPackageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package_id().data(), static_cast<int>(this->_internal_package_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.StartPackageRequest.package_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.StartPackageRequest)
  return target;
}

size_t StartPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.StartPackageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartPackageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartPackageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartPackageRequest::GetClassData() const { return &_class_data_; }

void StartPackageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartPackageRequest *>(to)->MergeFrom(
      static_cast<const StartPackageRequest &>(from));
}


void StartPackageRequest::MergeFrom(const StartPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.StartPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_package_id().empty()) {
    _internal_set_package_id(from._internal_package_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartPackageRequest::CopyFrom(const StartPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.StartPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPackageRequest::IsInitialized() const {
  return true;
}

void StartPackageRequest::InternalSwap(StartPackageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &package_id_, lhs_arena,
      &other->package_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartPackageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[7]);
}

// ===================================================================

class CachedPackagesResponse_SinglePackage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& download_time(const CachedPackagesResponse_SinglePackage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CachedPackagesResponse_SinglePackage::_Internal::download_time(const CachedPackagesResponse_SinglePackage* msg) {
  return *msg->download_time_;
}
void CachedPackagesResponse_SinglePackage::clear_download_time() {
  if (GetArenaForAllocation() == nullptr && download_time_ != nullptr) {
    delete download_time_;
  }
  download_time_ = nullptr;
}
CachedPackagesResponse_SinglePackage::CachedPackagesResponse_SinglePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
}
CachedPackagesResponse_SinglePackage::CachedPackagesResponse_SinglePackage(const CachedPackagesResponse_SinglePackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_package_id().empty()) {
    package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package_id(), 
      GetArenaForAllocation());
  }
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_checksum().empty()) {
    checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_checksum(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_download_time()) {
    download_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.download_time_);
  } else {
    download_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
}

inline void CachedPackagesResponse_SinglePackage::SharedCtor() {
package_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
download_time_ = nullptr;
}

CachedPackagesResponse_SinglePackage::~CachedPackagesResponse_SinglePackage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CachedPackagesResponse_SinglePackage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete download_time_;
}

void CachedPackagesResponse_SinglePackage::ArenaDtor(void* object) {
  CachedPackagesResponse_SinglePackage* _this = reinterpret_cast< CachedPackagesResponse_SinglePackage* >(object);
  (void)_this;
}
void CachedPackagesResponse_SinglePackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CachedPackagesResponse_SinglePackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CachedPackagesResponse_SinglePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_id_.ClearToEmpty();
  checksum_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && download_time_ != nullptr) {
    delete download_time_;
  }
  download_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CachedPackagesResponse_SinglePackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string checksum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp download_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_download_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CachedPackagesResponse_SinglePackage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package_id().data(), static_cast<int>(this->_internal_package_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_id(), target);
  }

  // string checksum = 2;
  if (!this->_internal_checksum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checksum().data(), static_cast<int>(this->_internal_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checksum(), target);
  }

  // .google.protobuf.Timestamp download_time = 3;
  if (this->_internal_has_download_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::download_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  return target;
}

size_t CachedPackagesResponse_SinglePackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string package_id = 1;
  if (!this->_internal_package_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_id());
  }

  // string checksum = 2;
  if (!this->_internal_checksum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checksum());
  }

  // .google.protobuf.Timestamp download_time = 3;
  if (this->_internal_has_download_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *download_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CachedPackagesResponse_SinglePackage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CachedPackagesResponse_SinglePackage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CachedPackagesResponse_SinglePackage::GetClassData() const { return &_class_data_; }

void CachedPackagesResponse_SinglePackage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CachedPackagesResponse_SinglePackage *>(to)->MergeFrom(
      static_cast<const CachedPackagesResponse_SinglePackage &>(from));
}


void CachedPackagesResponse_SinglePackage::MergeFrom(const CachedPackagesResponse_SinglePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_package_id().empty()) {
    _internal_set_package_id(from._internal_package_id());
  }
  if (!from._internal_checksum().empty()) {
    _internal_set_checksum(from._internal_checksum());
  }
  if (from._internal_has_download_time()) {
    _internal_mutable_download_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_download_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CachedPackagesResponse_SinglePackage::CopyFrom(const CachedPackagesResponse_SinglePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedPackagesResponse_SinglePackage::IsInitialized() const {
  return true;
}

void CachedPackagesResponse_SinglePackage::InternalSwap(CachedPackagesResponse_SinglePackage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &package_id_, lhs_arena,
      &other->package_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &checksum_, lhs_arena,
      &other->checksum_, rhs_arena
  );
  swap(download_time_, other->download_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CachedPackagesResponse_SinglePackage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[8]);
}

// ===================================================================

class CachedPackagesResponse::_Internal {
 public:
};

CachedPackagesResponse::CachedPackagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.CachedPackagesResponse)
}
CachedPackagesResponse::CachedPackagesResponse(const CachedPackagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packages_(from.packages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.CachedPackagesResponse)
}

inline void CachedPackagesResponse::SharedCtor() {
}

CachedPackagesResponse::~CachedPackagesResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.CachedPackagesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CachedPackagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CachedPackagesResponse::ArenaDtor(void* object) {
  CachedPackagesResponse* _this = reinterpret_cast< CachedPackagesResponse* >(object);
  (void)_this;
}
void CachedPackagesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CachedPackagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CachedPackagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.CachedPackagesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CachedPackagesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CachedPackagesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.CachedPackagesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_packages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.CachedPackagesResponse)
  return target;
}

size_t CachedPackagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.CachedPackagesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CachedPackagesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CachedPackagesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CachedPackagesResponse::GetClassData() const { return &_class_data_; }

void CachedPackagesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CachedPackagesResponse *>(to)->MergeFrom(
      static_cast<const CachedPackagesResponse &>(from));
}


void CachedPackagesResponse::MergeFrom(const CachedPackagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.CachedPackagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CachedPackagesResponse::CopyFrom(const CachedPackagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.CachedPackagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedPackagesResponse::IsInitialized() const {
  return true;
}

void CachedPackagesResponse::InternalSwap(CachedPackagesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  packages_.InternalSwap(&other->packages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CachedPackagesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[9]);
}

// ===================================================================

class DeviceDescriptorResponse::_Internal {
 public:
};

void DeviceDescriptorResponse::clear_available_sensors() {
  available_sensors_.Clear();
}
DeviceDescriptorResponse::DeviceDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  available_sensors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.DeviceDescriptorResponse)
}
DeviceDescriptorResponse::DeviceDescriptorResponse(const DeviceDescriptorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      available_sensors_(from.available_sensors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_type().empty()) {
    device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_type(), 
      GetArenaForAllocation());
  }
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_firmware_version().empty()) {
    firmware_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_firmware_version(), 
      GetArenaForAllocation());
  }
  protocol_version_ = from.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.DeviceDescriptorResponse)
}

inline void DeviceDescriptorResponse::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_version_ = 0;
}

DeviceDescriptorResponse::~DeviceDescriptorResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.DeviceDescriptorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceDescriptorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceDescriptorResponse::ArenaDtor(void* object) {
  DeviceDescriptorResponse* _this = reinterpret_cast< DeviceDescriptorResponse* >(object);
  (void)_this;
}
void DeviceDescriptorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceDescriptorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceDescriptorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.DeviceDescriptorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_sensors_.Clear();
  hostname_.ClearToEmpty();
  device_type_.ClearToEmpty();
  firmware_version_.ClearToEmpty();
  protocol_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceDescriptorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.DeviceDescriptorResponse.hostname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.DeviceDescriptorResponse.device_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string firmware_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_firmware_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.DeviceDescriptorResponse.firmware_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceDescriptorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.DeviceDescriptorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  // string hostname = 2;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // string device_type = 3;
  if (!this->_internal_device_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.device_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_type(), target);
  }

  // string firmware_version = 4;
  if (!this->_internal_firmware_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmware_version().data(), static_cast<int>(this->_internal_firmware_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.firmware_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_firmware_version(), target);
  }

  // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_available_sensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_available_sensors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.DeviceDescriptorResponse)
  return target;
}

size_t DeviceDescriptorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.DeviceDescriptorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
  total_size += 1UL * this->_internal_available_sensors_size();
  for (const auto& msg : this->available_sensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hostname = 2;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string device_type = 3;
  if (!this->_internal_device_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string firmware_version = 4;
  if (!this->_internal_firmware_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmware_version());
  }

  // int32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_protocol_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceDescriptorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceDescriptorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceDescriptorResponse::GetClassData() const { return &_class_data_; }

void DeviceDescriptorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceDescriptorResponse *>(to)->MergeFrom(
      static_cast<const DeviceDescriptorResponse &>(from));
}


void DeviceDescriptorResponse::MergeFrom(const DeviceDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.DeviceDescriptorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  available_sensors_.MergeFrom(from.available_sensors_);
  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_device_type().empty()) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (!from._internal_firmware_version().empty()) {
    _internal_set_firmware_version(from._internal_firmware_version());
  }
  if (from._internal_protocol_version() != 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceDescriptorResponse::CopyFrom(const DeviceDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.DeviceDescriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDescriptorResponse::IsInitialized() const {
  return true;
}

void DeviceDescriptorResponse::InternalSwap(DeviceDescriptorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  available_sensors_.InternalSwap(&other->available_sensors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_type_, lhs_arena,
      &other->device_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &firmware_version_, lhs_arena,
      &other->firmware_version_, rhs_arena
  );
  swap(protocol_version_, other->protocol_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceDescriptorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_emt_2dgrpc_2eproto_getter, &descriptor_table_emt_2dgrpc_2eproto_once,
      file_level_metadata_emt_2dgrpc_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::BeaconMessage* Arena::CreateMaybeMessage< ::naki3d::common::protocol::BeaconMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::BeaconMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::PingRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::PingResponse* Arena::CreateMaybeMessage< ::naki3d::common::protocol::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::LoadPackageRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::LoadPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::LoadPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::ClearStartupPackageRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::ClearStartupPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::ClearStartupPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::StartupPackageResponse* Arena::CreateMaybeMessage< ::naki3d::common::protocol::StartupPackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::StartupPackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SetStartupPackageRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::SetStartupPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SetStartupPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::StartPackageRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::StartPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::StartPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* Arena::CreateMaybeMessage< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::CachedPackagesResponse* Arena::CreateMaybeMessage< ::naki3d::common::protocol::CachedPackagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::CachedPackagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::DeviceDescriptorResponse* Arena::CreateMaybeMessage< ::naki3d::common::protocol::DeviceDescriptorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::DeviceDescriptorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emt-grpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "emt-grpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* BeaconMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeaconMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadPackageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadPackageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearStartupPackageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearStartupPackageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartupPackageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartupPackageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetStartupPackageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetStartupPackageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartPackageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartPackageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedPackagesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedPackagesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedPackagesResponse_SinglePackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedPackagesResponse_SinglePackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceDescriptorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceDescriptorResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_emt_2dgrpc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_emt_2dgrpc_2eproto() {
  protobuf_AddDesc_emt_2dgrpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "emt-grpc.proto");
  GOOGLE_CHECK(file != NULL);
  BeaconMessage_descriptor_ = file->message_type(0);
  static const int BeaconMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, device_type_),
  };
  BeaconMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeaconMessage_descriptor_,
      BeaconMessage::default_instance_,
      BeaconMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(BeaconMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, _is_default_instance_));
  PingRequest_descriptor_ = file->message_type(1);
  static const int PingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, msg_),
  };
  PingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PingRequest_descriptor_,
      PingRequest::default_instance_,
      PingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _is_default_instance_));
  PingResponse_descriptor_ = file->message_type(2);
  static const int PingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, echo_),
  };
  PingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PingResponse_descriptor_,
      PingResponse::default_instance_,
      PingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _is_default_instance_));
  LogsRequest_descriptor_ = file->message_type(3);
  static const int LogsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogsRequest, lines_),
  };
  LogsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogsRequest_descriptor_,
      LogsRequest::default_instance_,
      LogsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogsRequest, _is_default_instance_));
  LogsResponse_descriptor_ = file->message_type(4);
  static const int LogsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogsResponse, log_line_),
  };
  LogsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogsResponse_descriptor_,
      LogsResponse::default_instance_,
      LogsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogsResponse, _is_default_instance_));
  LoadPackageRequest_descriptor_ = file->message_type(5);
  static const int LoadPackageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPackageRequest, descriptor_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPackageRequest, is_preview_),
  };
  LoadPackageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoadPackageRequest_descriptor_,
      LoadPackageRequest::default_instance_,
      LoadPackageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoadPackageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPackageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPackageRequest, _is_default_instance_));
  ClearStartupPackageRequest_descriptor_ = file->message_type(6);
  static const int ClearStartupPackageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearStartupPackageRequest, purge_data_),
  };
  ClearStartupPackageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearStartupPackageRequest_descriptor_,
      ClearStartupPackageRequest::default_instance_,
      ClearStartupPackageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClearStartupPackageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearStartupPackageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearStartupPackageRequest, _is_default_instance_));
  StartupPackageResponse_descriptor_ = file->message_type(7);
  static const int StartupPackageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupPackageResponse, package_id_),
  };
  StartupPackageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartupPackageResponse_descriptor_,
      StartupPackageResponse::default_instance_,
      StartupPackageResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartupPackageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupPackageResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupPackageResponse, _is_default_instance_));
  SetStartupPackageRequest_descriptor_ = file->message_type(8);
  static const int SetStartupPackageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStartupPackageRequest, package_id_),
  };
  SetStartupPackageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetStartupPackageRequest_descriptor_,
      SetStartupPackageRequest::default_instance_,
      SetStartupPackageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetStartupPackageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStartupPackageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStartupPackageRequest, _is_default_instance_));
  StartPackageRequest_descriptor_ = file->message_type(9);
  static const int StartPackageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackageRequest, package_id_),
  };
  StartPackageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartPackageRequest_descriptor_,
      StartPackageRequest::default_instance_,
      StartPackageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartPackageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackageRequest, _is_default_instance_));
  CachedPackagesResponse_descriptor_ = file->message_type(10);
  static const int CachedPackagesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse, packages_),
  };
  CachedPackagesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CachedPackagesResponse_descriptor_,
      CachedPackagesResponse::default_instance_,
      CachedPackagesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CachedPackagesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse, _is_default_instance_));
  CachedPackagesResponse_SinglePackage_descriptor_ = CachedPackagesResponse_descriptor_->nested_type(0);
  static const int CachedPackagesResponse_SinglePackage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse_SinglePackage, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse_SinglePackage, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse_SinglePackage, download_time_),
  };
  CachedPackagesResponse_SinglePackage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CachedPackagesResponse_SinglePackage_descriptor_,
      CachedPackagesResponse_SinglePackage::default_instance_,
      CachedPackagesResponse_SinglePackage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CachedPackagesResponse_SinglePackage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse_SinglePackage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedPackagesResponse_SinglePackage, _is_default_instance_));
  DeviceDescriptorResponse_descriptor_ = file->message_type(11);
  static const int DeviceDescriptorResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptorResponse, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptorResponse, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptorResponse, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptorResponse, firmware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptorResponse, available_sensors_),
  };
  DeviceDescriptorResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceDescriptorResponse_descriptor_,
      DeviceDescriptorResponse::default_instance_,
      DeviceDescriptorResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceDescriptorResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptorResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptorResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_emt_2dgrpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeaconMessage_descriptor_, &BeaconMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PingRequest_descriptor_, &PingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PingResponse_descriptor_, &PingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogsRequest_descriptor_, &LogsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogsResponse_descriptor_, &LogsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoadPackageRequest_descriptor_, &LoadPackageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearStartupPackageRequest_descriptor_, &ClearStartupPackageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartupPackageResponse_descriptor_, &StartupPackageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetStartupPackageRequest_descriptor_, &SetStartupPackageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartPackageRequest_descriptor_, &StartPackageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CachedPackagesResponse_descriptor_, &CachedPackagesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CachedPackagesResponse_SinglePackage_descriptor_, &CachedPackagesResponse_SinglePackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceDescriptorResponse_descriptor_, &DeviceDescriptorResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_emt_2dgrpc_2eproto() {
  delete BeaconMessage::default_instance_;
  delete BeaconMessage_reflection_;
  delete PingRequest::default_instance_;
  delete PingRequest_reflection_;
  delete PingResponse::default_instance_;
  delete PingResponse_reflection_;
  delete LogsRequest::default_instance_;
  delete LogsRequest_reflection_;
  delete LogsResponse::default_instance_;
  delete LogsResponse_reflection_;
  delete LoadPackageRequest::default_instance_;
  delete LoadPackageRequest_reflection_;
  delete ClearStartupPackageRequest::default_instance_;
  delete ClearStartupPackageRequest_reflection_;
  delete StartupPackageResponse::default_instance_;
  delete StartupPackageResponse_reflection_;
  delete SetStartupPackageRequest::default_instance_;
  delete SetStartupPackageRequest_reflection_;
  delete StartPackageRequest::default_instance_;
  delete StartPackageRequest_reflection_;
  delete CachedPackagesResponse::default_instance_;
  delete CachedPackagesResponse_reflection_;
  delete CachedPackagesResponse_SinglePackage::default_instance_;
  delete CachedPackagesResponse_SinglePackage_reflection_;
  delete DeviceDescriptorResponse::default_instance_;
  delete DeviceDescriptorResponse_reflection_;
}

void protobuf_AddDesc_emt_2dgrpc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_emt_2dgrpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::naki3d::common::protocol::protobuf_AddDesc_discovery_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016emt-grpc.proto\022\026naki3d.common.protocol"
    "\032\036google/protobuf/wrappers.proto\032\033google"
    "/protobuf/empty.proto\032\037google/protobuf/t"
    "imestamp.proto\032\017discovery.proto\"P\n\rBeaco"
    "nMessage\022\030\n\020protocol_version\030\001 \001(\005\022\020\n\010ho"
    "stname\030\002 \001(\t\022\023\n\013device_type\030\003 \001(\t\"\032\n\013Pin"
    "gRequest\022\013\n\003msg\030\001 \001(\t\"\034\n\014PingResponse\022\014\n"
    "\004echo\030\001 \001(\t\"\034\n\013LogsRequest\022\r\n\005lines\030\001 \001("
    "\005\" \n\014LogsResponse\022\020\n\010log_line\030\001 \003(\t\"A\n\022L"
    "oadPackageRequest\022\027\n\017descriptor_json\030\001 \001"
    "(\t\022\022\n\nis_preview\030\002 \001(\010\"0\n\032ClearStartupPa"
    "ckageRequest\022\022\n\npurge_data\030\001 \001(\010\",\n\026Star"
    "tupPackageResponse\022\022\n\npackage_id\030\001 \001(\t\"."
    "\n\030SetStartupPackageRequest\022\022\n\npackage_id"
    "\030\001 \001(\t\")\n\023StartPackageRequest\022\022\n\npackage"
    "_id\030\001 \001(\t\"\322\001\n\026CachedPackagesResponse\022N\n\010"
    "packages\030\001 \003(\0132<.naki3d.common.protocol."
    "CachedPackagesResponse.SinglePackage\032h\n\r"
    "SinglePackage\022\022\n\npackage_id\030\001 \001(\t\022\020\n\010che"
    "cksum\030\002 \001(\t\0221\n\rdownload_time\030\003 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\"\272\001\n\030DeviceDescrip"
    "torResponse\022\030\n\020protocol_version\030\001 \001(\005\022\020\n"
    "\010hostname\030\002 \001(\t\022\023\n\013device_type\030\003 \001(\t\022\030\n\020"
    "firmware_version\030\004 \001(\t\022C\n\021available_sens"
    "ors\030\005 \003(\0132(.naki3d.common.protocol.Senso"
    "rDescriptor2f\n\021ConnectionService\022Q\n\004Ping"
    "\022#.naki3d.common.protocol.PingRequest\032$."
    "naki3d.common.protocol.PingResponse2\213\005\n\016"
    "PackageService\022U\n\013LoadPackage\022*.naki3d.c"
    "ommon.protocol.LoadPackageRequest\032\032.goog"
    "le.protobuf.BoolValue\022e\n\023ClearStartupPac"
    "kage\0222.naki3d.common.protocol.ClearStart"
    "upPackageRequest\032\032.google.protobuf.BoolV"
    "alue\022[\n\021GetStartupPackage\022\026.google.proto"
    "buf.Empty\032..naki3d.common.protocol.Start"
    "upPackageResponse\022a\n\021SetStartupPackage\0220"
    ".naki3d.common.protocol.SetStartupPackag"
    "eRequest\032\032.google.protobuf.BoolValue\022E\n\023"
    "PurgeCachedPackages\022\026.google.protobuf.Em"
    "pty\032\026.google.protobuf.Empty\022[\n\021GetCached"
    "Packages\022\026.google.protobuf.Empty\032..naki3"
    "d.common.protocol.CachedPackagesResponse"
    "\022W\n\014StartPackage\022+.naki3d.common.protoco"
    "l.StartPackageRequest\032\032.google.protobuf."
    "BoolValue2\262\001\n\rDeviceService\022_\n\023GetDevice"
    "Descriptor\022\026.google.protobuf.Empty\0320.nak"
    "i3d.common.protocol.DeviceDescriptorResp"
    "onse\022@\n\tSetVolume\022\033.google.protobuf.Floa"
    "tValue\032\026.google.protobuf.Emptyb\006proto3", 1958);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "emt-grpc.proto", &protobuf_RegisterTypes);
  BeaconMessage::default_instance_ = new BeaconMessage();
  PingRequest::default_instance_ = new PingRequest();
  PingResponse::default_instance_ = new PingResponse();
  LogsRequest::default_instance_ = new LogsRequest();
  LogsResponse::default_instance_ = new LogsResponse();
  LoadPackageRequest::default_instance_ = new LoadPackageRequest();
  ClearStartupPackageRequest::default_instance_ = new ClearStartupPackageRequest();
  StartupPackageResponse::default_instance_ = new StartupPackageResponse();
  SetStartupPackageRequest::default_instance_ = new SetStartupPackageRequest();
  StartPackageRequest::default_instance_ = new StartPackageRequest();
  CachedPackagesResponse::default_instance_ = new CachedPackagesResponse();
  CachedPackagesResponse_SinglePackage::default_instance_ = new CachedPackagesResponse_SinglePackage();
  DeviceDescriptorResponse::default_instance_ = new DeviceDescriptorResponse();
  BeaconMessage::default_instance_->InitAsDefaultInstance();
  PingRequest::default_instance_->InitAsDefaultInstance();
  PingResponse::default_instance_->InitAsDefaultInstance();
  LogsRequest::default_instance_->InitAsDefaultInstance();
  LogsResponse::default_instance_->InitAsDefaultInstance();
  LoadPackageRequest::default_instance_->InitAsDefaultInstance();
  ClearStartupPackageRequest::default_instance_->InitAsDefaultInstance();
  StartupPackageResponse::default_instance_->InitAsDefaultInstance();
  SetStartupPackageRequest::default_instance_->InitAsDefaultInstance();
  StartPackageRequest::default_instance_->InitAsDefaultInstance();
  CachedPackagesResponse::default_instance_->InitAsDefaultInstance();
  CachedPackagesResponse_SinglePackage::default_instance_->InitAsDefaultInstance();
  DeviceDescriptorResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_emt_2dgrpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_emt_2dgrpc_2eproto {
  StaticDescriptorInitializer_emt_2dgrpc_2eproto() {
    protobuf_AddDesc_emt_2dgrpc_2eproto();
  }
} static_descriptor_initializer_emt_2dgrpc_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeaconMessage::kProtocolVersionFieldNumber;
const int BeaconMessage::kHostnameFieldNumber;
const int BeaconMessage::kDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeaconMessage::BeaconMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.BeaconMessage)
}

void BeaconMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BeaconMessage::BeaconMessage(const BeaconMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.BeaconMessage)
}

void BeaconMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_version_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BeaconMessage::~BeaconMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.BeaconMessage)
  SharedDtor();
}

void BeaconMessage::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BeaconMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeaconMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeaconMessage_descriptor_;
}

const BeaconMessage& BeaconMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

BeaconMessage* BeaconMessage::default_instance_ = NULL;

BeaconMessage* BeaconMessage::New(::google::protobuf::Arena* arena) const {
  BeaconMessage* n = new BeaconMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeaconMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.BeaconMessage)
  protocol_version_ = 0;
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BeaconMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.BeaconMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (tag == 18) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.BeaconMessage.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_type;
        break;
      }

      // optional string device_type = 3;
      case 3: {
        if (tag == 26) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), this->device_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.BeaconMessage.device_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.BeaconMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.BeaconMessage)
  return false;
#undef DO_
}

void BeaconMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.BeaconMessage)
  // optional int32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocol_version(), output);
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.BeaconMessage.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.BeaconMessage.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.BeaconMessage)
}

::google::protobuf::uint8* BeaconMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.BeaconMessage)
  // optional int32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocol_version(), target);
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.BeaconMessage.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.BeaconMessage.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.BeaconMessage)
  return target;
}

int BeaconMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.BeaconMessage)
  int total_size = 0;

  // optional int32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocol_version());
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeaconMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.BeaconMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BeaconMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BeaconMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.BeaconMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.BeaconMessage)
    MergeFrom(*source);
  }
}

void BeaconMessage::MergeFrom(const BeaconMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.BeaconMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.protocol_version() != 0) {
    set_protocol_version(from.protocol_version());
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.device_type().size() > 0) {

    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
}

void BeaconMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.BeaconMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeaconMessage::CopyFrom(const BeaconMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.BeaconMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeaconMessage::IsInitialized() const {

  return true;
}

void BeaconMessage::Swap(BeaconMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeaconMessage::InternalSwap(BeaconMessage* other) {
  std::swap(protocol_version_, other->protocol_version_);
  hostname_.Swap(&other->hostname_);
  device_type_.Swap(&other->device_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeaconMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeaconMessage_descriptor_;
  metadata.reflection = BeaconMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeaconMessage

// optional int32 protocol_version = 1;
void BeaconMessage::clear_protocol_version() {
  protocol_version_ = 0;
}
 ::google::protobuf::int32 BeaconMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.protocol_version)
  return protocol_version_;
}
 void BeaconMessage::set_protocol_version(::google::protobuf::int32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.protocol_version)
}

// optional string hostname = 2;
void BeaconMessage::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BeaconMessage::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BeaconMessage::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.hostname)
}
 void BeaconMessage::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.BeaconMessage.hostname)
}
 void BeaconMessage::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.BeaconMessage.hostname)
}
 ::std::string* BeaconMessage::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.BeaconMessage.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BeaconMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.BeaconMessage.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BeaconMessage::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.BeaconMessage.hostname)
}

// optional string device_type = 3;
void BeaconMessage::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BeaconMessage::device_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.device_type)
  return device_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BeaconMessage::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.device_type)
}
 void BeaconMessage::set_device_type(const char* value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.BeaconMessage.device_type)
}
 void BeaconMessage::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.BeaconMessage.device_type)
}
 ::std::string* BeaconMessage::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.BeaconMessage.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BeaconMessage::release_device_type() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.BeaconMessage.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BeaconMessage::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.BeaconMessage.device_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingRequest::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRequest::PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.PingRequest)
}

void PingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.PingRequest)
}

void PingRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.PingRequest)
  SharedDtor();
}

void PingRequest::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_descriptor_;
}

const PingRequest& PingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New(::google::protobuf::Arena* arena) const {
  PingRequest* n = new PingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.PingRequest)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.PingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.PingRequest.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.PingRequest)
  return false;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.PingRequest)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.PingRequest.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.PingRequest)
}

::google::protobuf::uint8* PingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.PingRequest)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.PingRequest.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.PingRequest)
  return target;
}

int PingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.PingRequest)
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.PingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.PingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.PingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {

  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRequest::InternalSwap(PingRequest* other) {
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingRequest_descriptor_;
  metadata.reflection = PingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRequest

// optional string msg = 1;
void PingRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PingRequest::msg() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.PingRequest.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PingRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.PingRequest.msg)
}
 void PingRequest::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.PingRequest.msg)
}
 void PingRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.PingRequest.msg)
}
 ::std::string* PingRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.PingRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PingRequest::release_msg() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.PingRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PingRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.PingRequest.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingResponse::kEchoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingResponse::PingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.PingResponse)
}

void PingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.PingResponse)
}

void PingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  echo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.PingResponse)
  SharedDtor();
}

void PingResponse::SharedDtor() {
  echo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingResponse_descriptor_;
}

const PingResponse& PingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

PingResponse* PingResponse::default_instance_ = NULL;

PingResponse* PingResponse::New(::google::protobuf::Arena* arena) const {
  PingResponse* n = new PingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.PingResponse)
  echo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.PingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string echo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_echo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->echo().data(), this->echo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.PingResponse.echo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.PingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.PingResponse)
  return false;
#undef DO_
}

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.PingResponse)
  // optional string echo = 1;
  if (this->echo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->echo().data(), this->echo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.PingResponse.echo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->echo(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.PingResponse)
}

::google::protobuf::uint8* PingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.PingResponse)
  // optional string echo = 1;
  if (this->echo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->echo().data(), this->echo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.PingResponse.echo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->echo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.PingResponse)
  return target;
}

int PingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.PingResponse)
  int total_size = 0;

  // optional string echo = 1;
  if (this->echo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->echo());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.PingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.PingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.PingResponse)
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.PingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.echo().size() > 0) {

    echo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.echo_);
  }
}

void PingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {

  return true;
}

void PingResponse::Swap(PingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingResponse::InternalSwap(PingResponse* other) {
  echo_.Swap(&other->echo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingResponse_descriptor_;
  metadata.reflection = PingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingResponse

// optional string echo = 1;
void PingResponse::clear_echo() {
  echo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PingResponse::echo() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.PingResponse.echo)
  return echo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PingResponse::set_echo(const ::std::string& value) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.PingResponse.echo)
}
 void PingResponse::set_echo(const char* value) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.PingResponse.echo)
}
 void PingResponse::set_echo(const char* value, size_t size) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.PingResponse.echo)
}
 ::std::string* PingResponse::mutable_echo() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.PingResponse.echo)
  return echo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PingResponse::release_echo() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.PingResponse.echo)
  
  return echo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PingResponse::set_allocated_echo(::std::string* echo) {
  if (echo != NULL) {
    
  } else {
    
  }
  echo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), echo);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.PingResponse.echo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogsRequest::kLinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogsRequest::LogsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.LogsRequest)
}

void LogsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogsRequest::LogsRequest(const LogsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LogsRequest)
}

void LogsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  lines_ = 0;
}

LogsRequest::~LogsRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LogsRequest)
  SharedDtor();
}

void LogsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogsRequest_descriptor_;
}

const LogsRequest& LogsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

LogsRequest* LogsRequest::default_instance_ = NULL;

LogsRequest* LogsRequest::New(::google::protobuf::Arena* arena) const {
  LogsRequest* n = new LogsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LogsRequest)
  lines_ = 0;
}

bool LogsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.LogsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lines = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lines_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.LogsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.LogsRequest)
  return false;
#undef DO_
}

void LogsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.LogsRequest)
  // optional int32 lines = 1;
  if (this->lines() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lines(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.LogsRequest)
}

::google::protobuf::uint8* LogsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LogsRequest)
  // optional int32 lines = 1;
  if (this->lines() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lines(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LogsRequest)
  return target;
}

int LogsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LogsRequest)
  int total_size = 0;

  // optional int32 lines = 1;
  if (this->lines() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lines());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.LogsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.LogsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.LogsRequest)
    MergeFrom(*source);
  }
}

void LogsRequest::MergeFrom(const LogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LogsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.lines() != 0) {
    set_lines(from.lines());
  }
}

void LogsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.LogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogsRequest::CopyFrom(const LogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsRequest::IsInitialized() const {

  return true;
}

void LogsRequest::Swap(LogsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogsRequest::InternalSwap(LogsRequest* other) {
  std::swap(lines_, other->lines_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogsRequest_descriptor_;
  metadata.reflection = LogsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogsRequest

// optional int32 lines = 1;
void LogsRequest::clear_lines() {
  lines_ = 0;
}
 ::google::protobuf::int32 LogsRequest::lines() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LogsRequest.lines)
  return lines_;
}
 void LogsRequest::set_lines(::google::protobuf::int32 value) {
  
  lines_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LogsRequest.lines)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogsResponse::kLogLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogsResponse::LogsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.LogsResponse)
}

void LogsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogsResponse::LogsResponse(const LogsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LogsResponse)
}

void LogsResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

LogsResponse::~LogsResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LogsResponse)
  SharedDtor();
}

void LogsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogsResponse_descriptor_;
}

const LogsResponse& LogsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

LogsResponse* LogsResponse::default_instance_ = NULL;

LogsResponse* LogsResponse::New(::google::protobuf::Arena* arena) const {
  LogsResponse* n = new LogsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LogsResponse)
  log_line_.Clear();
}

bool LogsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.LogsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string log_line = 1;
      case 1: {
        if (tag == 10) {
         parse_log_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_log_line()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_line(this->log_line_size() - 1).data(),
            this->log_line(this->log_line_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.LogsResponse.log_line"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_log_line;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.LogsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.LogsResponse)
  return false;
#undef DO_
}

void LogsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.LogsResponse)
  // repeated string log_line = 1;
  for (int i = 0; i < this->log_line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_line(i).data(), this->log_line(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.LogsResponse.log_line");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->log_line(i), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.LogsResponse)
}

::google::protobuf::uint8* LogsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LogsResponse)
  // repeated string log_line = 1;
  for (int i = 0; i < this->log_line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_line(i).data(), this->log_line(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.LogsResponse.log_line");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->log_line(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LogsResponse)
  return target;
}

int LogsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LogsResponse)
  int total_size = 0;

  // repeated string log_line = 1;
  total_size += 1 * this->log_line_size();
  for (int i = 0; i < this->log_line_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->log_line(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.LogsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.LogsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.LogsResponse)
    MergeFrom(*source);
  }
}

void LogsResponse::MergeFrom(const LogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LogsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  log_line_.MergeFrom(from.log_line_);
}

void LogsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.LogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogsResponse::CopyFrom(const LogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsResponse::IsInitialized() const {

  return true;
}

void LogsResponse::Swap(LogsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogsResponse::InternalSwap(LogsResponse* other) {
  log_line_.UnsafeArenaSwap(&other->log_line_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogsResponse_descriptor_;
  metadata.reflection = LogsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogsResponse

// repeated string log_line = 1;
int LogsResponse::log_line_size() const {
  return log_line_.size();
}
void LogsResponse::clear_log_line() {
  log_line_.Clear();
}
 const ::std::string& LogsResponse::log_line(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_.Get(index);
}
 ::std::string* LogsResponse::mutable_log_line(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_.Mutable(index);
}
 void LogsResponse::set_log_line(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LogsResponse.log_line)
  log_line_.Mutable(index)->assign(value);
}
 void LogsResponse::set_log_line(int index, const char* value) {
  log_line_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.LogsResponse.log_line)
}
 void LogsResponse::set_log_line(int index, const char* value, size_t size) {
  log_line_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.LogsResponse.log_line)
}
 ::std::string* LogsResponse::add_log_line() {
  // @@protoc_insertion_point(field_add_mutable:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_.Add();
}
 void LogsResponse::add_log_line(const ::std::string& value) {
  log_line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.LogsResponse.log_line)
}
 void LogsResponse::add_log_line(const char* value) {
  log_line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:naki3d.common.protocol.LogsResponse.log_line)
}
 void LogsResponse::add_log_line(const char* value, size_t size) {
  log_line_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:naki3d.common.protocol.LogsResponse.log_line)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LogsResponse::log_line() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LogsResponse::mutable_log_line() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.LogsResponse.log_line)
  return &log_line_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadPackageRequest::kDescriptorJsonFieldNumber;
const int LoadPackageRequest::kIsPreviewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadPackageRequest::LoadPackageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.LoadPackageRequest)
}

void LoadPackageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoadPackageRequest::LoadPackageRequest(const LoadPackageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LoadPackageRequest)
}

void LoadPackageRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  descriptor_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_preview_ = false;
}

LoadPackageRequest::~LoadPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LoadPackageRequest)
  SharedDtor();
}

void LoadPackageRequest::SharedDtor() {
  descriptor_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoadPackageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadPackageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadPackageRequest_descriptor_;
}

const LoadPackageRequest& LoadPackageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

LoadPackageRequest* LoadPackageRequest::default_instance_ = NULL;

LoadPackageRequest* LoadPackageRequest::New(::google::protobuf::Arena* arena) const {
  LoadPackageRequest* n = new LoadPackageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LoadPackageRequest)
  descriptor_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_preview_ = false;
}

bool LoadPackageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.LoadPackageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string descriptor_json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_json().data(), this->descriptor_json().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.LoadPackageRequest.descriptor_json"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_preview;
        break;
      }

      // optional bool is_preview = 2;
      case 2: {
        if (tag == 16) {
         parse_is_preview:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_preview_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.LoadPackageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.LoadPackageRequest)
  return false;
#undef DO_
}

void LoadPackageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.LoadPackageRequest)
  // optional string descriptor_json = 1;
  if (this->descriptor_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_json().data(), this->descriptor_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.LoadPackageRequest.descriptor_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->descriptor_json(), output);
  }

  // optional bool is_preview = 2;
  if (this->is_preview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_preview(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.LoadPackageRequest)
}

::google::protobuf::uint8* LoadPackageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LoadPackageRequest)
  // optional string descriptor_json = 1;
  if (this->descriptor_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_json().data(), this->descriptor_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.LoadPackageRequest.descriptor_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->descriptor_json(), target);
  }

  // optional bool is_preview = 2;
  if (this->is_preview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_preview(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LoadPackageRequest)
  return target;
}

int LoadPackageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LoadPackageRequest)
  int total_size = 0;

  // optional string descriptor_json = 1;
  if (this->descriptor_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_json());
  }

  // optional bool is_preview = 2;
  if (this->is_preview() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadPackageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.LoadPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoadPackageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadPackageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.LoadPackageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.LoadPackageRequest)
    MergeFrom(*source);
  }
}

void LoadPackageRequest::MergeFrom(const LoadPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LoadPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.descriptor_json().size() > 0) {

    descriptor_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_json_);
  }
  if (from.is_preview() != 0) {
    set_is_preview(from.is_preview());
  }
}

void LoadPackageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.LoadPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPackageRequest::CopyFrom(const LoadPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LoadPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPackageRequest::IsInitialized() const {

  return true;
}

void LoadPackageRequest::Swap(LoadPackageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadPackageRequest::InternalSwap(LoadPackageRequest* other) {
  descriptor_json_.Swap(&other->descriptor_json_);
  std::swap(is_preview_, other->is_preview_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadPackageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadPackageRequest_descriptor_;
  metadata.reflection = LoadPackageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadPackageRequest

// optional string descriptor_json = 1;
void LoadPackageRequest::clear_descriptor_json() {
  descriptor_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoadPackageRequest::descriptor_json() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  return descriptor_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadPackageRequest::set_descriptor_json(const ::std::string& value) {
  
  descriptor_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}
 void LoadPackageRequest::set_descriptor_json(const char* value) {
  
  descriptor_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}
 void LoadPackageRequest::set_descriptor_json(const char* value, size_t size) {
  
  descriptor_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}
 ::std::string* LoadPackageRequest::mutable_descriptor_json() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  return descriptor_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoadPackageRequest::release_descriptor_json() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  
  return descriptor_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadPackageRequest::set_allocated_descriptor_json(::std::string* descriptor_json) {
  if (descriptor_json != NULL) {
    
  } else {
    
  }
  descriptor_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_json);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}

// optional bool is_preview = 2;
void LoadPackageRequest::clear_is_preview() {
  is_preview_ = false;
}
 bool LoadPackageRequest::is_preview() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackageRequest.is_preview)
  return is_preview_;
}
 void LoadPackageRequest::set_is_preview(bool value) {
  
  is_preview_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackageRequest.is_preview)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearStartupPackageRequest::kPurgeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearStartupPackageRequest::ClearStartupPackageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.ClearStartupPackageRequest)
}

void ClearStartupPackageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClearStartupPackageRequest::ClearStartupPackageRequest(const ClearStartupPackageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ClearStartupPackageRequest)
}

void ClearStartupPackageRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  purge_data_ = false;
}

ClearStartupPackageRequest::~ClearStartupPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.ClearStartupPackageRequest)
  SharedDtor();
}

void ClearStartupPackageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearStartupPackageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearStartupPackageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearStartupPackageRequest_descriptor_;
}

const ClearStartupPackageRequest& ClearStartupPackageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

ClearStartupPackageRequest* ClearStartupPackageRequest::default_instance_ = NULL;

ClearStartupPackageRequest* ClearStartupPackageRequest::New(::google::protobuf::Arena* arena) const {
  ClearStartupPackageRequest* n = new ClearStartupPackageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearStartupPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.ClearStartupPackageRequest)
  purge_data_ = false;
}

bool ClearStartupPackageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.ClearStartupPackageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool purge_data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purge_data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.ClearStartupPackageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.ClearStartupPackageRequest)
  return false;
#undef DO_
}

void ClearStartupPackageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.ClearStartupPackageRequest)
  // optional bool purge_data = 1;
  if (this->purge_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->purge_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.ClearStartupPackageRequest)
}

::google::protobuf::uint8* ClearStartupPackageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.ClearStartupPackageRequest)
  // optional bool purge_data = 1;
  if (this->purge_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->purge_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.ClearStartupPackageRequest)
  return target;
}

int ClearStartupPackageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.ClearStartupPackageRequest)
  int total_size = 0;

  // optional bool purge_data = 1;
  if (this->purge_data() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearStartupPackageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.ClearStartupPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClearStartupPackageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearStartupPackageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.ClearStartupPackageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.ClearStartupPackageRequest)
    MergeFrom(*source);
  }
}

void ClearStartupPackageRequest::MergeFrom(const ClearStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.ClearStartupPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.purge_data() != 0) {
    set_purge_data(from.purge_data());
  }
}

void ClearStartupPackageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.ClearStartupPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearStartupPackageRequest::CopyFrom(const ClearStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.ClearStartupPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearStartupPackageRequest::IsInitialized() const {

  return true;
}

void ClearStartupPackageRequest::Swap(ClearStartupPackageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearStartupPackageRequest::InternalSwap(ClearStartupPackageRequest* other) {
  std::swap(purge_data_, other->purge_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearStartupPackageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearStartupPackageRequest_descriptor_;
  metadata.reflection = ClearStartupPackageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearStartupPackageRequest

// optional bool purge_data = 1;
void ClearStartupPackageRequest::clear_purge_data() {
  purge_data_ = false;
}
 bool ClearStartupPackageRequest::purge_data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ClearStartupPackageRequest.purge_data)
  return purge_data_;
}
 void ClearStartupPackageRequest::set_purge_data(bool value) {
  
  purge_data_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ClearStartupPackageRequest.purge_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartupPackageResponse::kPackageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartupPackageResponse::StartupPackageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.StartupPackageResponse)
}

void StartupPackageResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartupPackageResponse::StartupPackageResponse(const StartupPackageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.StartupPackageResponse)
}

void StartupPackageResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  package_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StartupPackageResponse::~StartupPackageResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.StartupPackageResponse)
  SharedDtor();
}

void StartupPackageResponse::SharedDtor() {
  package_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StartupPackageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartupPackageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartupPackageResponse_descriptor_;
}

const StartupPackageResponse& StartupPackageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

StartupPackageResponse* StartupPackageResponse::default_instance_ = NULL;

StartupPackageResponse* StartupPackageResponse::New(::google::protobuf::Arena* arena) const {
  StartupPackageResponse* n = new StartupPackageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartupPackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.StartupPackageResponse)
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartupPackageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.StartupPackageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package_id().data(), this->package_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.StartupPackageResponse.package_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.StartupPackageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.StartupPackageResponse)
  return false;
#undef DO_
}

void StartupPackageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.StartupPackageResponse)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.StartupPackageResponse.package_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.StartupPackageResponse)
}

::google::protobuf::uint8* StartupPackageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.StartupPackageResponse)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.StartupPackageResponse.package_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->package_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.StartupPackageResponse)
  return target;
}

int StartupPackageResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.StartupPackageResponse)
  int total_size = 0;

  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartupPackageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.StartupPackageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartupPackageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartupPackageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.StartupPackageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.StartupPackageResponse)
    MergeFrom(*source);
  }
}

void StartupPackageResponse::MergeFrom(const StartupPackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.StartupPackageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.package_id().size() > 0) {

    package_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_id_);
  }
}

void StartupPackageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.StartupPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartupPackageResponse::CopyFrom(const StartupPackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.StartupPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupPackageResponse::IsInitialized() const {

  return true;
}

void StartupPackageResponse::Swap(StartupPackageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartupPackageResponse::InternalSwap(StartupPackageResponse* other) {
  package_id_.Swap(&other->package_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartupPackageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartupPackageResponse_descriptor_;
  metadata.reflection = StartupPackageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartupPackageResponse

// optional string package_id = 1;
void StartupPackageResponse::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StartupPackageResponse::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.StartupPackageResponse.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartupPackageResponse::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.StartupPackageResponse.package_id)
}
 void StartupPackageResponse::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.StartupPackageResponse.package_id)
}
 void StartupPackageResponse::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.StartupPackageResponse.package_id)
}
 ::std::string* StartupPackageResponse::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.StartupPackageResponse.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StartupPackageResponse::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.StartupPackageResponse.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartupPackageResponse::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.StartupPackageResponse.package_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetStartupPackageRequest::kPackageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetStartupPackageRequest::SetStartupPackageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.SetStartupPackageRequest)
}

void SetStartupPackageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetStartupPackageRequest::SetStartupPackageRequest(const SetStartupPackageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SetStartupPackageRequest)
}

void SetStartupPackageRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  package_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetStartupPackageRequest::~SetStartupPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SetStartupPackageRequest)
  SharedDtor();
}

void SetStartupPackageRequest::SharedDtor() {
  package_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SetStartupPackageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetStartupPackageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetStartupPackageRequest_descriptor_;
}

const SetStartupPackageRequest& SetStartupPackageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

SetStartupPackageRequest* SetStartupPackageRequest::default_instance_ = NULL;

SetStartupPackageRequest* SetStartupPackageRequest::New(::google::protobuf::Arena* arena) const {
  SetStartupPackageRequest* n = new SetStartupPackageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetStartupPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SetStartupPackageRequest)
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetStartupPackageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.SetStartupPackageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package_id().data(), this->package_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.SetStartupPackageRequest.package_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.SetStartupPackageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.SetStartupPackageRequest)
  return false;
#undef DO_
}

void SetStartupPackageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.SetStartupPackageRequest)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SetStartupPackageRequest.package_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.SetStartupPackageRequest)
}

::google::protobuf::uint8* SetStartupPackageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SetStartupPackageRequest)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SetStartupPackageRequest.package_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->package_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SetStartupPackageRequest)
  return target;
}

int SetStartupPackageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SetStartupPackageRequest)
  int total_size = 0;

  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetStartupPackageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SetStartupPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetStartupPackageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetStartupPackageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SetStartupPackageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SetStartupPackageRequest)
    MergeFrom(*source);
  }
}

void SetStartupPackageRequest::MergeFrom(const SetStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SetStartupPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.package_id().size() > 0) {

    package_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_id_);
  }
}

void SetStartupPackageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SetStartupPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStartupPackageRequest::CopyFrom(const SetStartupPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SetStartupPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStartupPackageRequest::IsInitialized() const {

  return true;
}

void SetStartupPackageRequest::Swap(SetStartupPackageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetStartupPackageRequest::InternalSwap(SetStartupPackageRequest* other) {
  package_id_.Swap(&other->package_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetStartupPackageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetStartupPackageRequest_descriptor_;
  metadata.reflection = SetStartupPackageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetStartupPackageRequest

// optional string package_id = 1;
void SetStartupPackageRequest::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetStartupPackageRequest::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetStartupPackageRequest::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}
 void SetStartupPackageRequest::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}
 void SetStartupPackageRequest::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}
 ::std::string* SetStartupPackageRequest::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetStartupPackageRequest::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetStartupPackageRequest::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartPackageRequest::kPackageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartPackageRequest::StartPackageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.StartPackageRequest)
}

void StartPackageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartPackageRequest::StartPackageRequest(const StartPackageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.StartPackageRequest)
}

void StartPackageRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  package_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StartPackageRequest::~StartPackageRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.StartPackageRequest)
  SharedDtor();
}

void StartPackageRequest::SharedDtor() {
  package_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StartPackageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartPackageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartPackageRequest_descriptor_;
}

const StartPackageRequest& StartPackageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

StartPackageRequest* StartPackageRequest::default_instance_ = NULL;

StartPackageRequest* StartPackageRequest::New(::google::protobuf::Arena* arena) const {
  StartPackageRequest* n = new StartPackageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.StartPackageRequest)
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartPackageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.StartPackageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package_id().data(), this->package_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.StartPackageRequest.package_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.StartPackageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.StartPackageRequest)
  return false;
#undef DO_
}

void StartPackageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.StartPackageRequest)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.StartPackageRequest.package_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.StartPackageRequest)
}

::google::protobuf::uint8* StartPackageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.StartPackageRequest)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.StartPackageRequest.package_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->package_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.StartPackageRequest)
  return target;
}

int StartPackageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.StartPackageRequest)
  int total_size = 0;

  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartPackageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.StartPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartPackageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartPackageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.StartPackageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.StartPackageRequest)
    MergeFrom(*source);
  }
}

void StartPackageRequest::MergeFrom(const StartPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.StartPackageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.package_id().size() > 0) {

    package_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_id_);
  }
}

void StartPackageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.StartPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPackageRequest::CopyFrom(const StartPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.StartPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPackageRequest::IsInitialized() const {

  return true;
}

void StartPackageRequest::Swap(StartPackageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartPackageRequest::InternalSwap(StartPackageRequest* other) {
  package_id_.Swap(&other->package_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartPackageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartPackageRequest_descriptor_;
  metadata.reflection = StartPackageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartPackageRequest

// optional string package_id = 1;
void StartPackageRequest::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StartPackageRequest::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.StartPackageRequest.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartPackageRequest::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.StartPackageRequest.package_id)
}
 void StartPackageRequest::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.StartPackageRequest.package_id)
}
 void StartPackageRequest::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.StartPackageRequest.package_id)
}
 ::std::string* StartPackageRequest::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.StartPackageRequest.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StartPackageRequest::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.StartPackageRequest.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartPackageRequest::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.StartPackageRequest.package_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CachedPackagesResponse_SinglePackage::kPackageIdFieldNumber;
const int CachedPackagesResponse_SinglePackage::kChecksumFieldNumber;
const int CachedPackagesResponse_SinglePackage::kDownloadTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CachedPackagesResponse_SinglePackage::CachedPackagesResponse_SinglePackage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
}

void CachedPackagesResponse_SinglePackage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  download_time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

CachedPackagesResponse_SinglePackage::CachedPackagesResponse_SinglePackage(const CachedPackagesResponse_SinglePackage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
}

void CachedPackagesResponse_SinglePackage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  package_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_time_ = NULL;
}

CachedPackagesResponse_SinglePackage::~CachedPackagesResponse_SinglePackage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  SharedDtor();
}

void CachedPackagesResponse_SinglePackage::SharedDtor() {
  package_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete download_time_;
  }
}

void CachedPackagesResponse_SinglePackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedPackagesResponse_SinglePackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedPackagesResponse_SinglePackage_descriptor_;
}

const CachedPackagesResponse_SinglePackage& CachedPackagesResponse_SinglePackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

CachedPackagesResponse_SinglePackage* CachedPackagesResponse_SinglePackage::default_instance_ = NULL;

CachedPackagesResponse_SinglePackage* CachedPackagesResponse_SinglePackage::New(::google::protobuf::Arena* arena) const {
  CachedPackagesResponse_SinglePackage* n = new CachedPackagesResponse_SinglePackage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CachedPackagesResponse_SinglePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && download_time_ != NULL) delete download_time_;
  download_time_ = NULL;
}

bool CachedPackagesResponse_SinglePackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package_id().data(), this->package_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_checksum;
        break;
      }

      // optional string checksum = 2;
      case 2: {
        if (tag == 18) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checksum().data(), this->checksum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_download_time;
        break;
      }

      // optional .google.protobuf.Timestamp download_time = 3;
      case 3: {
        if (tag == 26) {
         parse_download_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  return false;
#undef DO_
}

void CachedPackagesResponse_SinglePackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package_id(), output);
  }

  // optional string checksum = 2;
  if (this->checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->checksum(), output);
  }

  // optional .google.protobuf.Timestamp download_time = 3;
  if (this->has_download_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->download_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
}

::google::protobuf::uint8* CachedPackagesResponse_SinglePackage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_id().data(), this->package_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->package_id(), target);
  }

  // optional string checksum = 2;
  if (this->checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->checksum(), target);
  }

  // optional .google.protobuf.Timestamp download_time = 3;
  if (this->has_download_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->download_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  return target;
}

int CachedPackagesResponse_SinglePackage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  int total_size = 0;

  // optional string package_id = 1;
  if (this->package_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package_id());
  }

  // optional string checksum = 2;
  if (this->checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checksum());
  }

  // optional .google.protobuf.Timestamp download_time = 3;
  if (this->has_download_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->download_time_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedPackagesResponse_SinglePackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CachedPackagesResponse_SinglePackage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CachedPackagesResponse_SinglePackage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
    MergeFrom(*source);
  }
}

void CachedPackagesResponse_SinglePackage::MergeFrom(const CachedPackagesResponse_SinglePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.package_id().size() > 0) {

    package_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_id_);
  }
  if (from.checksum().size() > 0) {

    checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  if (from.has_download_time()) {
    mutable_download_time()->::google::protobuf::Timestamp::MergeFrom(from.download_time());
  }
}

void CachedPackagesResponse_SinglePackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedPackagesResponse_SinglePackage::CopyFrom(const CachedPackagesResponse_SinglePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedPackagesResponse_SinglePackage::IsInitialized() const {

  return true;
}

void CachedPackagesResponse_SinglePackage::Swap(CachedPackagesResponse_SinglePackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CachedPackagesResponse_SinglePackage::InternalSwap(CachedPackagesResponse_SinglePackage* other) {
  package_id_.Swap(&other->package_id_);
  checksum_.Swap(&other->checksum_);
  std::swap(download_time_, other->download_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CachedPackagesResponse_SinglePackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedPackagesResponse_SinglePackage_descriptor_;
  metadata.reflection = CachedPackagesResponse_SinglePackage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CachedPackagesResponse::kPackagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CachedPackagesResponse::CachedPackagesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.CachedPackagesResponse)
}

void CachedPackagesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CachedPackagesResponse::CachedPackagesResponse(const CachedPackagesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.CachedPackagesResponse)
}

void CachedPackagesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CachedPackagesResponse::~CachedPackagesResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.CachedPackagesResponse)
  SharedDtor();
}

void CachedPackagesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CachedPackagesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedPackagesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedPackagesResponse_descriptor_;
}

const CachedPackagesResponse& CachedPackagesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

CachedPackagesResponse* CachedPackagesResponse::default_instance_ = NULL;

CachedPackagesResponse* CachedPackagesResponse::New(::google::protobuf::Arena* arena) const {
  CachedPackagesResponse* n = new CachedPackagesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CachedPackagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.CachedPackagesResponse)
  packages_.Clear();
}

bool CachedPackagesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.CachedPackagesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_packages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.CachedPackagesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.CachedPackagesResponse)
  return false;
#undef DO_
}

void CachedPackagesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.CachedPackagesResponse)
  // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->packages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.CachedPackagesResponse)
}

::google::protobuf::uint8* CachedPackagesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.CachedPackagesResponse)
  // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->packages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.CachedPackagesResponse)
  return target;
}

int CachedPackagesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.CachedPackagesResponse)
  int total_size = 0;

  // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedPackagesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.CachedPackagesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CachedPackagesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CachedPackagesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.CachedPackagesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.CachedPackagesResponse)
    MergeFrom(*source);
  }
}

void CachedPackagesResponse::MergeFrom(const CachedPackagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.CachedPackagesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  packages_.MergeFrom(from.packages_);
}

void CachedPackagesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.CachedPackagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedPackagesResponse::CopyFrom(const CachedPackagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.CachedPackagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedPackagesResponse::IsInitialized() const {

  return true;
}

void CachedPackagesResponse::Swap(CachedPackagesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CachedPackagesResponse::InternalSwap(CachedPackagesResponse* other) {
  packages_.UnsafeArenaSwap(&other->packages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CachedPackagesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedPackagesResponse_descriptor_;
  metadata.reflection = CachedPackagesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CachedPackagesResponse_SinglePackage

// optional string package_id = 1;
void CachedPackagesResponse_SinglePackage::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CachedPackagesResponse_SinglePackage::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CachedPackagesResponse_SinglePackage::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}
 void CachedPackagesResponse_SinglePackage::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}
 void CachedPackagesResponse_SinglePackage::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}
 ::std::string* CachedPackagesResponse_SinglePackage::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CachedPackagesResponse_SinglePackage::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CachedPackagesResponse_SinglePackage::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}

// optional string checksum = 2;
void CachedPackagesResponse_SinglePackage::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CachedPackagesResponse_SinglePackage::checksum() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  return checksum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CachedPackagesResponse_SinglePackage::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}
 void CachedPackagesResponse_SinglePackage::set_checksum(const char* value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}
 void CachedPackagesResponse_SinglePackage::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}
 ::std::string* CachedPackagesResponse_SinglePackage::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CachedPackagesResponse_SinglePackage::release_checksum() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CachedPackagesResponse_SinglePackage::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}

// optional .google.protobuf.Timestamp download_time = 3;
bool CachedPackagesResponse_SinglePackage::has_download_time() const {
  return !_is_default_instance_ && download_time_ != NULL;
}
void CachedPackagesResponse_SinglePackage::clear_download_time() {
  if (GetArenaNoVirtual() == NULL && download_time_ != NULL) delete download_time_;
  download_time_ = NULL;
}
const ::google::protobuf::Timestamp& CachedPackagesResponse_SinglePackage::download_time() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  return download_time_ != NULL ? *download_time_ : *default_instance_->download_time_;
}
::google::protobuf::Timestamp* CachedPackagesResponse_SinglePackage::mutable_download_time() {
  
  if (download_time_ == NULL) {
    download_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  return download_time_;
}
::google::protobuf::Timestamp* CachedPackagesResponse_SinglePackage::release_download_time() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  
  ::google::protobuf::Timestamp* temp = download_time_;
  download_time_ = NULL;
  return temp;
}
void CachedPackagesResponse_SinglePackage::set_allocated_download_time(::google::protobuf::Timestamp* download_time) {
  delete download_time_;
  if (download_time != NULL && download_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_download_time = new ::google::protobuf::Timestamp;
    new_download_time->CopyFrom(*download_time);
    download_time = new_download_time;
  }
  download_time_ = download_time;
  if (download_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
}

// -------------------------------------------------------------------

// CachedPackagesResponse

// repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
int CachedPackagesResponse::packages_size() const {
  return packages_.size();
}
void CachedPackagesResponse::clear_packages() {
  packages_.Clear();
}
const ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage& CachedPackagesResponse::packages(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_.Get(index);
}
::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* CachedPackagesResponse::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_.Mutable(index);
}
::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* CachedPackagesResponse::add_packages() {
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_.Add();
}
::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >*
CachedPackagesResponse::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.CachedPackagesResponse.packages)
  return &packages_;
}
const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >&
CachedPackagesResponse::packages() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceDescriptorResponse::kProtocolVersionFieldNumber;
const int DeviceDescriptorResponse::kHostnameFieldNumber;
const int DeviceDescriptorResponse::kDeviceTypeFieldNumber;
const int DeviceDescriptorResponse::kFirmwareVersionFieldNumber;
const int DeviceDescriptorResponse::kAvailableSensorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceDescriptorResponse::DeviceDescriptorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.DeviceDescriptorResponse)
}

void DeviceDescriptorResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceDescriptorResponse::DeviceDescriptorResponse(const DeviceDescriptorResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.DeviceDescriptorResponse)
}

void DeviceDescriptorResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_version_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceDescriptorResponse::~DeviceDescriptorResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.DeviceDescriptorResponse)
  SharedDtor();
}

void DeviceDescriptorResponse::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeviceDescriptorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceDescriptorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceDescriptorResponse_descriptor_;
}

const DeviceDescriptorResponse& DeviceDescriptorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_emt_2dgrpc_2eproto();
  return *default_instance_;
}

DeviceDescriptorResponse* DeviceDescriptorResponse::default_instance_ = NULL;

DeviceDescriptorResponse* DeviceDescriptorResponse::New(::google::protobuf::Arena* arena) const {
  DeviceDescriptorResponse* n = new DeviceDescriptorResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceDescriptorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.DeviceDescriptorResponse)
  protocol_version_ = 0;
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_sensors_.Clear();
}

bool DeviceDescriptorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.DeviceDescriptorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (tag == 18) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.DeviceDescriptorResponse.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_type;
        break;
      }

      // optional string device_type = 3;
      case 3: {
        if (tag == 26) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), this->device_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.DeviceDescriptorResponse.device_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_firmware_version;
        break;
      }

      // optional string firmware_version = 4;
      case 4: {
        if (tag == 34) {
         parse_firmware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_version().data(), this->firmware_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.DeviceDescriptorResponse.firmware_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_available_sensors;
        break;
      }

      // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
      case 5: {
        if (tag == 42) {
         parse_available_sensors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_available_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_available_sensors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_available_sensors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.DeviceDescriptorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.DeviceDescriptorResponse)
  return false;
#undef DO_
}

void DeviceDescriptorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.DeviceDescriptorResponse)
  // optional int32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocol_version(), output);
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_type(), output);
  }

  // optional string firmware_version = 4;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->firmware_version(), output);
  }

  // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
  for (unsigned int i = 0, n = this->available_sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->available_sensors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.DeviceDescriptorResponse)
}

::google::protobuf::uint8* DeviceDescriptorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.DeviceDescriptorResponse)
  // optional int32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocol_version(), target);
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_type(), target);
  }

  // optional string firmware_version = 4;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.DeviceDescriptorResponse.firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->firmware_version(), target);
  }

  // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
  for (unsigned int i = 0, n = this->available_sensors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->available_sensors(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.DeviceDescriptorResponse)
  return target;
}

int DeviceDescriptorResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.DeviceDescriptorResponse)
  int total_size = 0;

  // optional int32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocol_version());
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // optional string firmware_version = 4;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_version());
  }

  // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
  total_size += 1 * this->available_sensors_size();
  for (int i = 0; i < this->available_sensors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->available_sensors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceDescriptorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.DeviceDescriptorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceDescriptorResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceDescriptorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.DeviceDescriptorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.DeviceDescriptorResponse)
    MergeFrom(*source);
  }
}

void DeviceDescriptorResponse::MergeFrom(const DeviceDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.DeviceDescriptorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  available_sensors_.MergeFrom(from.available_sensors_);
  if (from.protocol_version() != 0) {
    set_protocol_version(from.protocol_version());
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.device_type().size() > 0) {

    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from.firmware_version().size() > 0) {

    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
}

void DeviceDescriptorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.DeviceDescriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDescriptorResponse::CopyFrom(const DeviceDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.DeviceDescriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDescriptorResponse::IsInitialized() const {

  return true;
}

void DeviceDescriptorResponse::Swap(DeviceDescriptorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceDescriptorResponse::InternalSwap(DeviceDescriptorResponse* other) {
  std::swap(protocol_version_, other->protocol_version_);
  hostname_.Swap(&other->hostname_);
  device_type_.Swap(&other->device_type_);
  firmware_version_.Swap(&other->firmware_version_);
  available_sensors_.UnsafeArenaSwap(&other->available_sensors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceDescriptorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceDescriptorResponse_descriptor_;
  metadata.reflection = DeviceDescriptorResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceDescriptorResponse

// optional int32 protocol_version = 1;
void DeviceDescriptorResponse::clear_protocol_version() {
  protocol_version_ = 0;
}
 ::google::protobuf::int32 DeviceDescriptorResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.protocol_version)
  return protocol_version_;
}
 void DeviceDescriptorResponse::set_protocol_version(::google::protobuf::int32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.protocol_version)
}

// optional string hostname = 2;
void DeviceDescriptorResponse::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceDescriptorResponse::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceDescriptorResponse::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}
 void DeviceDescriptorResponse::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}
 void DeviceDescriptorResponse::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}
 ::std::string* DeviceDescriptorResponse::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceDescriptorResponse::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceDescriptorResponse::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}

// optional string device_type = 3;
void DeviceDescriptorResponse::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceDescriptorResponse::device_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  return device_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceDescriptorResponse::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}
 void DeviceDescriptorResponse::set_device_type(const char* value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}
 void DeviceDescriptorResponse::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}
 ::std::string* DeviceDescriptorResponse::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceDescriptorResponse::release_device_type() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceDescriptorResponse::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}

// optional string firmware_version = 4;
void DeviceDescriptorResponse::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceDescriptorResponse::firmware_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  return firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceDescriptorResponse::set_firmware_version(const ::std::string& value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}
 void DeviceDescriptorResponse::set_firmware_version(const char* value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}
 void DeviceDescriptorResponse::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}
 ::std::string* DeviceDescriptorResponse::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceDescriptorResponse::release_firmware_version() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceDescriptorResponse::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}

// repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
int DeviceDescriptorResponse::available_sensors_size() const {
  return available_sensors_.size();
}
void DeviceDescriptorResponse::clear_available_sensors() {
  available_sensors_.Clear();
}
const ::naki3d::common::protocol::SensorDescriptor& DeviceDescriptorResponse::available_sensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_.Get(index);
}
::naki3d::common::protocol::SensorDescriptor* DeviceDescriptorResponse::mutable_available_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_.Mutable(index);
}
::naki3d::common::protocol::SensorDescriptor* DeviceDescriptorResponse::add_available_sensors() {
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
DeviceDescriptorResponse::mutable_available_sensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return &available_sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
DeviceDescriptorResponse::available_sensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Vector3Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_types_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_types_2eproto() {
  protobuf_AddDesc_types_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "types.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3Data_descriptor_ = file->message_type(0);
  static const int Vector3Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Data, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Data, z_),
  };
  Vector3Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3Data_descriptor_,
      Vector3Data::default_instance_,
      Vector3Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Data, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Data, _is_default_instance_));
  Vector2Data_descriptor_ = file->message_type(1);
  static const int Vector2Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2Data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2Data, y_),
  };
  Vector2Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector2Data_descriptor_,
      Vector2Data::default_instance_,
      Vector2Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector2Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2Data, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2Data, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_types_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3Data_descriptor_, &Vector3Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector2Data_descriptor_, &Vector2Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_types_2eproto() {
  delete Vector3Data::default_instance_;
  delete Vector3Data_reflection_;
  delete Vector2Data::default_instance_;
  delete Vector2Data_reflection_;
}

void protobuf_AddDesc_types_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_types_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013types.proto\022\026naki3d.common.protocol\".\n"
    "\013Vector3Data\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030"
    "\003 \001(\002\"#\n\013Vector2Data\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
    "(\002b\006proto3", 130);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "types.proto", &protobuf_RegisterTypes);
  Vector3Data::default_instance_ = new Vector3Data();
  Vector2Data::default_instance_ = new Vector2Data();
  Vector3Data::default_instance_->InitAsDefaultInstance();
  Vector2Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_types_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_types_2eproto {
  StaticDescriptorInitializer_types_2eproto() {
    protobuf_AddDesc_types_2eproto();
  }
} static_descriptor_initializer_types_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3Data::kXFieldNumber;
const int Vector3Data::kYFieldNumber;
const int Vector3Data::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3Data::Vector3Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.Vector3Data)
}

void Vector3Data::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector3Data::Vector3Data(const Vector3Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.Vector3Data)
}

void Vector3Data::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Vector3Data::~Vector3Data() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.Vector3Data)
  SharedDtor();
}

void Vector3Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3Data_descriptor_;
}

const Vector3Data& Vector3Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_types_2eproto();
  return *default_instance_;
}

Vector3Data* Vector3Data::default_instance_ = NULL;

Vector3Data* Vector3Data::New(::google::protobuf::Arena* arena) const {
  Vector3Data* n = new Vector3Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3Data::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.Vector3Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.Vector3Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.Vector3Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.Vector3Data)
  return false;
#undef DO_
}

void Vector3Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.Vector3Data)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.Vector3Data)
}

::google::protobuf::uint8* Vector3Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.Vector3Data)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.Vector3Data)
  return target;
}

int Vector3Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.Vector3Data)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.Vector3Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.Vector3Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.Vector3Data)
    MergeFrom(*source);
  }
}

void Vector3Data::MergeFrom(const Vector3Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.Vector3Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.Vector3Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3Data::CopyFrom(const Vector3Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.Vector3Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3Data::IsInitialized() const {

  return true;
}

void Vector3Data::Swap(Vector3Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3Data::InternalSwap(Vector3Data* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3Data_descriptor_;
  metadata.reflection = Vector3Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3Data

// optional float x = 1;
void Vector3Data::clear_x() {
  x_ = 0;
}
 float Vector3Data::x() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.Vector3Data.x)
  return x_;
}
 void Vector3Data::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.Vector3Data.x)
}

// optional float y = 2;
void Vector3Data::clear_y() {
  y_ = 0;
}
 float Vector3Data::y() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.Vector3Data.y)
  return y_;
}
 void Vector3Data::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.Vector3Data.y)
}

// optional float z = 3;
void Vector3Data::clear_z() {
  z_ = 0;
}
 float Vector3Data::z() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.Vector3Data.z)
  return z_;
}
 void Vector3Data::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.Vector3Data.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2Data::kXFieldNumber;
const int Vector2Data::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2Data::Vector2Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.Vector2Data)
}

void Vector2Data::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector2Data::Vector2Data(const Vector2Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.Vector2Data)
}

void Vector2Data::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Vector2Data::~Vector2Data() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.Vector2Data)
  SharedDtor();
}

void Vector2Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2Data_descriptor_;
}

const Vector2Data& Vector2Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_types_2eproto();
  return *default_instance_;
}

Vector2Data* Vector2Data::default_instance_ = NULL;

Vector2Data* Vector2Data::New(::google::protobuf::Arena* arena) const {
  Vector2Data* n = new Vector2Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2Data::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.Vector2Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector2Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector2Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector2Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.Vector2Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.Vector2Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.Vector2Data)
  return false;
#undef DO_
}

void Vector2Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.Vector2Data)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.Vector2Data)
}

::google::protobuf::uint8* Vector2Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.Vector2Data)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.Vector2Data)
  return target;
}

int Vector2Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.Vector2Data)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.Vector2Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector2Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.Vector2Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.Vector2Data)
    MergeFrom(*source);
  }
}

void Vector2Data::MergeFrom(const Vector2Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.Vector2Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.Vector2Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2Data::CopyFrom(const Vector2Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.Vector2Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2Data::IsInitialized() const {

  return true;
}

void Vector2Data::Swap(Vector2Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2Data::InternalSwap(Vector2Data* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2Data_descriptor_;
  metadata.reflection = Vector2Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2Data

// optional float x = 1;
void Vector2Data::clear_x() {
  x_ = 0;
}
 float Vector2Data::x() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.Vector2Data.x)
  return x_;
}
 void Vector2Data::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.Vector2Data.x)
}

// optional float y = 2;
void Vector2Data::clear_y() {
  y_ = 0;
}
 float Vector2Data::y() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.Vector2Data.y)
  return y_;
}
 void Vector2Data::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.Vector2Data.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

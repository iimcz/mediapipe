// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realsense.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_realsense_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_realsense_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include "handtracking.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_realsense_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_realsense_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_realsense_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class BestUserChangedData;
struct BestUserChangedDataDefaultTypeInternal;
extern BestUserChangedDataDefaultTypeInternal _BestUserChangedData_default_instance_;
class GestureData;
struct GestureDataDefaultTypeInternal;
extern GestureDataDefaultTypeInternal _GestureData_default_instance_;
class HandMovementData;
struct HandMovementDataDefaultTypeInternal;
extern HandMovementDataDefaultTypeInternal _HandMovementData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::BestUserChangedData* Arena::CreateMaybeMessage<::naki3d::common::protocol::BestUserChangedData>(Arena*);
template<> ::naki3d::common::protocol::GestureData* Arena::CreateMaybeMessage<::naki3d::common::protocol::GestureData>(Arena*);
template<> ::naki3d::common::protocol::HandMovementData* Arena::CreateMaybeMessage<::naki3d::common::protocol::HandMovementData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class GestureData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.GestureData) */ {
 public:
  inline GestureData() : GestureData(nullptr) {}
  ~GestureData() override;
  explicit PROTOBUF_CONSTEXPR GestureData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GestureData(const GestureData& from);
  GestureData(GestureData&& from) noexcept
    : GestureData() {
    *this = ::std::move(from);
  }

  inline GestureData& operator=(const GestureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GestureData& operator=(GestureData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GestureData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GestureData* internal_default_instance() {
    return reinterpret_cast<const GestureData*>(
               &_GestureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GestureData& a, GestureData& b) {
    a.Swap(&b);
  }
  inline void Swap(GestureData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GestureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GestureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GestureData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GestureData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GestureData& from) {
    GestureData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GestureData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.GestureData";
  }
  protected:
  explicit GestureData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // .naki3d.common.protocol.HandGestureType type = 1;
  void clear_type();
  ::naki3d::common::protocol::HandGestureType type() const;
  void set_type(::naki3d::common::protocol::HandGestureType value);
  private:
  ::naki3d::common::protocol::HandGestureType _internal_type() const;
  void _internal_set_type(::naki3d::common::protocol::HandGestureType value);
  public:

  // int32 user_id = 2;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.GestureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_realsense_2eproto;
};
// -------------------------------------------------------------------

class HandMovementData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.HandMovementData) */ {
 public:
  inline HandMovementData() : HandMovementData(nullptr) {}
  ~HandMovementData() override;
  explicit PROTOBUF_CONSTEXPR HandMovementData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandMovementData(const HandMovementData& from);
  HandMovementData(HandMovementData&& from) noexcept
    : HandMovementData() {
    *this = ::std::move(from);
  }

  inline HandMovementData& operator=(const HandMovementData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandMovementData& operator=(HandMovementData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandMovementData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandMovementData* internal_default_instance() {
    return reinterpret_cast<const HandMovementData*>(
               &_HandMovementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandMovementData& a, HandMovementData& b) {
    a.Swap(&b);
  }
  inline void Swap(HandMovementData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandMovementData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandMovementData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandMovementData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandMovementData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandMovementData& from) {
    HandMovementData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandMovementData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.HandMovementData";
  }
  protected:
  explicit HandMovementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjPositionFieldNumber = 2,
    kHandFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // .naki3d.common.protocol.Vector3 proj_position = 2;
  bool has_proj_position() const;
  private:
  bool _internal_has_proj_position() const;
  public:
  void clear_proj_position();
  const ::naki3d::common::protocol::Vector3& proj_position() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::Vector3* release_proj_position();
  ::naki3d::common::protocol::Vector3* mutable_proj_position();
  void set_allocated_proj_position(::naki3d::common::protocol::Vector3* proj_position);
  private:
  const ::naki3d::common::protocol::Vector3& _internal_proj_position() const;
  ::naki3d::common::protocol::Vector3* _internal_mutable_proj_position();
  public:
  void unsafe_arena_set_allocated_proj_position(
      ::naki3d::common::protocol::Vector3* proj_position);
  ::naki3d::common::protocol::Vector3* unsafe_arena_release_proj_position();

  // .naki3d.common.protocol.HandSide hand = 1;
  void clear_hand();
  ::naki3d::common::protocol::HandSide hand() const;
  void set_hand(::naki3d::common::protocol::HandSide value);
  private:
  ::naki3d::common::protocol::HandSide _internal_hand() const;
  void _internal_set_hand(::naki3d::common::protocol::HandSide value);
  public:

  // int32 user_id = 3;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.HandMovementData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::naki3d::common::protocol::Vector3* proj_position_;
    int hand_;
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_realsense_2eproto;
};
// -------------------------------------------------------------------

class BestUserChangedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.BestUserChangedData) */ {
 public:
  inline BestUserChangedData() : BestUserChangedData(nullptr) {}
  ~BestUserChangedData() override;
  explicit PROTOBUF_CONSTEXPR BestUserChangedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BestUserChangedData(const BestUserChangedData& from);
  BestUserChangedData(BestUserChangedData&& from) noexcept
    : BestUserChangedData() {
    *this = ::std::move(from);
  }

  inline BestUserChangedData& operator=(const BestUserChangedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BestUserChangedData& operator=(BestUserChangedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BestUserChangedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BestUserChangedData* internal_default_instance() {
    return reinterpret_cast<const BestUserChangedData*>(
               &_BestUserChangedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BestUserChangedData& a, BestUserChangedData& b) {
    a.Swap(&b);
  }
  inline void Swap(BestUserChangedData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BestUserChangedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BestUserChangedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BestUserChangedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BestUserChangedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BestUserChangedData& from) {
    BestUserChangedData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BestUserChangedData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.BestUserChangedData";
  }
  protected:
  explicit BestUserChangedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestUserIdFieldNumber = 1,
    kUserCountFieldNumber = 2,
  };
  // int32 best_user_id = 1;
  void clear_best_user_id();
  int32_t best_user_id() const;
  void set_best_user_id(int32_t value);
  private:
  int32_t _internal_best_user_id() const;
  void _internal_set_best_user_id(int32_t value);
  public:

  // int32 user_count = 2;
  void clear_user_count();
  int32_t user_count() const;
  void set_user_count(int32_t value);
  private:
  int32_t _internal_user_count() const;
  void _internal_set_user_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.BestUserChangedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t best_user_id_;
    int32_t user_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_realsense_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GestureData

// .naki3d.common.protocol.HandGestureType type = 1;
inline void GestureData::clear_type() {
  _impl_.type_ = 0;
}
inline ::naki3d::common::protocol::HandGestureType GestureData::_internal_type() const {
  return static_cast< ::naki3d::common::protocol::HandGestureType >(_impl_.type_);
}
inline ::naki3d::common::protocol::HandGestureType GestureData::type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.GestureData.type)
  return _internal_type();
}
inline void GestureData::_internal_set_type(::naki3d::common::protocol::HandGestureType value) {
  
  _impl_.type_ = value;
}
inline void GestureData::set_type(::naki3d::common::protocol::HandGestureType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.GestureData.type)
}

// int32 user_id = 2;
inline void GestureData::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t GestureData::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t GestureData::user_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.GestureData.user_id)
  return _internal_user_id();
}
inline void GestureData::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void GestureData::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.GestureData.user_id)
}

// -------------------------------------------------------------------

// HandMovementData

// .naki3d.common.protocol.HandSide hand = 1;
inline void HandMovementData::clear_hand() {
  _impl_.hand_ = 0;
}
inline ::naki3d::common::protocol::HandSide HandMovementData::_internal_hand() const {
  return static_cast< ::naki3d::common::protocol::HandSide >(_impl_.hand_);
}
inline ::naki3d::common::protocol::HandSide HandMovementData::hand() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandMovementData.hand)
  return _internal_hand();
}
inline void HandMovementData::_internal_set_hand(::naki3d::common::protocol::HandSide value) {
  
  _impl_.hand_ = value;
}
inline void HandMovementData::set_hand(::naki3d::common::protocol::HandSide value) {
  _internal_set_hand(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.HandMovementData.hand)
}

// .naki3d.common.protocol.Vector3 proj_position = 2;
inline bool HandMovementData::_internal_has_proj_position() const {
  return this != internal_default_instance() && _impl_.proj_position_ != nullptr;
}
inline bool HandMovementData::has_proj_position() const {
  return _internal_has_proj_position();
}
inline const ::naki3d::common::protocol::Vector3& HandMovementData::_internal_proj_position() const {
  const ::naki3d::common::protocol::Vector3* p = _impl_.proj_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::naki3d::common::protocol::Vector3&>(
      ::naki3d::common::protocol::_Vector3_default_instance_);
}
inline const ::naki3d::common::protocol::Vector3& HandMovementData::proj_position() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandMovementData.proj_position)
  return _internal_proj_position();
}
inline void HandMovementData::unsafe_arena_set_allocated_proj_position(
    ::naki3d::common::protocol::Vector3* proj_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proj_position_);
  }
  _impl_.proj_position_ = proj_position;
  if (proj_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.HandMovementData.proj_position)
}
inline ::naki3d::common::protocol::Vector3* HandMovementData::release_proj_position() {
  
  ::naki3d::common::protocol::Vector3* temp = _impl_.proj_position_;
  _impl_.proj_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::naki3d::common::protocol::Vector3* HandMovementData::unsafe_arena_release_proj_position() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.HandMovementData.proj_position)
  
  ::naki3d::common::protocol::Vector3* temp = _impl_.proj_position_;
  _impl_.proj_position_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::Vector3* HandMovementData::_internal_mutable_proj_position() {
  
  if (_impl_.proj_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::Vector3>(GetArenaForAllocation());
    _impl_.proj_position_ = p;
  }
  return _impl_.proj_position_;
}
inline ::naki3d::common::protocol::Vector3* HandMovementData::mutable_proj_position() {
  ::naki3d::common::protocol::Vector3* _msg = _internal_mutable_proj_position();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.HandMovementData.proj_position)
  return _msg;
}
inline void HandMovementData::set_allocated_proj_position(::naki3d::common::protocol::Vector3* proj_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proj_position_);
  }
  if (proj_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj_position));
    if (message_arena != submessage_arena) {
      proj_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proj_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proj_position_ = proj_position;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.HandMovementData.proj_position)
}

// int32 user_id = 3;
inline void HandMovementData::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t HandMovementData::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t HandMovementData::user_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandMovementData.user_id)
  return _internal_user_id();
}
inline void HandMovementData::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void HandMovementData::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.HandMovementData.user_id)
}

// -------------------------------------------------------------------

// BestUserChangedData

// int32 best_user_id = 1;
inline void BestUserChangedData::clear_best_user_id() {
  _impl_.best_user_id_ = 0;
}
inline int32_t BestUserChangedData::_internal_best_user_id() const {
  return _impl_.best_user_id_;
}
inline int32_t BestUserChangedData::best_user_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BestUserChangedData.best_user_id)
  return _internal_best_user_id();
}
inline void BestUserChangedData::_internal_set_best_user_id(int32_t value) {
  
  _impl_.best_user_id_ = value;
}
inline void BestUserChangedData::set_best_user_id(int32_t value) {
  _internal_set_best_user_id(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BestUserChangedData.best_user_id)
}

// int32 user_count = 2;
inline void BestUserChangedData::clear_user_count() {
  _impl_.user_count_ = 0;
}
inline int32_t BestUserChangedData::_internal_user_count() const {
  return _impl_.user_count_;
}
inline int32_t BestUserChangedData::user_count() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BestUserChangedData.user_count)
  return _internal_user_count();
}
inline void BestUserChangedData::_internal_set_user_count(int32_t value) {
  
  _impl_.user_count_ = value;
}
inline void BestUserChangedData::set_user_count(int32_t value) {
  _internal_set_user_count(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BestUserChangedData.user_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_realsense_2eproto

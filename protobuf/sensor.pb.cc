// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace naki3d {
namespace common {
namespace protocol {
PROTOBUF_CONSTEXPR SensorInfo::SensorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensor_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorInfoDefaultTypeInternal() {}
  union {
    SensorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
PROTOBUF_CONSTEXPR SensorList::SensorList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorListDefaultTypeInternal() {}
  union {
    SensorList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorListDefaultTypeInternal _SensorList_default_instance_;
PROTOBUF_CONSTEXPR SensorListRequest::SensorListRequest(
    ::_pbi::ConstantInitialized) {}
struct SensorListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorListRequestDefaultTypeInternal() {}
  union {
    SensorListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorListRequestDefaultTypeInternal _SensorListRequest_default_instance_;
PROTOBUF_CONSTEXPR CECMessage::CECMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CECMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CECMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CECMessageDefaultTypeInternal() {}
  union {
    CECMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CECMessageDefaultTypeInternal _CECMessage_default_instance_;
PROTOBUF_CONSTEXPR UltrasonicDistanceData::UltrasonicDistanceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UltrasonicDistanceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UltrasonicDistanceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UltrasonicDistanceDataDefaultTypeInternal() {}
  union {
    UltrasonicDistanceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UltrasonicDistanceDataDefaultTypeInternal _UltrasonicDistanceData_default_instance_;
PROTOBUF_CONSTEXPR LightLevelData::LightLevelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LightLevelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightLevelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightLevelDataDefaultTypeInternal() {}
  union {
    LightLevelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightLevelDataDefaultTypeInternal _LightLevelData_default_instance_;
PROTOBUF_CONSTEXPR PirMovementData::PirMovementData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PirMovementDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PirMovementDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PirMovementDataDefaultTypeInternal() {}
  union {
    PirMovementData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PirMovementDataDefaultTypeInternal _PirMovementData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static ::_pb::Metadata file_level_metadata_sensor_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensor_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sensor_2eproto = nullptr;

const uint32_t TableStruct_sensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorInfo, _impl_.sensor_name_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorInfo, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorList, _impl_.sensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CECMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CECMessage, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::UltrasonicDistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::UltrasonicDistanceData, _impl_.distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LightLevelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LightLevelData, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PirMovementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PirMovementData, _impl_.event_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::naki3d::common::protocol::SensorInfo)},
  { 8, -1, -1, sizeof(::naki3d::common::protocol::SensorList)},
  { 15, -1, -1, sizeof(::naki3d::common::protocol::SensorListRequest)},
  { 21, -1, -1, sizeof(::naki3d::common::protocol::CECMessage)},
  { 28, -1, -1, sizeof(::naki3d::common::protocol::UltrasonicDistanceData)},
  { 35, -1, -1, sizeof(::naki3d::common::protocol::LightLevelData)},
  { 42, -1, -1, sizeof(::naki3d::common::protocol::PirMovementData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::naki3d::common::protocol::_SensorInfo_default_instance_._instance,
  &::naki3d::common::protocol::_SensorList_default_instance_._instance,
  &::naki3d::common::protocol::_SensorListRequest_default_instance_._instance,
  &::naki3d::common::protocol::_CECMessage_default_instance_._instance,
  &::naki3d::common::protocol::_UltrasonicDistanceData_default_instance_._instance,
  &::naki3d::common::protocol::_LightLevelData_default_instance_._instance,
  &::naki3d::common::protocol::_PirMovementData_default_instance_._instance,
};

const char descriptor_table_protodef_sensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sensor.proto\022\026naki3d.common.protocol\032\020"
  "connection.proto\"S\n\nSensorInfo\022\023\n\013sensor"
  "_name\030\001 \001(\t\0220\n\004type\030\002 \001(\0162\".naki3d.commo"
  "n.protocol.SensorType\"A\n\nSensorList\0223\n\007s"
  "ensors\030\001 \003(\0132\".naki3d.common.protocol.Se"
  "nsorInfo\"\023\n\021SensorListRequest\"\?\n\nCECMess"
  "age\0221\n\006action\030\001 \001(\0162!.naki3d.common.prot"
  "ocol.CECAction\"*\n\026UltrasonicDistanceData"
  "\022\020\n\010distance\030\001 \001(\002\"\037\n\016LightLevelData\022\r\n\005"
  "level\030\001 \001(\002\"J\n\017PirMovementData\0227\n\005event\030"
  "\001 \001(\0162(.naki3d.common.protocol.PirMoveme"
  "ntEvent*(\n\tCECAction\022\014\n\010POWER_ON\020\000\022\r\n\tPO"
  "WER_OFF\020\001*>\n\020PirMovementEvent\022\024\n\020MOVEMEN"
  "T_STARTED\020\000\022\024\n\020MOVEMENT_STOPPED\020\001b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sensor_2eproto_deps[1] = {
  &::descriptor_table_connection_2eproto,
};
static ::_pbi::once_flag descriptor_table_sensor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensor_2eproto = {
    false, false, 561, descriptor_table_protodef_sensor_2eproto,
    "sensor.proto",
    &descriptor_table_sensor_2eproto_once, descriptor_table_sensor_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_sensor_2eproto::offsets,
    file_level_metadata_sensor_2eproto, file_level_enum_descriptors_sensor_2eproto,
    file_level_service_descriptors_sensor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensor_2eproto_getter() {
  return &descriptor_table_sensor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensor_2eproto(&descriptor_table_sensor_2eproto);
namespace naki3d {
namespace common {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CECAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[0];
}
bool CECAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PirMovementEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[1];
}
bool PirMovementEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SensorInfo::_Internal {
 public:
};

SensorInfo::SensorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorInfo)
}
SensorInfo::SensorInfo(const SensorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_name_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensor_name().empty()) {
    _this->_impl_.sensor_name_.Set(from._internal_sensor_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorInfo)
}

inline void SensorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_name_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SensorInfo::~SensorInfo() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_name_.Destroy();
}

void SensorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_name_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "naki3d.common.protocol.SensorInfo.sensor_name"));
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.SensorType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::SensorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_name = 1;
  if (!this->_internal_sensor_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_name().data(), static_cast<int>(this->_internal_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorInfo.sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name(), target);
  }

  // .naki3d.common.protocol.SensorType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorInfo)
  return target;
}

size_t SensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensor_name = 1;
  if (!this->_internal_sensor_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_name());
  }

  // .naki3d.common.protocol.SensorType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorInfo::GetClassData() const { return &_class_data_; }


void SensorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorInfo*>(&to_msg);
  auto& from = static_cast<const SensorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sensor_name().empty()) {
    _this->_internal_set_sensor_name(from._internal_sensor_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  return true;
}

void SensorInfo::InternalSwap(SensorInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_name_, lhs_arena,
      &other->_impl_.sensor_name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[0]);
}

// ===================================================================

class SensorList::_Internal {
 public:
};

SensorList::SensorList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorList)
}
SensorList::SensorList(const SensorList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sensors_){from._impl_.sensors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorList)
}

inline void SensorList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorList::~SensorList() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensors_.~RepeatedPtrField();
}

void SensorList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorList::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .naki3d.common.protocol.SensorInfo sensors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.SensorInfo sensors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorList)
  return target;
}

size_t SensorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.SensorInfo sensors = 1;
  total_size += 1UL * this->_internal_sensors_size();
  for (const auto& msg : this->_impl_.sensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorList::GetClassData() const { return &_class_data_; }


void SensorList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorList*>(&to_msg);
  auto& from = static_cast<const SensorList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensors_.MergeFrom(from._impl_.sensors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorList::CopyFrom(const SensorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorList::IsInitialized() const {
  return true;
}

void SensorList::InternalSwap(SensorList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sensors_.InternalSwap(&other->_impl_.sensors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[1]);
}

// ===================================================================

class SensorListRequest::_Internal {
 public:
};

SensorListRequest::SensorListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorListRequest)
}
SensorListRequest::SensorListRequest(const SensorListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SensorListRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SensorListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[2]);
}

// ===================================================================

class CECMessage::_Internal {
 public:
};

CECMessage::CECMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.CECMessage)
}
CECMessage::CECMessage(const CECMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CECMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.CECMessage)
}

inline void CECMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CECMessage::~CECMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.CECMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CECMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CECMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CECMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.CECMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CECMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.CECAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::naki3d::common::protocol::CECAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CECMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.CECMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.CECAction action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.CECMessage)
  return target;
}

size_t CECMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.CECMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.CECAction action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CECMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CECMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CECMessage::GetClassData() const { return &_class_data_; }


void CECMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CECMessage*>(&to_msg);
  auto& from = static_cast<const CECMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.CECMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CECMessage::CopyFrom(const CECMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.CECMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CECMessage::IsInitialized() const {
  return true;
}

void CECMessage::InternalSwap(CECMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CECMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[3]);
}

// ===================================================================

class UltrasonicDistanceData::_Internal {
 public:
};

UltrasonicDistanceData::UltrasonicDistanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.UltrasonicDistanceData)
}
UltrasonicDistanceData::UltrasonicDistanceData(const UltrasonicDistanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UltrasonicDistanceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.UltrasonicDistanceData)
}

inline void UltrasonicDistanceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UltrasonicDistanceData::~UltrasonicDistanceData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.UltrasonicDistanceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UltrasonicDistanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UltrasonicDistanceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UltrasonicDistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.UltrasonicDistanceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicDistanceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UltrasonicDistanceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.UltrasonicDistanceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.UltrasonicDistanceData)
  return target;
}

size_t UltrasonicDistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.UltrasonicDistanceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UltrasonicDistanceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UltrasonicDistanceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UltrasonicDistanceData::GetClassData() const { return &_class_data_; }


void UltrasonicDistanceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UltrasonicDistanceData*>(&to_msg);
  auto& from = static_cast<const UltrasonicDistanceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.UltrasonicDistanceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = from._internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UltrasonicDistanceData::CopyFrom(const UltrasonicDistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.UltrasonicDistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDistanceData::IsInitialized() const {
  return true;
}

void UltrasonicDistanceData::InternalSwap(UltrasonicDistanceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDistanceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[4]);
}

// ===================================================================

class LightLevelData::_Internal {
 public:
};

LightLevelData::LightLevelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.LightLevelData)
}
LightLevelData::LightLevelData(const LightLevelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LightLevelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LightLevelData)
}

inline void LightLevelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LightLevelData::~LightLevelData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LightLevelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LightLevelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LightLevelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LightLevelData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LightLevelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightLevelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LightLevelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LightLevelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float level = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = this->_internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LightLevelData)
  return target;
}

size_t LightLevelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LightLevelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float level = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = this->_internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightLevelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LightLevelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightLevelData::GetClassData() const { return &_class_data_; }


void LightLevelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LightLevelData*>(&to_msg);
  auto& from = static_cast<const LightLevelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LightLevelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = from._internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightLevelData::CopyFrom(const LightLevelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LightLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightLevelData::IsInitialized() const {
  return true;
}

void LightLevelData::InternalSwap(LightLevelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightLevelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[5]);
}

// ===================================================================

class PirMovementData::_Internal {
 public:
};

PirMovementData::PirMovementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.PirMovementData)
}
PirMovementData::PirMovementData(const PirMovementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PirMovementData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_ = from._impl_.event_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.PirMovementData)
}

inline void PirMovementData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PirMovementData::~PirMovementData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.PirMovementData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PirMovementData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PirMovementData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PirMovementData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.PirMovementData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PirMovementData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.PirMovementEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::naki3d::common::protocol::PirMovementEvent>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PirMovementData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.PirMovementData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.PirMovementEvent event = 1;
  if (this->_internal_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.PirMovementData)
  return target;
}

size_t PirMovementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.PirMovementData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.PirMovementEvent event = 1;
  if (this->_internal_event() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PirMovementData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PirMovementData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PirMovementData::GetClassData() const { return &_class_data_; }


void PirMovementData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PirMovementData*>(&to_msg);
  auto& from = static_cast<const PirMovementData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.PirMovementData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_event() != 0) {
    _this->_internal_set_event(from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PirMovementData::CopyFrom(const PirMovementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.PirMovementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PirMovementData::IsInitialized() const {
  return true;
}

void PirMovementData::InternalSwap(PirMovementData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PirMovementData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorInfo*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorList*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorList >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorListRequest*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::CECMessage*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::CECMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::CECMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::UltrasonicDistanceData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::UltrasonicDistanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::UltrasonicDistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::LightLevelData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::LightLevelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::LightLevelData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::PirMovementData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::PirMovementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::PirMovementData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorInfo_sensor_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class SensorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorInfo> _instance;
} _SensorInfo_default_instance_;
class SensorListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorList> _instance;
} _SensorList_default_instance_;
class SensorListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorListRequest> _instance;
} _SensorListRequest_default_instance_;
class CECMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CECMessage> _instance;
} _CECMessage_default_instance_;
class UltrasonicDistanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicDistanceData> _instance;
} _UltrasonicDistanceData_default_instance_;
class LightLevelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightLevelData> _instance;
} _LightLevelData_default_instance_;
class PirMovementDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PirMovementData> _instance;
} _PirMovementData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static void InitDefaultsscc_info_CECMessage_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_CECMessage_default_instance_;
    new (ptr) ::naki3d::common::protocol::CECMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::CECMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CECMessage_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CECMessage_sensor_2eproto}, {}};

static void InitDefaultsscc_info_LightLevelData_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_LightLevelData_default_instance_;
    new (ptr) ::naki3d::common::protocol::LightLevelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::LightLevelData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightLevelData_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LightLevelData_sensor_2eproto}, {}};

static void InitDefaultsscc_info_PirMovementData_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_PirMovementData_default_instance_;
    new (ptr) ::naki3d::common::protocol::PirMovementData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::PirMovementData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PirMovementData_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PirMovementData_sensor_2eproto}, {}};

static void InitDefaultsscc_info_SensorInfo_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_SensorInfo_default_instance_;
    new (ptr) ::naki3d::common::protocol::SensorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::SensorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorInfo_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorInfo_sensor_2eproto}, {}};

static void InitDefaultsscc_info_SensorList_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_SensorList_default_instance_;
    new (ptr) ::naki3d::common::protocol::SensorList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::SensorList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorList_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SensorList_sensor_2eproto}, {
      &scc_info_SensorInfo_sensor_2eproto.base,}};

static void InitDefaultsscc_info_SensorListRequest_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_SensorListRequest_default_instance_;
    new (ptr) ::naki3d::common::protocol::SensorListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::SensorListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorListRequest_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorListRequest_sensor_2eproto}, {}};

static void InitDefaultsscc_info_UltrasonicDistanceData_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_UltrasonicDistanceData_default_instance_;
    new (ptr) ::naki3d::common::protocol::UltrasonicDistanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::UltrasonicDistanceData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UltrasonicDistanceData_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UltrasonicDistanceData_sensor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensor_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sensor_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorInfo, sensor_name_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorInfo, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorList, sensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CECMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::CECMessage, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::UltrasonicDistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::UltrasonicDistanceData, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LightLevelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LightLevelData, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PirMovementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::PirMovementData, event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::naki3d::common::protocol::SensorInfo)},
  { 7, -1, sizeof(::naki3d::common::protocol::SensorList)},
  { 13, -1, sizeof(::naki3d::common::protocol::SensorListRequest)},
  { 18, -1, sizeof(::naki3d::common::protocol::CECMessage)},
  { 24, -1, sizeof(::naki3d::common::protocol::UltrasonicDistanceData)},
  { 30, -1, sizeof(::naki3d::common::protocol::LightLevelData)},
  { 36, -1, sizeof(::naki3d::common::protocol::PirMovementData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_SensorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_SensorList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_SensorListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_CECMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_UltrasonicDistanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_LightLevelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_PirMovementData_default_instance_),
};

const char descriptor_table_protodef_sensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sensor.proto\022\026naki3d.common.protocol\032\020"
  "connection.proto\"S\n\nSensorInfo\022\023\n\013sensor"
  "_name\030\001 \001(\t\0220\n\004type\030\002 \001(\0162\".naki3d.commo"
  "n.protocol.SensorType\"A\n\nSensorList\0223\n\007s"
  "ensors\030\001 \003(\0132\".naki3d.common.protocol.Se"
  "nsorInfo\"\023\n\021SensorListRequest\"\?\n\nCECMess"
  "age\0221\n\006action\030\001 \001(\0162!.naki3d.common.prot"
  "ocol.CECAction\"*\n\026UltrasonicDistanceData"
  "\022\020\n\010distance\030\001 \001(\002\"\037\n\016LightLevelData\022\r\n\005"
  "level\030\001 \001(\002\"J\n\017PirMovementData\0227\n\005event\030"
  "\001 \001(\0162(.naki3d.common.protocol.PirMoveme"
  "ntEvent*(\n\tCECAction\022\014\n\010POWER_ON\020\000\022\r\n\tPO"
  "WER_OFF\020\001*>\n\020PirMovementEvent\022\024\n\020MOVEMEN"
  "T_STARTED\020\000\022\024\n\020MOVEMENT_STOPPED\020\001b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensor_2eproto_deps[1] = {
  &::descriptor_table_connection_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensor_2eproto_sccs[7] = {
  &scc_info_CECMessage_sensor_2eproto.base,
  &scc_info_LightLevelData_sensor_2eproto.base,
  &scc_info_PirMovementData_sensor_2eproto.base,
  &scc_info_SensorInfo_sensor_2eproto.base,
  &scc_info_SensorList_sensor_2eproto.base,
  &scc_info_SensorListRequest_sensor_2eproto.base,
  &scc_info_UltrasonicDistanceData_sensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto = {
  false, false, descriptor_table_protodef_sensor_2eproto, "sensor.proto", 561,
  &descriptor_table_sensor_2eproto_once, descriptor_table_sensor_2eproto_sccs, descriptor_table_sensor_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_sensor_2eproto::offsets,
  file_level_metadata_sensor_2eproto, 7, file_level_enum_descriptors_sensor_2eproto, file_level_service_descriptors_sensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensor_2eproto)), true);
namespace naki3d {
namespace common {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CECAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[0];
}
bool CECAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PirMovementEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[1];
}
bool PirMovementEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SensorInfo::InitAsDefaultInstance() {
}
class SensorInfo::_Internal {
 public:
};

SensorInfo::SensorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorInfo)
}
SensorInfo::SensorInfo(const SensorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sensor_name().empty()) {
    sensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sensor_name(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorInfo)
}

void SensorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorInfo_sensor_2eproto.base);
  sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SensorInfo::~SensorInfo() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorInfo::ArenaDtor(void* object) {
  SensorInfo* _this = reinterpret_cast< SensorInfo* >(object);
  (void)_this;
}
void SensorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorInfo& SensorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorInfo_sensor_2eproto.base);
  return *internal_default_instance();
}


void SensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.SensorInfo.sensor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .naki3d.common.protocol.SensorType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::SensorType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_name = 1;
  if (this->sensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_name().data(), static_cast<int>(this->_internal_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorInfo.sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name(), target);
  }

  // .naki3d.common.protocol.SensorType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorInfo)
  return target;
}

size_t SensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensor_name = 1;
  if (this->sensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_name());
  }

  // .naki3d.common.protocol.SensorType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SensorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SensorInfo)
    MergeFrom(*source);
  }
}

void SensorInfo::MergeFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_name().size() > 0) {
    _internal_set_sensor_name(from._internal_sensor_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SensorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  return true;
}

void SensorInfo::InternalSwap(SensorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sensor_name_.Swap(&other->sensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorList::InitAsDefaultInstance() {
}
class SensorList::_Internal {
 public:
};

SensorList::SensorList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sensors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorList)
}
SensorList::SensorList(const SensorList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sensors_(from.sensors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorList)
}

void SensorList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorList_sensor_2eproto.base);
}

SensorList::~SensorList() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorList::ArenaDtor(void* object) {
  SensorList* _this = reinterpret_cast< SensorList* >(object);
  (void)_this;
}
void SensorList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorList& SensorList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorList_sensor_2eproto.base);
  return *internal_default_instance();
}


void SensorList::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .naki3d.common.protocol.SensorInfo sensors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.SensorInfo sensors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sensors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorList)
  return target;
}

size_t SensorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.SensorInfo sensors = 1;
  total_size += 1UL * this->_internal_sensors_size();
  for (const auto& msg : this->sensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SensorList)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SensorList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SensorList)
    MergeFrom(*source);
  }
}

void SensorList::MergeFrom(const SensorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
}

void SensorList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SensorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorList::CopyFrom(const SensorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorList::IsInitialized() const {
  return true;
}

void SensorList::InternalSwap(SensorList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sensors_.InternalSwap(&other->sensors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorListRequest::InitAsDefaultInstance() {
}
class SensorListRequest::_Internal {
 public:
};

SensorListRequest::SensorListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorListRequest)
}
SensorListRequest::SensorListRequest(const SensorListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorListRequest)
}

void SensorListRequest::SharedCtor() {
}

SensorListRequest::~SensorListRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorListRequest::ArenaDtor(void* object) {
  SensorListRequest* _this = reinterpret_cast< SensorListRequest* >(object);
  (void)_this;
}
void SensorListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorListRequest& SensorListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorListRequest_sensor_2eproto.base);
  return *internal_default_instance();
}


void SensorListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorListRequest)
  return target;
}

size_t SensorListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SensorListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SensorListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SensorListRequest)
    MergeFrom(*source);
  }
}

void SensorListRequest::MergeFrom(const SensorListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SensorListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SensorListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorListRequest::CopyFrom(const SensorListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorListRequest::IsInitialized() const {
  return true;
}

void SensorListRequest::InternalSwap(SensorListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CECMessage::InitAsDefaultInstance() {
}
class CECMessage::_Internal {
 public:
};

CECMessage::CECMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.CECMessage)
}
CECMessage::CECMessage(const CECMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.CECMessage)
}

void CECMessage::SharedCtor() {
  action_ = 0;
}

CECMessage::~CECMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.CECMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CECMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CECMessage::ArenaDtor(void* object) {
  CECMessage* _this = reinterpret_cast< CECMessage* >(object);
  (void)_this;
}
void CECMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CECMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CECMessage& CECMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CECMessage_sensor_2eproto.base);
  return *internal_default_instance();
}


void CECMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.CECMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CECMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .naki3d.common.protocol.CECAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::naki3d::common::protocol::CECAction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CECMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.CECMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.CECAction action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.CECMessage)
  return target;
}

size_t CECMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.CECMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.CECAction action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CECMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.CECMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CECMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CECMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.CECMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.CECMessage)
    MergeFrom(*source);
  }
}

void CECMessage::MergeFrom(const CECMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.CECMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void CECMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.CECMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CECMessage::CopyFrom(const CECMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.CECMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CECMessage::IsInitialized() const {
  return true;
}

void CECMessage::InternalSwap(CECMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CECMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicDistanceData::InitAsDefaultInstance() {
}
class UltrasonicDistanceData::_Internal {
 public:
};

UltrasonicDistanceData::UltrasonicDistanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.UltrasonicDistanceData)
}
UltrasonicDistanceData::UltrasonicDistanceData(const UltrasonicDistanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.UltrasonicDistanceData)
}

void UltrasonicDistanceData::SharedCtor() {
  distance_ = 0;
}

UltrasonicDistanceData::~UltrasonicDistanceData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.UltrasonicDistanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UltrasonicDistanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UltrasonicDistanceData::ArenaDtor(void* object) {
  UltrasonicDistanceData* _this = reinterpret_cast< UltrasonicDistanceData* >(object);
  (void)_this;
}
void UltrasonicDistanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicDistanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicDistanceData& UltrasonicDistanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicDistanceData_sensor_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicDistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.UltrasonicDistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicDistanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDistanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.UltrasonicDistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.UltrasonicDistanceData)
  return target;
}

size_t UltrasonicDistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.UltrasonicDistanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicDistanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.UltrasonicDistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDistanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicDistanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.UltrasonicDistanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.UltrasonicDistanceData)
    MergeFrom(*source);
  }
}

void UltrasonicDistanceData::MergeFrom(const UltrasonicDistanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.UltrasonicDistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void UltrasonicDistanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.UltrasonicDistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDistanceData::CopyFrom(const UltrasonicDistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.UltrasonicDistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDistanceData::IsInitialized() const {
  return true;
}

void UltrasonicDistanceData::InternalSwap(UltrasonicDistanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDistanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LightLevelData::InitAsDefaultInstance() {
}
class LightLevelData::_Internal {
 public:
};

LightLevelData::LightLevelData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.LightLevelData)
}
LightLevelData::LightLevelData(const LightLevelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LightLevelData)
}

void LightLevelData::SharedCtor() {
  level_ = 0;
}

LightLevelData::~LightLevelData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LightLevelData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightLevelData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LightLevelData::ArenaDtor(void* object) {
  LightLevelData* _this = reinterpret_cast< LightLevelData* >(object);
  (void)_this;
}
void LightLevelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightLevelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightLevelData& LightLevelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightLevelData_sensor_2eproto.base);
  return *internal_default_instance();
}


void LightLevelData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LightLevelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightLevelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightLevelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LightLevelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float level = 1;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LightLevelData)
  return target;
}

size_t LightLevelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LightLevelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float level = 1;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightLevelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.LightLevelData)
  GOOGLE_DCHECK_NE(&from, this);
  const LightLevelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightLevelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.LightLevelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.LightLevelData)
    MergeFrom(*source);
  }
}

void LightLevelData::MergeFrom(const LightLevelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LightLevelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.level() <= 0 && from.level() >= 0)) {
    _internal_set_level(from._internal_level());
  }
}

void LightLevelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.LightLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightLevelData::CopyFrom(const LightLevelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LightLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightLevelData::IsInitialized() const {
  return true;
}

void LightLevelData::InternalSwap(LightLevelData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightLevelData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PirMovementData::InitAsDefaultInstance() {
}
class PirMovementData::_Internal {
 public:
};

PirMovementData::PirMovementData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.PirMovementData)
}
PirMovementData::PirMovementData(const PirMovementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.PirMovementData)
}

void PirMovementData::SharedCtor() {
  event_ = 0;
}

PirMovementData::~PirMovementData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.PirMovementData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PirMovementData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PirMovementData::ArenaDtor(void* object) {
  PirMovementData* _this = reinterpret_cast< PirMovementData* >(object);
  (void)_this;
}
void PirMovementData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PirMovementData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PirMovementData& PirMovementData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PirMovementData_sensor_2eproto.base);
  return *internal_default_instance();
}


void PirMovementData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.PirMovementData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PirMovementData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .naki3d.common.protocol.PirMovementEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::naki3d::common::protocol::PirMovementEvent>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PirMovementData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.PirMovementData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.PirMovementEvent event = 1;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.PirMovementData)
  return target;
}

size_t PirMovementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.PirMovementData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.PirMovementEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PirMovementData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.PirMovementData)
  GOOGLE_DCHECK_NE(&from, this);
  const PirMovementData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PirMovementData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.PirMovementData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.PirMovementData)
    MergeFrom(*source);
  }
}

void PirMovementData::MergeFrom(const PirMovementData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.PirMovementData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
}

void PirMovementData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.PirMovementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PirMovementData::CopyFrom(const PirMovementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.PirMovementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PirMovementData::IsInitialized() const {
  return true;
}

void PirMovementData::InternalSwap(PirMovementData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PirMovementData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorInfo* Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorList* Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorList >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorListRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::CECMessage* Arena::CreateMaybeMessage< ::naki3d::common::protocol::CECMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::CECMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::UltrasonicDistanceData* Arena::CreateMaybeMessage< ::naki3d::common::protocol::UltrasonicDistanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::UltrasonicDistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::LightLevelData* Arena::CreateMaybeMessage< ::naki3d::common::protocol::LightLevelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::LightLevelData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::PirMovementData* Arena::CreateMaybeMessage< ::naki3d::common::protocol::PirMovementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::PirMovementData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

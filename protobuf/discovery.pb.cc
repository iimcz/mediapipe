// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "discovery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* AvailableSensors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvailableSensors_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_discovery_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_discovery_2eproto() {
  protobuf_AddDesc_discovery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "discovery.proto");
  GOOGLE_CHECK(file != NULL);
  AvailableSensors_descriptor_ = file->message_type(0);
  static const int AvailableSensors_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableSensors, sensors_),
  };
  AvailableSensors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AvailableSensors_descriptor_,
      AvailableSensors::default_instance_,
      AvailableSensors_offsets_,
      -1,
      -1,
      -1,
      sizeof(AvailableSensors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableSensors, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableSensors, _is_default_instance_));
  SensorDescriptor_descriptor_ = file->message_type(1);
  static const int SensorDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDescriptor, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDescriptor, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDescriptor, data_type_),
  };
  SensorDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorDescriptor_descriptor_,
      SensorDescriptor::default_instance_,
      SensorDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(SensorDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDescriptor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDescriptor, _is_default_instance_));
  DataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_discovery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AvailableSensors_descriptor_, &AvailableSensors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorDescriptor_descriptor_, &SensorDescriptor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_discovery_2eproto() {
  delete AvailableSensors::default_instance_;
  delete AvailableSensors_reflection_;
  delete SensorDescriptor::default_instance_;
  delete SensorDescriptor_reflection_;
}

void protobuf_AddDesc_discovery_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_discovery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017discovery.proto\022\026naki3d.common.protoco"
    "l\"M\n\020AvailableSensors\0229\n\007sensors\030\001 \003(\0132("
    ".naki3d.common.protocol.SensorDescriptor"
    "\"d\n\020SensorDescriptor\022\014\n\004path\030\001 \001(\t\022\r\n\005mo"
    "del\030\002 \001(\t\0223\n\tdata_type\030\003 \001(\0162 .naki3d.co"
    "mmon.protocol.DataType*\\\n\010DataType\022\010\n\004Vo"
    "id\020\000\022\010\n\004Bool\020\001\022\013\n\007Integer\020\002\022\t\n\005Float\020\003\022\n"
    "\n\006String\020\004\022\013\n\007Vector2\020\005\022\013\n\007Vector3\020\006b\006pr"
    "oto3", 324);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "discovery.proto", &protobuf_RegisterTypes);
  AvailableSensors::default_instance_ = new AvailableSensors();
  SensorDescriptor::default_instance_ = new SensorDescriptor();
  AvailableSensors::default_instance_->InitAsDefaultInstance();
  SensorDescriptor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_discovery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_discovery_2eproto {
  StaticDescriptorInitializer_discovery_2eproto() {
    protobuf_AddDesc_discovery_2eproto();
  }
} static_descriptor_initializer_discovery_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvailableSensors::kSensorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvailableSensors::AvailableSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.AvailableSensors)
}

void AvailableSensors::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AvailableSensors::AvailableSensors(const AvailableSensors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.AvailableSensors)
}

void AvailableSensors::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AvailableSensors::~AvailableSensors() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.AvailableSensors)
  SharedDtor();
}

void AvailableSensors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvailableSensors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvailableSensors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvailableSensors_descriptor_;
}

const AvailableSensors& AvailableSensors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_discovery_2eproto();
  return *default_instance_;
}

AvailableSensors* AvailableSensors::default_instance_ = NULL;

AvailableSensors* AvailableSensors::New(::google::protobuf::Arena* arena) const {
  AvailableSensors* n = new AvailableSensors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvailableSensors::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.AvailableSensors)
  sensors_.Clear();
}

bool AvailableSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.AvailableSensors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sensors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.AvailableSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.AvailableSensors)
  return false;
#undef DO_
}

void AvailableSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.AvailableSensors)
  // repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.AvailableSensors)
}

::google::protobuf::uint8* AvailableSensors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.AvailableSensors)
  // repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sensors(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.AvailableSensors)
  return target;
}

int AvailableSensors::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.AvailableSensors)
  int total_size = 0;

  // repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
  total_size += 1 * this->sensors_size();
  for (int i = 0; i < this->sensors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvailableSensors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.AvailableSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AvailableSensors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AvailableSensors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.AvailableSensors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.AvailableSensors)
    MergeFrom(*source);
  }
}

void AvailableSensors::MergeFrom(const AvailableSensors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.AvailableSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sensors_.MergeFrom(from.sensors_);
}

void AvailableSensors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.AvailableSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvailableSensors::CopyFrom(const AvailableSensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.AvailableSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailableSensors::IsInitialized() const {

  return true;
}

void AvailableSensors::Swap(AvailableSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvailableSensors::InternalSwap(AvailableSensors* other) {
  sensors_.UnsafeArenaSwap(&other->sensors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvailableSensors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvailableSensors_descriptor_;
  metadata.reflection = AvailableSensors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvailableSensors

// repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
int AvailableSensors::sensors_size() const {
  return sensors_.size();
}
void AvailableSensors::clear_sensors() {
  sensors_.Clear();
}
const ::naki3d::common::protocol::SensorDescriptor& AvailableSensors::sensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_.Get(index);
}
::naki3d::common::protocol::SensorDescriptor* AvailableSensors::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_.Mutable(index);
}
::naki3d::common::protocol::SensorDescriptor* AvailableSensors::add_sensors() {
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
AvailableSensors::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.AvailableSensors.sensors)
  return &sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
AvailableSensors::sensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorDescriptor::kPathFieldNumber;
const int SensorDescriptor::kModelFieldNumber;
const int SensorDescriptor::kDataTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorDescriptor::SensorDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.SensorDescriptor)
}

void SensorDescriptor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SensorDescriptor::SensorDescriptor(const SensorDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorDescriptor)
}

void SensorDescriptor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0;
}

SensorDescriptor::~SensorDescriptor() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorDescriptor)
  SharedDtor();
}

void SensorDescriptor::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SensorDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorDescriptor_descriptor_;
}

const SensorDescriptor& SensorDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_discovery_2eproto();
  return *default_instance_;
}

SensorDescriptor* SensorDescriptor::default_instance_ = NULL;

SensorDescriptor* SensorDescriptor::New(::google::protobuf::Arena* arena) const {
  SensorDescriptor* n = new SensorDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorDescriptor)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0;
}

bool SensorDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.SensorDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.SensorDescriptor.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.SensorDescriptor.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_type;
        break;
      }

      // optional .naki3d.common.protocol.DataType data_type = 3;
      case 3: {
        if (tag == 24) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::naki3d::common::protocol::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.SensorDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.SensorDescriptor)
  return false;
#undef DO_
}

void SensorDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.SensorDescriptor)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDescriptor.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDescriptor.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // optional .naki3d.common.protocol.DataType data_type = 3;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.SensorDescriptor)
}

::google::protobuf::uint8* SensorDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorDescriptor)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDescriptor.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDescriptor.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // optional .naki3d.common.protocol.DataType data_type = 3;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorDescriptor)
  return target;
}

int SensorDescriptor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorDescriptor)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional .naki3d.common.protocol.DataType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SensorDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SensorDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SensorDescriptor)
    MergeFrom(*source);
  }
}

void SensorDescriptor::MergeFrom(const SensorDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
}

void SensorDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SensorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDescriptor::CopyFrom(const SensorDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDescriptor::IsInitialized() const {

  return true;
}

void SensorDescriptor::Swap(SensorDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorDescriptor::InternalSwap(SensorDescriptor* other) {
  path_.Swap(&other->path_);
  model_.Swap(&other->model_);
  std::swap(data_type_, other->data_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorDescriptor_descriptor_;
  metadata.reflection = SensorDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorDescriptor

// optional string path = 1;
void SensorDescriptor::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorDescriptor::path() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorDescriptor::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.path)
}
 void SensorDescriptor::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDescriptor.path)
}
 void SensorDescriptor::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDescriptor.path)
}
 ::std::string* SensorDescriptor::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDescriptor.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorDescriptor::release_path() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDescriptor.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorDescriptor::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDescriptor.path)
}

// optional string model = 2;
void SensorDescriptor::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorDescriptor::model() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorDescriptor::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.model)
}
 void SensorDescriptor::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDescriptor.model)
}
 void SensorDescriptor::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDescriptor.model)
}
 ::std::string* SensorDescriptor::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDescriptor.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorDescriptor::release_model() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDescriptor.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorDescriptor::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDescriptor.model)
}

// optional .naki3d.common.protocol.DataType data_type = 3;
void SensorDescriptor::clear_data_type() {
  data_type_ = 0;
}
 ::naki3d::common::protocol::DataType SensorDescriptor::data_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.data_type)
  return static_cast< ::naki3d::common::protocol::DataType >(data_type_);
}
 void SensorDescriptor::set_data_type(::naki3d::common::protocol::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.data_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery.proto

#ifndef PROTOBUF_discovery_2eproto__INCLUDED
#define PROTOBUF_discovery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_discovery_2eproto();
void protobuf_AssignDesc_discovery_2eproto();
void protobuf_ShutdownFile_discovery_2eproto();

class AvailableSensors;
class SensorDescriptor;

enum DataType {
  Void = 0,
  Bool = 1,
  Integer = 2,
  Float = 3,
  String = 4,
  Vector2 = 5,
  Vector3 = 6,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = Void;
const DataType DataType_MAX = Vector3;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class AvailableSensors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.AvailableSensors) */ {
 public:
  AvailableSensors();
  virtual ~AvailableSensors();

  AvailableSensors(const AvailableSensors& from);

  inline AvailableSensors& operator=(const AvailableSensors& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvailableSensors& default_instance();

  void Swap(AvailableSensors* other);

  // implements Message ----------------------------------------------

  inline AvailableSensors* New() const { return New(NULL); }

  AvailableSensors* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvailableSensors& from);
  void MergeFrom(const AvailableSensors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AvailableSensors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
  int sensors_size() const;
  void clear_sensors();
  static const int kSensorsFieldNumber = 1;
  const ::naki3d::common::protocol::SensorDescriptor& sensors(int index) const;
  ::naki3d::common::protocol::SensorDescriptor* mutable_sensors(int index);
  ::naki3d::common::protocol::SensorDescriptor* add_sensors();
  ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
      mutable_sensors();
  const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
      sensors() const;

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.AvailableSensors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor > sensors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_discovery_2eproto();
  friend void protobuf_AssignDesc_discovery_2eproto();
  friend void protobuf_ShutdownFile_discovery_2eproto();

  void InitAsDefaultInstance();
  static AvailableSensors* default_instance_;
};
// -------------------------------------------------------------------

class SensorDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorDescriptor) */ {
 public:
  SensorDescriptor();
  virtual ~SensorDescriptor();

  SensorDescriptor(const SensorDescriptor& from);

  inline SensorDescriptor& operator=(const SensorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorDescriptor& default_instance();

  void Swap(SensorDescriptor* other);

  // implements Message ----------------------------------------------

  inline SensorDescriptor* New() const { return New(NULL); }

  SensorDescriptor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorDescriptor& from);
  void MergeFrom(const SensorDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional .naki3d.common.protocol.DataType data_type = 3;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 3;
  ::naki3d::common::protocol::DataType data_type() const;
  void set_data_type(::naki3d::common::protocol::DataType value);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  int data_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_discovery_2eproto();
  friend void protobuf_AssignDesc_discovery_2eproto();
  friend void protobuf_ShutdownFile_discovery_2eproto();

  void InitAsDefaultInstance();
  static SensorDescriptor* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AvailableSensors

// repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
inline int AvailableSensors::sensors_size() const {
  return sensors_.size();
}
inline void AvailableSensors::clear_sensors() {
  sensors_.Clear();
}
inline const ::naki3d::common::protocol::SensorDescriptor& AvailableSensors::sensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_.Get(index);
}
inline ::naki3d::common::protocol::SensorDescriptor* AvailableSensors::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_.Mutable(index);
}
inline ::naki3d::common::protocol::SensorDescriptor* AvailableSensors::add_sensors() {
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
AvailableSensors::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.AvailableSensors.sensors)
  return &sensors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
AvailableSensors::sensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_;
}

// -------------------------------------------------------------------

// SensorDescriptor

// optional string path = 1;
inline void SensorDescriptor::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorDescriptor::path() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDescriptor::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.path)
}
inline void SensorDescriptor::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDescriptor.path)
}
inline void SensorDescriptor::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDescriptor.path)
}
inline ::std::string* SensorDescriptor::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDescriptor.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorDescriptor::release_path() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDescriptor.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDescriptor::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDescriptor.path)
}

// optional string model = 2;
inline void SensorDescriptor::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorDescriptor::model() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDescriptor::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.model)
}
inline void SensorDescriptor::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDescriptor.model)
}
inline void SensorDescriptor::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDescriptor.model)
}
inline ::std::string* SensorDescriptor::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDescriptor.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorDescriptor::release_model() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDescriptor.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDescriptor::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDescriptor.model)
}

// optional .naki3d.common.protocol.DataType data_type = 3;
inline void SensorDescriptor::clear_data_type() {
  data_type_ = 0;
}
inline ::naki3d::common::protocol::DataType SensorDescriptor::data_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.data_type)
  return static_cast< ::naki3d::common::protocol::DataType >(data_type_);
}
inline void SensorDescriptor::set_data_type(::naki3d::common::protocol::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.data_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::naki3d::common::protocol::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::DataType>() {
  return ::naki3d::common::protocol::DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_discovery_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_discovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_discovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_discovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_discovery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_discovery_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class AvailableSensors;
struct AvailableSensorsDefaultTypeInternal;
extern AvailableSensorsDefaultTypeInternal _AvailableSensors_default_instance_;
class SensorDescriptor;
struct SensorDescriptorDefaultTypeInternal;
extern SensorDescriptorDefaultTypeInternal _SensorDescriptor_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::AvailableSensors* Arena::CreateMaybeMessage<::naki3d::common::protocol::AvailableSensors>(Arena*);
template<> ::naki3d::common::protocol::SensorDescriptor* Arena::CreateMaybeMessage<::naki3d::common::protocol::SensorDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

enum DataType : int {
  Void = 0,
  Bool = 1,
  Integer = 2,
  Float = 3,
  String = 4,
  Vector2 = 5,
  Vector3 = 6,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = Void;
constexpr DataType DataType_MAX = Vector3;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class AvailableSensors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.AvailableSensors) */ {
 public:
  inline AvailableSensors() : AvailableSensors(nullptr) {}
  ~AvailableSensors() override;
  explicit constexpr AvailableSensors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AvailableSensors(const AvailableSensors& from);
  AvailableSensors(AvailableSensors&& from) noexcept
    : AvailableSensors() {
    *this = ::std::move(from);
  }

  inline AvailableSensors& operator=(const AvailableSensors& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvailableSensors& operator=(AvailableSensors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvailableSensors& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvailableSensors* internal_default_instance() {
    return reinterpret_cast<const AvailableSensors*>(
               &_AvailableSensors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AvailableSensors& a, AvailableSensors& b) {
    a.Swap(&b);
  }
  inline void Swap(AvailableSensors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvailableSensors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvailableSensors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvailableSensors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AvailableSensors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AvailableSensors& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailableSensors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.AvailableSensors";
  }
  protected:
  explicit AvailableSensors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 1,
  };
  // repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
  int sensors_size() const;
  private:
  int _internal_sensors_size() const;
  public:
  void clear_sensors();
  ::naki3d::common::protocol::SensorDescriptor* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
      mutable_sensors();
  private:
  const ::naki3d::common::protocol::SensorDescriptor& _internal_sensors(int index) const;
  ::naki3d::common::protocol::SensorDescriptor* _internal_add_sensors();
  public:
  const ::naki3d::common::protocol::SensorDescriptor& sensors(int index) const;
  ::naki3d::common::protocol::SensorDescriptor* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
      sensors() const;

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.AvailableSensors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor > sensors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_discovery_2eproto;
};
// -------------------------------------------------------------------

class SensorDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorDescriptor) */ {
 public:
  inline SensorDescriptor() : SensorDescriptor(nullptr) {}
  ~SensorDescriptor() override;
  explicit constexpr SensorDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorDescriptor(const SensorDescriptor& from);
  SensorDescriptor(SensorDescriptor&& from) noexcept
    : SensorDescriptor() {
    *this = ::std::move(from);
  }

  inline SensorDescriptor& operator=(const SensorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDescriptor& operator=(SensorDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorDescriptor* internal_default_instance() {
    return reinterpret_cast<const SensorDescriptor*>(
               &_SensorDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorDescriptor& a, SensorDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SensorDescriptor";
  }
  protected:
  explicit SensorDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kModelFieldNumber = 2,
    kDataTypeFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // .naki3d.common.protocol.DataType data_type = 3;
  void clear_data_type();
  ::naki3d::common::protocol::DataType data_type() const;
  void set_data_type(::naki3d::common::protocol::DataType value);
  private:
  ::naki3d::common::protocol::DataType _internal_data_type() const;
  void _internal_set_data_type(::naki3d::common::protocol::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_discovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AvailableSensors

// repeated .naki3d.common.protocol.SensorDescriptor sensors = 1;
inline int AvailableSensors::_internal_sensors_size() const {
  return sensors_.size();
}
inline int AvailableSensors::sensors_size() const {
  return _internal_sensors_size();
}
inline void AvailableSensors::clear_sensors() {
  sensors_.Clear();
}
inline ::naki3d::common::protocol::SensorDescriptor* AvailableSensors::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
AvailableSensors::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.AvailableSensors.sensors)
  return &sensors_;
}
inline const ::naki3d::common::protocol::SensorDescriptor& AvailableSensors::_internal_sensors(int index) const {
  return sensors_.Get(index);
}
inline const ::naki3d::common::protocol::SensorDescriptor& AvailableSensors::sensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.AvailableSensors.sensors)
  return _internal_sensors(index);
}
inline ::naki3d::common::protocol::SensorDescriptor* AvailableSensors::_internal_add_sensors() {
  return sensors_.Add();
}
inline ::naki3d::common::protocol::SensorDescriptor* AvailableSensors::add_sensors() {
  ::naki3d::common::protocol::SensorDescriptor* _add = _internal_add_sensors();
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.AvailableSensors.sensors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
AvailableSensors::sensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.AvailableSensors.sensors)
  return sensors_;
}

// -------------------------------------------------------------------

// SensorDescriptor

// string path = 1;
inline void SensorDescriptor::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SensorDescriptor::path() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorDescriptor::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.path)
}
inline std::string* SensorDescriptor::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDescriptor.path)
  return _s;
}
inline const std::string& SensorDescriptor::_internal_path() const {
  return path_.Get();
}
inline void SensorDescriptor::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorDescriptor::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorDescriptor::release_path() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDescriptor.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SensorDescriptor::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDescriptor.path)
}

// string model = 2;
inline void SensorDescriptor::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& SensorDescriptor::model() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorDescriptor::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.model)
}
inline std::string* SensorDescriptor::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDescriptor.model)
  return _s;
}
inline const std::string& SensorDescriptor::_internal_model() const {
  return model_.Get();
}
inline void SensorDescriptor::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorDescriptor::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorDescriptor::release_model() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDescriptor.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SensorDescriptor::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDescriptor.model)
}

// .naki3d.common.protocol.DataType data_type = 3;
inline void SensorDescriptor::clear_data_type() {
  data_type_ = 0;
}
inline ::naki3d::common::protocol::DataType SensorDescriptor::_internal_data_type() const {
  return static_cast< ::naki3d::common::protocol::DataType >(data_type_);
}
inline ::naki3d::common::protocol::DataType SensorDescriptor::data_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDescriptor.data_type)
  return _internal_data_type();
}
inline void SensorDescriptor::_internal_set_data_type(::naki3d::common::protocol::DataType value) {
  
  data_type_ = value;
}
inline void SensorDescriptor::set_data_type(::naki3d::common::protocol::DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDescriptor.data_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::naki3d::common::protocol::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::DataType>() {
  return ::naki3d::common::protocol::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_discovery_2eproto

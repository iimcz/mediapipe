// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "connection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class CECMessage;
struct CECMessageDefaultTypeInternal;
extern CECMessageDefaultTypeInternal _CECMessage_default_instance_;
class LightLevelData;
struct LightLevelDataDefaultTypeInternal;
extern LightLevelDataDefaultTypeInternal _LightLevelData_default_instance_;
class PirMovementData;
struct PirMovementDataDefaultTypeInternal;
extern PirMovementDataDefaultTypeInternal _PirMovementData_default_instance_;
class SensorInfo;
struct SensorInfoDefaultTypeInternal;
extern SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
class SensorList;
struct SensorListDefaultTypeInternal;
extern SensorListDefaultTypeInternal _SensorList_default_instance_;
class SensorListRequest;
struct SensorListRequestDefaultTypeInternal;
extern SensorListRequestDefaultTypeInternal _SensorListRequest_default_instance_;
class UltrasonicDistanceData;
struct UltrasonicDistanceDataDefaultTypeInternal;
extern UltrasonicDistanceDataDefaultTypeInternal _UltrasonicDistanceData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::CECMessage* Arena::CreateMaybeMessage<::naki3d::common::protocol::CECMessage>(Arena*);
template<> ::naki3d::common::protocol::LightLevelData* Arena::CreateMaybeMessage<::naki3d::common::protocol::LightLevelData>(Arena*);
template<> ::naki3d::common::protocol::PirMovementData* Arena::CreateMaybeMessage<::naki3d::common::protocol::PirMovementData>(Arena*);
template<> ::naki3d::common::protocol::SensorInfo* Arena::CreateMaybeMessage<::naki3d::common::protocol::SensorInfo>(Arena*);
template<> ::naki3d::common::protocol::SensorList* Arena::CreateMaybeMessage<::naki3d::common::protocol::SensorList>(Arena*);
template<> ::naki3d::common::protocol::SensorListRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::SensorListRequest>(Arena*);
template<> ::naki3d::common::protocol::UltrasonicDistanceData* Arena::CreateMaybeMessage<::naki3d::common::protocol::UltrasonicDistanceData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

enum CECAction : int {
  POWER_ON = 0,
  POWER_OFF = 1,
  CECAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CECAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CECAction_IsValid(int value);
constexpr CECAction CECAction_MIN = POWER_ON;
constexpr CECAction CECAction_MAX = POWER_OFF;
constexpr int CECAction_ARRAYSIZE = CECAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CECAction_descriptor();
template<typename T>
inline const std::string& CECAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CECAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CECAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CECAction_descriptor(), enum_t_value);
}
inline bool CECAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CECAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CECAction>(
    CECAction_descriptor(), name, value);
}
enum PirMovementEvent : int {
  MOVEMENT_STARTED = 0,
  MOVEMENT_STOPPED = 1,
  PirMovementEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PirMovementEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PirMovementEvent_IsValid(int value);
constexpr PirMovementEvent PirMovementEvent_MIN = MOVEMENT_STARTED;
constexpr PirMovementEvent PirMovementEvent_MAX = MOVEMENT_STOPPED;
constexpr int PirMovementEvent_ARRAYSIZE = PirMovementEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PirMovementEvent_descriptor();
template<typename T>
inline const std::string& PirMovementEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PirMovementEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PirMovementEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PirMovementEvent_descriptor(), enum_t_value);
}
inline bool PirMovementEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PirMovementEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PirMovementEvent>(
    PirMovementEvent_descriptor(), name, value);
}
// ===================================================================

class SensorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorInfo) */ {
 public:
  inline SensorInfo() : SensorInfo(nullptr) {}
  ~SensorInfo() override;
  explicit PROTOBUF_CONSTEXPR SensorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorInfo(const SensorInfo& from);
  SensorInfo(SensorInfo&& from) noexcept
    : SensorInfo() {
    *this = ::std::move(from);
  }

  inline SensorInfo& operator=(const SensorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorInfo& operator=(SensorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorInfo* internal_default_instance() {
    return reinterpret_cast<const SensorInfo*>(
               &_SensorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorInfo& a, SensorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SensorInfo& from) {
    SensorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SensorInfo";
  }
  protected:
  explicit SensorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string sensor_name = 1;
  void clear_sensor_name();
  const std::string& sensor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensor_name();
  PROTOBUF_NODISCARD std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* sensor_name);
  private:
  const std::string& _internal_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_name(const std::string& value);
  std::string* _internal_mutable_sensor_name();
  public:

  // .naki3d.common.protocol.SensorType type = 2;
  void clear_type();
  ::naki3d::common::protocol::SensorType type() const;
  void set_type(::naki3d::common::protocol::SensorType value);
  private:
  ::naki3d::common::protocol::SensorType _internal_type() const;
  void _internal_set_type(::naki3d::common::protocol::SensorType value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class SensorList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorList) */ {
 public:
  inline SensorList() : SensorList(nullptr) {}
  ~SensorList() override;
  explicit PROTOBUF_CONSTEXPR SensorList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorList(const SensorList& from);
  SensorList(SensorList&& from) noexcept
    : SensorList() {
    *this = ::std::move(from);
  }

  inline SensorList& operator=(const SensorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorList& operator=(SensorList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorList* internal_default_instance() {
    return reinterpret_cast<const SensorList*>(
               &_SensorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorList& a, SensorList& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SensorList& from) {
    SensorList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SensorList";
  }
  protected:
  explicit SensorList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 1,
  };
  // repeated .naki3d.common.protocol.SensorInfo sensors = 1;
  int sensors_size() const;
  private:
  int _internal_sensors_size() const;
  public:
  void clear_sensors();
  ::naki3d::common::protocol::SensorInfo* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorInfo >*
      mutable_sensors();
  private:
  const ::naki3d::common::protocol::SensorInfo& _internal_sensors(int index) const;
  ::naki3d::common::protocol::SensorInfo* _internal_add_sensors();
  public:
  const ::naki3d::common::protocol::SensorInfo& sensors(int index) const;
  ::naki3d::common::protocol::SensorInfo* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorInfo >&
      sensors() const;

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorInfo > sensors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class SensorListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorListRequest) */ {
 public:
  inline SensorListRequest() : SensorListRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SensorListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorListRequest(const SensorListRequest& from);
  SensorListRequest(SensorListRequest&& from) noexcept
    : SensorListRequest() {
    *this = ::std::move(from);
  }

  inline SensorListRequest& operator=(const SensorListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorListRequest& operator=(SensorListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorListRequest* internal_default_instance() {
    return reinterpret_cast<const SensorListRequest*>(
               &_SensorListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorListRequest& a, SensorListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SensorListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SensorListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SensorListRequest";
  }
  protected:
  explicit SensorListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class CECMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.CECMessage) */ {
 public:
  inline CECMessage() : CECMessage(nullptr) {}
  ~CECMessage() override;
  explicit PROTOBUF_CONSTEXPR CECMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CECMessage(const CECMessage& from);
  CECMessage(CECMessage&& from) noexcept
    : CECMessage() {
    *this = ::std::move(from);
  }

  inline CECMessage& operator=(const CECMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CECMessage& operator=(CECMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CECMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CECMessage* internal_default_instance() {
    return reinterpret_cast<const CECMessage*>(
               &_CECMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CECMessage& a, CECMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CECMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CECMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CECMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CECMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CECMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CECMessage& from) {
    CECMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CECMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.CECMessage";
  }
  protected:
  explicit CECMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .naki3d.common.protocol.CECAction action = 1;
  void clear_action();
  ::naki3d::common::protocol::CECAction action() const;
  void set_action(::naki3d::common::protocol::CECAction value);
  private:
  ::naki3d::common::protocol::CECAction _internal_action() const;
  void _internal_set_action(::naki3d::common::protocol::CECAction value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.CECMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class UltrasonicDistanceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.UltrasonicDistanceData) */ {
 public:
  inline UltrasonicDistanceData() : UltrasonicDistanceData(nullptr) {}
  ~UltrasonicDistanceData() override;
  explicit PROTOBUF_CONSTEXPR UltrasonicDistanceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UltrasonicDistanceData(const UltrasonicDistanceData& from);
  UltrasonicDistanceData(UltrasonicDistanceData&& from) noexcept
    : UltrasonicDistanceData() {
    *this = ::std::move(from);
  }

  inline UltrasonicDistanceData& operator=(const UltrasonicDistanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UltrasonicDistanceData& operator=(UltrasonicDistanceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UltrasonicDistanceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UltrasonicDistanceData* internal_default_instance() {
    return reinterpret_cast<const UltrasonicDistanceData*>(
               &_UltrasonicDistanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UltrasonicDistanceData& a, UltrasonicDistanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(UltrasonicDistanceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UltrasonicDistanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UltrasonicDistanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UltrasonicDistanceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UltrasonicDistanceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UltrasonicDistanceData& from) {
    UltrasonicDistanceData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UltrasonicDistanceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.UltrasonicDistanceData";
  }
  protected:
  explicit UltrasonicDistanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
  };
  // float distance = 1;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.UltrasonicDistanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class LightLevelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LightLevelData) */ {
 public:
  inline LightLevelData() : LightLevelData(nullptr) {}
  ~LightLevelData() override;
  explicit PROTOBUF_CONSTEXPR LightLevelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightLevelData(const LightLevelData& from);
  LightLevelData(LightLevelData&& from) noexcept
    : LightLevelData() {
    *this = ::std::move(from);
  }

  inline LightLevelData& operator=(const LightLevelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightLevelData& operator=(LightLevelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightLevelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightLevelData* internal_default_instance() {
    return reinterpret_cast<const LightLevelData*>(
               &_LightLevelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LightLevelData& a, LightLevelData& b) {
    a.Swap(&b);
  }
  inline void Swap(LightLevelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightLevelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightLevelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightLevelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightLevelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LightLevelData& from) {
    LightLevelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightLevelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.LightLevelData";
  }
  protected:
  explicit LightLevelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // float level = 1;
  void clear_level();
  float level() const;
  void set_level(float value);
  private:
  float _internal_level() const;
  void _internal_set_level(float value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LightLevelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class PirMovementData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.PirMovementData) */ {
 public:
  inline PirMovementData() : PirMovementData(nullptr) {}
  ~PirMovementData() override;
  explicit PROTOBUF_CONSTEXPR PirMovementData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PirMovementData(const PirMovementData& from);
  PirMovementData(PirMovementData&& from) noexcept
    : PirMovementData() {
    *this = ::std::move(from);
  }

  inline PirMovementData& operator=(const PirMovementData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PirMovementData& operator=(PirMovementData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PirMovementData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PirMovementData* internal_default_instance() {
    return reinterpret_cast<const PirMovementData*>(
               &_PirMovementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PirMovementData& a, PirMovementData& b) {
    a.Swap(&b);
  }
  inline void Swap(PirMovementData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PirMovementData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PirMovementData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PirMovementData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PirMovementData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PirMovementData& from) {
    PirMovementData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PirMovementData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.PirMovementData";
  }
  protected:
  explicit PirMovementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .naki3d.common.protocol.PirMovementEvent event = 1;
  void clear_event();
  ::naki3d::common::protocol::PirMovementEvent event() const;
  void set_event(::naki3d::common::protocol::PirMovementEvent value);
  private:
  ::naki3d::common::protocol::PirMovementEvent _internal_event() const;
  void _internal_set_event(::naki3d::common::protocol::PirMovementEvent value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.PirMovementData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorInfo

// string sensor_name = 1;
inline void SensorInfo::clear_sensor_name() {
  _impl_.sensor_name_.ClearToEmpty();
}
inline const std::string& SensorInfo::sensor_name() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorInfo.sensor_name)
  return _internal_sensor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorInfo::set_sensor_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sensor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorInfo.sensor_name)
}
inline std::string* SensorInfo::mutable_sensor_name() {
  std::string* _s = _internal_mutable_sensor_name();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorInfo.sensor_name)
  return _s;
}
inline const std::string& SensorInfo::_internal_sensor_name() const {
  return _impl_.sensor_name_.Get();
}
inline void SensorInfo::_internal_set_sensor_name(const std::string& value) {
  
  _impl_.sensor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SensorInfo::_internal_mutable_sensor_name() {
  
  return _impl_.sensor_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SensorInfo::release_sensor_name() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorInfo.sensor_name)
  return _impl_.sensor_name_.Release();
}
inline void SensorInfo::set_allocated_sensor_name(std::string* sensor_name) {
  if (sensor_name != nullptr) {
    
  } else {
    
  }
  _impl_.sensor_name_.SetAllocated(sensor_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_name_.IsDefault()) {
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorInfo.sensor_name)
}

// .naki3d.common.protocol.SensorType type = 2;
inline void SensorInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::naki3d::common::protocol::SensorType SensorInfo::_internal_type() const {
  return static_cast< ::naki3d::common::protocol::SensorType >(_impl_.type_);
}
inline ::naki3d::common::protocol::SensorType SensorInfo::type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorInfo.type)
  return _internal_type();
}
inline void SensorInfo::_internal_set_type(::naki3d::common::protocol::SensorType value) {
  
  _impl_.type_ = value;
}
inline void SensorInfo::set_type(::naki3d::common::protocol::SensorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorInfo.type)
}

// -------------------------------------------------------------------

// SensorList

// repeated .naki3d.common.protocol.SensorInfo sensors = 1;
inline int SensorList::_internal_sensors_size() const {
  return _impl_.sensors_.size();
}
inline int SensorList::sensors_size() const {
  return _internal_sensors_size();
}
inline void SensorList::clear_sensors() {
  _impl_.sensors_.Clear();
}
inline ::naki3d::common::protocol::SensorInfo* SensorList::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorList.sensors)
  return _impl_.sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorInfo >*
SensorList::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.SensorList.sensors)
  return &_impl_.sensors_;
}
inline const ::naki3d::common::protocol::SensorInfo& SensorList::_internal_sensors(int index) const {
  return _impl_.sensors_.Get(index);
}
inline const ::naki3d::common::protocol::SensorInfo& SensorList::sensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorList.sensors)
  return _internal_sensors(index);
}
inline ::naki3d::common::protocol::SensorInfo* SensorList::_internal_add_sensors() {
  return _impl_.sensors_.Add();
}
inline ::naki3d::common::protocol::SensorInfo* SensorList::add_sensors() {
  ::naki3d::common::protocol::SensorInfo* _add = _internal_add_sensors();
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.SensorList.sensors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorInfo >&
SensorList::sensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.SensorList.sensors)
  return _impl_.sensors_;
}

// -------------------------------------------------------------------

// SensorListRequest

// -------------------------------------------------------------------

// CECMessage

// .naki3d.common.protocol.CECAction action = 1;
inline void CECMessage::clear_action() {
  _impl_.action_ = 0;
}
inline ::naki3d::common::protocol::CECAction CECMessage::_internal_action() const {
  return static_cast< ::naki3d::common::protocol::CECAction >(_impl_.action_);
}
inline ::naki3d::common::protocol::CECAction CECMessage::action() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CECMessage.action)
  return _internal_action();
}
inline void CECMessage::_internal_set_action(::naki3d::common::protocol::CECAction value) {
  
  _impl_.action_ = value;
}
inline void CECMessage::set_action(::naki3d::common::protocol::CECAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CECMessage.action)
}

// -------------------------------------------------------------------

// UltrasonicDistanceData

// float distance = 1;
inline void UltrasonicDistanceData::clear_distance() {
  _impl_.distance_ = 0;
}
inline float UltrasonicDistanceData::_internal_distance() const {
  return _impl_.distance_;
}
inline float UltrasonicDistanceData::distance() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.UltrasonicDistanceData.distance)
  return _internal_distance();
}
inline void UltrasonicDistanceData::_internal_set_distance(float value) {
  
  _impl_.distance_ = value;
}
inline void UltrasonicDistanceData::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.UltrasonicDistanceData.distance)
}

// -------------------------------------------------------------------

// LightLevelData

// float level = 1;
inline void LightLevelData::clear_level() {
  _impl_.level_ = 0;
}
inline float LightLevelData::_internal_level() const {
  return _impl_.level_;
}
inline float LightLevelData::level() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LightLevelData.level)
  return _internal_level();
}
inline void LightLevelData::_internal_set_level(float value) {
  
  _impl_.level_ = value;
}
inline void LightLevelData::set_level(float value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LightLevelData.level)
}

// -------------------------------------------------------------------

// PirMovementData

// .naki3d.common.protocol.PirMovementEvent event = 1;
inline void PirMovementData::clear_event() {
  _impl_.event_ = 0;
}
inline ::naki3d::common::protocol::PirMovementEvent PirMovementData::_internal_event() const {
  return static_cast< ::naki3d::common::protocol::PirMovementEvent >(_impl_.event_);
}
inline ::naki3d::common::protocol::PirMovementEvent PirMovementData::event() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.PirMovementData.event)
  return _internal_event();
}
inline void PirMovementData::_internal_set_event(::naki3d::common::protocol::PirMovementEvent value) {
  
  _impl_.event_ = value;
}
inline void PirMovementData::set_event(::naki3d::common::protocol::PirMovementEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.PirMovementData.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::naki3d::common::protocol::CECAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::CECAction>() {
  return ::naki3d::common::protocol::CECAction_descriptor();
}
template <> struct is_proto_enum< ::naki3d::common::protocol::PirMovementEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::PirMovementEvent>() {
  return ::naki3d::common::protocol::PirMovementEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto

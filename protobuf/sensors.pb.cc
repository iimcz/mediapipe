// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#include "sensors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace naki3d {
namespace common {
namespace protocol {
constexpr SensorDataMessage::SensorDataMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(uint64_t{0u})
  , _oneof_case_{}{}
struct SensorDataMessageDefaultTypeInternal {
  constexpr SensorDataMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorDataMessageDefaultTypeInternal() {}
  union {
    SensorDataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorDataMessageDefaultTypeInternal _SensorDataMessage_default_instance_;
constexpr SensorMessage::SensorMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SensorMessageDefaultTypeInternal {
  constexpr SensorMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorMessageDefaultTypeInternal() {}
  union {
    SensorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorMessageDefaultTypeInternal _SensorMessage_default_instance_;
constexpr SensorControlMessage::SensorControlMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct SensorControlMessageDefaultTypeInternal {
  constexpr SensorControlMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorControlMessageDefaultTypeInternal() {}
  union {
    SensorControlMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorControlMessageDefaultTypeInternal _SensorControlMessage_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensors_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensors_2eproto = nullptr;

const uint32_t TableStruct_sensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorDataMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorDataMessage, path_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorDataMessage, timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorDataMessage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorControlMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorControlMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorControlMessage, hostname_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::SensorControlMessage, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::naki3d::common::protocol::SensorDataMessage)},
  { 16, -1, -1, sizeof(::naki3d::common::protocol::SensorMessage)},
  { 25, -1, -1, sizeof(::naki3d::common::protocol::SensorControlMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_SensorDataMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_SensorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_SensorControlMessage_default_instance_),
};

const char descriptor_table_protodef_sensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsensors.proto\022\026naki3d.common.protocol\032"
  "\tcec.proto\032\017discovery.proto\032\013types.proto"
  "\032\033google/protobuf/empty.proto\"\232\002\n\021Sensor"
  "DataMessage\022\014\n\004path\030\001 \001(\t\022\021\n\ttimestamp\030\002"
  " \001(\004\022&\n\004void\030\020 \001(\0132\026.google.protobuf.Emp"
  "tyH\000\022\016\n\004bool\030\021 \001(\010H\000\022\021\n\007integer\030\022 \001(\005H\000\022"
  "\017\n\005float\030\023 \001(\002H\000\022\020\n\006string\030\024 \001(\tH\000\0226\n\007ve"
  "ctor2\030\025 \001(\0132#.naki3d.common.protocol.Vec"
  "tor2DataH\000\0226\n\007vector3\030\026 \001(\0132#.naki3d.com"
  "mon.protocol.Vector3DataH\000B\006\n\004data\"\234\001\n\rS"
  "ensorMessage\0229\n\004data\030\001 \001(\0132).naki3d.comm"
  "on.protocol.SensorDataMessageH\000\022E\n\021senso"
  "r_descriptor\030\002 \001(\0132(.naki3d.common.proto"
  "col.SensorDescriptorH\000B\t\n\007message\"n\n\024Sen"
  "sorControlMessage\022\020\n\010hostname\030\001 \001(\t\0229\n\013c"
  "ec_message\030\021 \001(\0132\".naki3d.common.protoco"
  "l.CECMessageH\000B\t\n\007messageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensors_2eproto_deps[4] = {
  &::descriptor_table_cec_2eproto,
  &::descriptor_table_discovery_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensors_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_2eproto = {
  false, false, 673, descriptor_table_protodef_sensors_2eproto, "sensors.proto", 
  &descriptor_table_sensors_2eproto_once, descriptor_table_sensors_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_sensors_2eproto::offsets,
  file_level_metadata_sensors_2eproto, file_level_enum_descriptors_sensors_2eproto, file_level_service_descriptors_sensors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sensors_2eproto_getter() {
  return &descriptor_table_sensors_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sensors_2eproto(&descriptor_table_sensors_2eproto);
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class SensorDataMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Empty& void_(const SensorDataMessage* msg);
  static const ::naki3d::common::protocol::Vector2Data& vector2(const SensorDataMessage* msg);
  static const ::naki3d::common::protocol::Vector3Data& vector3(const SensorDataMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
SensorDataMessage::_Internal::void_(const SensorDataMessage* msg) {
  return *msg->data_.void__;
}
const ::naki3d::common::protocol::Vector2Data&
SensorDataMessage::_Internal::vector2(const SensorDataMessage* msg) {
  return *msg->data_.vector2_;
}
const ::naki3d::common::protocol::Vector3Data&
SensorDataMessage::_Internal::vector3(const SensorDataMessage* msg) {
  return *msg->data_.vector3_;
}
void SensorDataMessage::set_allocated_void_(::PROTOBUF_NAMESPACE_ID::Empty* void_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (void_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(void_));
    if (message_arena != submessage_arena) {
      void_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, void_, submessage_arena);
    }
    set_has_void_();
    data_.void__ = void_;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.void)
}
void SensorDataMessage::clear_void_() {
  if (_internal_has_void_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.void__;
    }
    clear_has_data();
  }
}
void SensorDataMessage::set_allocated_vector2(::naki3d::common::protocol::Vector2Data* vector2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (vector2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector2));
    if (message_arena != submessage_arena) {
      vector2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector2, submessage_arena);
    }
    set_has_vector2();
    data_.vector2_ = vector2;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.vector2)
}
void SensorDataMessage::clear_vector2() {
  if (_internal_has_vector2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.vector2_;
    }
    clear_has_data();
  }
}
void SensorDataMessage::set_allocated_vector3(::naki3d::common::protocol::Vector3Data* vector3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (vector3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector3));
    if (message_arena != submessage_arena) {
      vector3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector3, submessage_arena);
    }
    set_has_vector3();
    data_.vector3_ = vector3;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.vector3)
}
void SensorDataMessage::clear_vector3() {
  if (_internal_has_vector3()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.vector3_;
    }
    clear_has_data();
  }
}
SensorDataMessage::SensorDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorDataMessage)
}
SensorDataMessage::SensorDataMessage(const SensorDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kVoid: {
      _internal_mutable_void_()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_void_());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kInteger: {
      _internal_set_integer(from._internal_integer());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kVector2: {
      _internal_mutable_vector2()->::naki3d::common::protocol::Vector2Data::MergeFrom(from._internal_vector2());
      break;
    }
    case kVector3: {
      _internal_mutable_vector3()->::naki3d::common::protocol::Vector3Data::MergeFrom(from._internal_vector3());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorDataMessage)
}

inline void SensorDataMessage::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = uint64_t{0u};
clear_has_data();
}

SensorDataMessage::~SensorDataMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorDataMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void SensorDataMessage::ArenaDtor(void* object) {
  SensorDataMessage* _this = reinterpret_cast< SensorDataMessage* >(object);
  (void)_this;
}
void SensorDataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorDataMessage::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:naki3d.common.protocol.SensorDataMessage)
  switch (data_case()) {
    case kVoid: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.void__;
      }
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kInteger: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kString: {
      data_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVector2: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.vector2_;
      }
      break;
    }
    case kVector3: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.vector3_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SensorDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorDataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  timestamp_ = uint64_t{0u};
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorDataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.SensorDataMessage.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty void = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_void_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 integer = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_set_integer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _internal_set_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string string = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.SensorDataMessage.string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.Vector2Data vector2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.Vector3Data vector3 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorDataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorDataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDataMessage.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .google.protobuf.Empty void = 16;
  if (_internal_has_void_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::void_(this), target, stream);
  }

  // bool bool = 17;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_bool_(), target);
  }

  // int32 integer = 18;
  if (_internal_has_integer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_integer(), target);
  }

  // float float = 19;
  if (_internal_has_float_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_float_(), target);
  }

  // string string = 20;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDataMessage.string");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_string(), target);
  }

  // .naki3d.common.protocol.Vector2Data vector2 = 21;
  if (_internal_has_vector2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::vector2(this), target, stream);
  }

  // .naki3d.common.protocol.Vector3Data vector3 = 22;
  if (_internal_has_vector3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::vector3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorDataMessage)
  return target;
}

size_t SensorDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorDataMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  switch (data_case()) {
    // .google.protobuf.Empty void = 16;
    case kVoid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.void__);
      break;
    }
    // bool bool = 17;
    case kBool: {
      total_size += 2 + 1;
      break;
    }
    // int32 integer = 18;
    case kInteger: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_integer());
      break;
    }
    // float float = 19;
    case kFloat: {
      total_size += 2 + 4;
      break;
    }
    // string string = 20;
    case kString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // .naki3d.common.protocol.Vector2Data vector2 = 21;
    case kVector2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.vector2_);
      break;
    }
    // .naki3d.common.protocol.Vector3Data vector3 = 22;
    case kVector3: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.vector3_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorDataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorDataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorDataMessage::GetClassData() const { return &_class_data_; }

void SensorDataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorDataMessage *>(to)->MergeFrom(
      static_cast<const SensorDataMessage &>(from));
}


void SensorDataMessage::MergeFrom(const SensorDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kVoid: {
      _internal_mutable_void_()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_void_());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kInteger: {
      _internal_set_integer(from._internal_integer());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kVector2: {
      _internal_mutable_vector2()->::naki3d::common::protocol::Vector2Data::MergeFrom(from._internal_vector2());
      break;
    }
    case kVector3: {
      _internal_mutable_vector3()->::naki3d::common::protocol::Vector3Data::MergeFrom(from._internal_vector3());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorDataMessage::CopyFrom(const SensorDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataMessage::IsInitialized() const {
  return true;
}

void SensorDataMessage::InternalSwap(SensorDataMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorDataMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[0]);
}

// ===================================================================

class SensorMessage::_Internal {
 public:
  static const ::naki3d::common::protocol::SensorDataMessage& data(const SensorMessage* msg);
  static const ::naki3d::common::protocol::SensorDescriptor& sensor_descriptor(const SensorMessage* msg);
};

const ::naki3d::common::protocol::SensorDataMessage&
SensorMessage::_Internal::data(const SensorMessage* msg) {
  return *msg->message_.data_;
}
const ::naki3d::common::protocol::SensorDescriptor&
SensorMessage::_Internal::sensor_descriptor(const SensorMessage* msg) {
  return *msg->message_.sensor_descriptor_;
}
void SensorMessage::set_allocated_data(::naki3d::common::protocol::SensorDataMessage* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::naki3d::common::protocol::SensorDataMessage>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    message_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorMessage.data)
}
void SensorMessage::set_allocated_sensor_descriptor(::naki3d::common::protocol::SensorDescriptor* sensor_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (sensor_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_descriptor));
    if (message_arena != submessage_arena) {
      sensor_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_descriptor, submessage_arena);
    }
    set_has_sensor_descriptor();
    message_.sensor_descriptor_ = sensor_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorMessage.sensor_descriptor)
}
void SensorMessage::clear_sensor_descriptor() {
  if (_internal_has_sensor_descriptor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.sensor_descriptor_;
    }
    clear_has_message();
  }
}
SensorMessage::SensorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorMessage)
}
SensorMessage::SensorMessage(const SensorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kData: {
      _internal_mutable_data()->::naki3d::common::protocol::SensorDataMessage::MergeFrom(from._internal_data());
      break;
    }
    case kSensorDescriptor: {
      _internal_mutable_sensor_descriptor()->::naki3d::common::protocol::SensorDescriptor::MergeFrom(from._internal_sensor_descriptor());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorMessage)
}

inline void SensorMessage::SharedCtor() {
clear_has_message();
}

SensorMessage::~SensorMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void SensorMessage::ArenaDtor(void* object) {
  SensorMessage* _this = reinterpret_cast< SensorMessage* >(object);
  (void)_this;
}
void SensorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:naki3d.common.protocol.SensorMessage)
  switch (message_case()) {
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.data_;
      }
      break;
    }
    case kSensorDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.sensor_descriptor_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SensorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.SensorDataMessage data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.SensorDescriptor sensor_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.SensorDataMessage data = 1;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .naki3d.common.protocol.SensorDescriptor sensor_descriptor = 2;
  if (_internal_has_sensor_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sensor_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorMessage)
  return target;
}

size_t SensorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .naki3d.common.protocol.SensorDataMessage data = 1;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.data_);
      break;
    }
    // .naki3d.common.protocol.SensorDescriptor sensor_descriptor = 2;
    case kSensorDescriptor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.sensor_descriptor_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMessage::GetClassData() const { return &_class_data_; }

void SensorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorMessage *>(to)->MergeFrom(
      static_cast<const SensorMessage &>(from));
}


void SensorMessage::MergeFrom(const SensorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kData: {
      _internal_mutable_data()->::naki3d::common::protocol::SensorDataMessage::MergeFrom(from._internal_data());
      break;
    }
    case kSensorDescriptor: {
      _internal_mutable_sensor_descriptor()->::naki3d::common::protocol::SensorDescriptor::MergeFrom(from._internal_sensor_descriptor());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMessage::CopyFrom(const SensorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage::IsInitialized() const {
  return true;
}

void SensorMessage::InternalSwap(SensorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[1]);
}

// ===================================================================

class SensorControlMessage::_Internal {
 public:
  static const ::naki3d::common::protocol::CECMessage& cec_message(const SensorControlMessage* msg);
};

const ::naki3d::common::protocol::CECMessage&
SensorControlMessage::_Internal::cec_message(const SensorControlMessage* msg) {
  return *msg->message_.cec_message_;
}
void SensorControlMessage::set_allocated_cec_message(::naki3d::common::protocol::CECMessage* cec_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (cec_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cec_message));
    if (message_arena != submessage_arena) {
      cec_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cec_message, submessage_arena);
    }
    set_has_cec_message();
    message_.cec_message_ = cec_message;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorControlMessage.cec_message)
}
void SensorControlMessage::clear_cec_message() {
  if (_internal_has_cec_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.cec_message_;
    }
    clear_has_message();
  }
}
SensorControlMessage::SensorControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.SensorControlMessage)
}
SensorControlMessage::SensorControlMessage(const SensorControlMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  clear_has_message();
  switch (from.message_case()) {
    case kCecMessage: {
      _internal_mutable_cec_message()->::naki3d::common::protocol::CECMessage::MergeFrom(from._internal_cec_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorControlMessage)
}

inline void SensorControlMessage::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_message();
}

SensorControlMessage::~SensorControlMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorControlMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorControlMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_message()) {
    clear_message();
  }
}

void SensorControlMessage::ArenaDtor(void* object) {
  SensorControlMessage* _this = reinterpret_cast< SensorControlMessage* >(object);
  (void)_this;
}
void SensorControlMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorControlMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorControlMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:naki3d.common.protocol.SensorControlMessage)
  switch (message_case()) {
    case kCecMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.cec_message_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SensorControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorControlMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorControlMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.SensorControlMessage.hostname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.CECMessage cec_message = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_cec_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorControlMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorControlMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorControlMessage.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // .naki3d.common.protocol.CECMessage cec_message = 17;
  if (_internal_has_cec_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::cec_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorControlMessage)
  return target;
}

size_t SensorControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorControlMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  switch (message_case()) {
    // .naki3d.common.protocol.CECMessage cec_message = 17;
    case kCecMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.cec_message_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorControlMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorControlMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorControlMessage::GetClassData() const { return &_class_data_; }

void SensorControlMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorControlMessage *>(to)->MergeFrom(
      static_cast<const SensorControlMessage &>(from));
}


void SensorControlMessage::MergeFrom(const SensorControlMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorControlMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  switch (from.message_case()) {
    case kCecMessage: {
      _internal_mutable_cec_message()->::naki3d::common::protocol::CECMessage::MergeFrom(from._internal_cec_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorControlMessage::CopyFrom(const SensorControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorControlMessage::IsInitialized() const {
  return true;
}

void SensorControlMessage::InternalSwap(SensorControlMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorControlMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorDataMessage* Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorMessage* Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::SensorControlMessage* Arena::CreateMaybeMessage< ::naki3d::common::protocol::SensorControlMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::SensorControlMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* SensorDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorDataMessage_reflection_ = NULL;
struct SensorDataMessageOneofInstance {
  const ::google::protobuf::Empty* void__;
  bool bool__;
  ::google::protobuf::int32 integer_;
  float float__;
  ::google::protobuf::internal::ArenaStringPtr string_;
  const ::naki3d::common::protocol::Vector2Data* vector2_;
  const ::naki3d::common::protocol::Vector3Data* vector3_;
}* SensorDataMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SensorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorMessage_reflection_ = NULL;
struct SensorMessageOneofInstance {
  const ::naki3d::common::protocol::SensorDataMessage* data_;
  const ::naki3d::common::protocol::SensorDescriptor* descriptor_;
}* SensorMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SensorControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorControlMessage_reflection_ = NULL;
struct SensorControlMessageOneofInstance {
  const ::naki3d::common::protocol::CECMessage* cec_message_;
}* SensorControlMessage_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sensors_2eproto() {
  protobuf_AddDesc_sensors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensors.proto");
  GOOGLE_CHECK(file != NULL);
  SensorDataMessage_descriptor_ = file->message_type(0);
  static const int SensorDataMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataMessage, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataMessage, timestamp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorDataMessage_default_oneof_instance_, void__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorDataMessage_default_oneof_instance_, bool__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorDataMessage_default_oneof_instance_, integer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorDataMessage_default_oneof_instance_, float__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorDataMessage_default_oneof_instance_, string_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorDataMessage_default_oneof_instance_, vector2_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorDataMessage_default_oneof_instance_, vector3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataMessage, data_),
  };
  SensorDataMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorDataMessage_descriptor_,
      SensorDataMessage::default_instance_,
      SensorDataMessage_offsets_,
      -1,
      -1,
      -1,
      SensorDataMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataMessage, _oneof_case_[0]),
      sizeof(SensorDataMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataMessage, _is_default_instance_));
  SensorMessage_descriptor_ = file->message_type(1);
  static const int SensorMessage_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorMessage_default_oneof_instance_, data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorMessage_default_oneof_instance_, descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMessage, message_),
  };
  SensorMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorMessage_descriptor_,
      SensorMessage::default_instance_,
      SensorMessage_offsets_,
      -1,
      -1,
      -1,
      SensorMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMessage, _oneof_case_[0]),
      sizeof(SensorMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMessage, _is_default_instance_));
  SensorControlMessage_descriptor_ = file->message_type(2);
  static const int SensorControlMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorControlMessage, hostname_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SensorControlMessage_default_oneof_instance_, cec_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorControlMessage, message_),
  };
  SensorControlMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorControlMessage_descriptor_,
      SensorControlMessage::default_instance_,
      SensorControlMessage_offsets_,
      -1,
      -1,
      -1,
      SensorControlMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorControlMessage, _oneof_case_[0]),
      sizeof(SensorControlMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorControlMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorControlMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorDataMessage_descriptor_, &SensorDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorMessage_descriptor_, &SensorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorControlMessage_descriptor_, &SensorControlMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensors_2eproto() {
  delete SensorDataMessage::default_instance_;
  delete SensorDataMessage_default_oneof_instance_;
  delete SensorDataMessage_reflection_;
  delete SensorMessage::default_instance_;
  delete SensorMessage_default_oneof_instance_;
  delete SensorMessage_reflection_;
  delete SensorControlMessage::default_instance_;
  delete SensorControlMessage_default_oneof_instance_;
  delete SensorControlMessage_reflection_;
}

void protobuf_AddDesc_sensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_sensors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::naki3d::common::protocol::protobuf_AddDesc_cec_2eproto();
  ::naki3d::common::protocol::protobuf_AddDesc_discovery_2eproto();
  ::naki3d::common::protocol::protobuf_AddDesc_types_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsensors.proto\022\026naki3d.common.protocol\032"
    "\tcec.proto\032\017discovery.proto\032\013types.proto"
    "\032\033google/protobuf/empty.proto\"\232\002\n\021Sensor"
    "DataMessage\022\014\n\004path\030\001 \001(\t\022\021\n\ttimestamp\030\002"
    " \001(\004\022&\n\004void\030\020 \001(\0132\026.google.protobuf.Emp"
    "tyH\000\022\016\n\004bool\030\021 \001(\010H\000\022\021\n\007integer\030\022 \001(\005H\000\022"
    "\017\n\005float\030\023 \001(\002H\000\022\020\n\006string\030\024 \001(\tH\000\0226\n\007ve"
    "ctor2\030\025 \001(\0132#.naki3d.common.protocol.Vec"
    "tor2DataH\000\0226\n\007vector3\030\026 \001(\0132#.naki3d.com"
    "mon.protocol.Vector3DataH\000B\006\n\004data\"\225\001\n\rS"
    "ensorMessage\0229\n\004data\030\001 \001(\0132).naki3d.comm"
    "on.protocol.SensorDataMessageH\000\022>\n\ndescr"
    "iptor\030\002 \001(\0132(.naki3d.common.protocol.Sen"
    "sorDescriptorH\000B\t\n\007message\"n\n\024SensorCont"
    "rolMessage\022\020\n\010hostname\030\001 \001(\t\0229\n\013cec_mess"
    "age\030\021 \001(\0132\".naki3d.common.protocol.CECMe"
    "ssageH\000B\t\n\007messageb\006proto3", 666);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensors.proto", &protobuf_RegisterTypes);
  SensorDataMessage::default_instance_ = new SensorDataMessage();
  SensorDataMessage_default_oneof_instance_ = new SensorDataMessageOneofInstance();
  SensorMessage::default_instance_ = new SensorMessage();
  SensorMessage_default_oneof_instance_ = new SensorMessageOneofInstance();
  SensorControlMessage::default_instance_ = new SensorControlMessage();
  SensorControlMessage_default_oneof_instance_ = new SensorControlMessageOneofInstance();
  SensorDataMessage::default_instance_->InitAsDefaultInstance();
  SensorMessage::default_instance_->InitAsDefaultInstance();
  SensorControlMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensors_2eproto {
  StaticDescriptorInitializer_sensors_2eproto() {
    protobuf_AddDesc_sensors_2eproto();
  }
} static_descriptor_initializer_sensors_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorDataMessage::kPathFieldNumber;
const int SensorDataMessage::kTimestampFieldNumber;
const int SensorDataMessage::kVoidFieldNumber;
const int SensorDataMessage::kBoolFieldNumber;
const int SensorDataMessage::kIntegerFieldNumber;
const int SensorDataMessage::kFloatFieldNumber;
const int SensorDataMessage::kStringFieldNumber;
const int SensorDataMessage::kVector2FieldNumber;
const int SensorDataMessage::kVector3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorDataMessage::SensorDataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.SensorDataMessage)
}

void SensorDataMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  SensorDataMessage_default_oneof_instance_->void__ = const_cast< ::google::protobuf::Empty*>(&::google::protobuf::Empty::default_instance());
  SensorDataMessage_default_oneof_instance_->bool__ = false;
  SensorDataMessage_default_oneof_instance_->integer_ = 0;
  SensorDataMessage_default_oneof_instance_->float__ = 0;
  SensorDataMessage_default_oneof_instance_->string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  SensorDataMessage_default_oneof_instance_->vector2_ = const_cast< ::naki3d::common::protocol::Vector2Data*>(&::naki3d::common::protocol::Vector2Data::default_instance());
  SensorDataMessage_default_oneof_instance_->vector3_ = const_cast< ::naki3d::common::protocol::Vector3Data*>(&::naki3d::common::protocol::Vector3Data::default_instance());
}

SensorDataMessage::SensorDataMessage(const SensorDataMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorDataMessage)
}

void SensorDataMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_data();
}

SensorDataMessage::~SensorDataMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorDataMessage)
  SharedDtor();
}

void SensorDataMessage::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
  if (this != default_instance_) {
  }
}

void SensorDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorDataMessage_descriptor_;
}

const SensorDataMessage& SensorDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensors_2eproto();
  return *default_instance_;
}

SensorDataMessage* SensorDataMessage::default_instance_ = NULL;

SensorDataMessage* SensorDataMessage::New(::google::protobuf::Arena* arena) const {
  SensorDataMessage* n = new SensorDataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorDataMessage::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:naki3d.common.protocol.SensorDataMessage)
  switch(data_case()) {
    case kVoid: {
      delete data_.void__;
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kInteger: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kString: {
      data_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kVector2: {
      delete data_.vector2_;
      break;
    }
    case kVector3: {
      delete data_.vector3_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SensorDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorDataMessage)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_data();
}

bool SensorDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.SensorDataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.SensorDataMessage.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_void;
        break;
      }

      // optional .google.protobuf.Empty void = 16;
      case 16: {
        if (tag == 130) {
         parse_void:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_void_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_bool;
        break;
      }

      // optional bool bool = 17;
      case 17: {
        if (tag == 136) {
         parse_bool:
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_.bool__)));
          set_has_bool_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_integer;
        break;
      }

      // optional int32 integer = 18;
      case 18: {
        if (tag == 144) {
         parse_integer:
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_.integer_)));
          set_has_integer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_float;
        break;
      }

      // optional float float = 19;
      case 19: {
        if (tag == 157) {
         parse_float:
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_.float__)));
          set_has_float_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_string;
        break;
      }

      // optional string string = 20;
      case 20: {
        if (tag == 162) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.SensorDataMessage.string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_vector2;
        break;
      }

      // optional .naki3d.common.protocol.Vector2Data vector2 = 21;
      case 21: {
        if (tag == 170) {
         parse_vector2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_vector3;
        break;
      }

      // optional .naki3d.common.protocol.Vector3Data vector3 = 22;
      case 22: {
        if (tag == 178) {
         parse_vector3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.SensorDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.SensorDataMessage)
  return false;
#undef DO_
}

void SensorDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.SensorDataMessage)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDataMessage.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional .google.protobuf.Empty void = 16;
  if (has_void_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *data_.void__, output);
  }

  // optional bool bool = 17;
  if (has_bool_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->bool_(), output);
  }

  // optional int32 integer = 18;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->integer(), output);
  }

  // optional float float = 19;
  if (has_float_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->float_(), output);
  }

  // optional string string = 20;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDataMessage.string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->string(), output);
  }

  // optional .naki3d.common.protocol.Vector2Data vector2 = 21;
  if (has_vector2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *data_.vector2_, output);
  }

  // optional .naki3d.common.protocol.Vector3Data vector3 = 22;
  if (has_vector3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *data_.vector3_, output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.SensorDataMessage)
}

::google::protobuf::uint8* SensorDataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorDataMessage)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDataMessage.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional .google.protobuf.Empty void = 16;
  if (has_void_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *data_.void__, false, target);
  }

  // optional bool bool = 17;
  if (has_bool_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->bool_(), target);
  }

  // optional int32 integer = 18;
  if (has_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->integer(), target);
  }

  // optional float float = 19;
  if (has_float_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->float_(), target);
  }

  // optional string string = 20;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorDataMessage.string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->string(), target);
  }

  // optional .naki3d.common.protocol.Vector2Data vector2 = 21;
  if (has_vector2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *data_.vector2_, false, target);
  }

  // optional .naki3d.common.protocol.Vector3Data vector3 = 22;
  if (has_vector3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *data_.vector3_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorDataMessage)
  return target;
}

int SensorDataMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorDataMessage)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  switch (data_case()) {
    // optional .google.protobuf.Empty void = 16;
    case kVoid: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.void__);
      break;
    }
    // optional bool bool = 17;
    case kBool: {
      total_size += 2 + 1;
      break;
    }
    // optional int32 integer = 18;
    case kInteger: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer());
      break;
    }
    // optional float float = 19;
    case kFloat: {
      total_size += 2 + 4;
      break;
    }
    // optional string string = 20;
    case kString: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
      break;
    }
    // optional .naki3d.common.protocol.Vector2Data vector2 = 21;
    case kVector2: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.vector2_);
      break;
    }
    // optional .naki3d.common.protocol.Vector3Data vector3 = 22;
    case kVector3: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.vector3_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SensorDataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorDataMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorDataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SensorDataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SensorDataMessage)
    MergeFrom(*source);
  }
}

void SensorDataMessage::MergeFrom(const SensorDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorDataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.data_case()) {
    case kVoid: {
      mutable_void_()->::google::protobuf::Empty::MergeFrom(from.void_());
      break;
    }
    case kBool: {
      set_bool_(from.bool_());
      break;
    }
    case kInteger: {
      set_integer(from.integer());
      break;
    }
    case kFloat: {
      set_float_(from.float_());
      break;
    }
    case kString: {
      set_string(from.string());
      break;
    }
    case kVector2: {
      mutable_vector2()->::naki3d::common::protocol::Vector2Data::MergeFrom(from.vector2());
      break;
    }
    case kVector3: {
      mutable_vector3()->::naki3d::common::protocol::Vector3Data::MergeFrom(from.vector3());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void SensorDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SensorDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDataMessage::CopyFrom(const SensorDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataMessage::IsInitialized() const {

  return true;
}

void SensorDataMessage::Swap(SensorDataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorDataMessage::InternalSwap(SensorDataMessage* other) {
  path_.Swap(&other->path_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(data_, other->data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorDataMessage_descriptor_;
  metadata.reflection = SensorDataMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorDataMessage

// optional string path = 1;
void SensorDataMessage::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorDataMessage::path() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorDataMessage::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.path)
}
 void SensorDataMessage::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDataMessage.path)
}
 void SensorDataMessage::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDataMessage.path)
}
 ::std::string* SensorDataMessage::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorDataMessage::release_path() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorDataMessage::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.path)
}

// optional uint64 timestamp = 2;
void SensorDataMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SensorDataMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.timestamp)
  return timestamp_;
}
 void SensorDataMessage::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.timestamp)
}

// optional .google.protobuf.Empty void = 16;
bool SensorDataMessage::has_void_() const {
  return data_case() == kVoid;
}
void SensorDataMessage::set_has_void_() {
  _oneof_case_[0] = kVoid;
}
void SensorDataMessage::clear_void_() {
  if (has_void_()) {
    delete data_.void__;
    clear_has_data();
  }
}
 const ::google::protobuf::Empty& SensorDataMessage::void_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.void)
  return has_void_()
      ? *data_.void__
      : ::google::protobuf::Empty::default_instance();
}
::google::protobuf::Empty* SensorDataMessage::mutable_void_() {
  if (!has_void_()) {
    clear_data();
    set_has_void_();
    data_.void__ = new ::google::protobuf::Empty;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.void)
  return data_.void__;
}
::google::protobuf::Empty* SensorDataMessage::release_void_() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.void)
  if (has_void_()) {
    clear_has_data();
    ::google::protobuf::Empty* temp = data_.void__;
    data_.void__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SensorDataMessage::set_allocated_void_(::google::protobuf::Empty* void_) {
  clear_data();
  if (void_) {
    if (static_cast< ::google::protobuf::Empty*>(void_)->GetArena() != NULL) {
      ::google::protobuf::Empty* new_void_ = new ::google::protobuf::Empty;
      new_void_->CopyFrom(*void_);
      void_ = new_void_;
    }
    set_has_void_();
    data_.void__ = void_;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.void)
}

// optional bool bool = 17;
bool SensorDataMessage::has_bool_() const {
  return data_case() == kBool;
}
void SensorDataMessage::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
void SensorDataMessage::clear_bool_() {
  if (has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
 bool SensorDataMessage::bool_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.bool)
  if (has_bool_()) {
    return data_.bool__;
  }
  return false;
}
 void SensorDataMessage::set_bool_(bool value) {
  if (!has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.bool)
}

// optional int32 integer = 18;
bool SensorDataMessage::has_integer() const {
  return data_case() == kInteger;
}
void SensorDataMessage::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
void SensorDataMessage::clear_integer() {
  if (has_integer()) {
    data_.integer_ = 0;
    clear_has_data();
  }
}
 ::google::protobuf::int32 SensorDataMessage::integer() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.integer)
  if (has_integer()) {
    return data_.integer_;
  }
  return 0;
}
 void SensorDataMessage::set_integer(::google::protobuf::int32 value) {
  if (!has_integer()) {
    clear_data();
    set_has_integer();
  }
  data_.integer_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.integer)
}

// optional float float = 19;
bool SensorDataMessage::has_float_() const {
  return data_case() == kFloat;
}
void SensorDataMessage::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
void SensorDataMessage::clear_float_() {
  if (has_float_()) {
    data_.float__ = 0;
    clear_has_data();
  }
}
 float SensorDataMessage::float_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.float)
  if (has_float_()) {
    return data_.float__;
  }
  return 0;
}
 void SensorDataMessage::set_float_(float value) {
  if (!has_float_()) {
    clear_data();
    set_has_float_();
  }
  data_.float__ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.float)
}

// optional string string = 20;
bool SensorDataMessage::has_string() const {
  return data_case() == kString;
}
void SensorDataMessage::set_has_string() {
  _oneof_case_[0] = kString;
}
void SensorDataMessage::clear_string() {
  if (has_string()) {
    data_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
 const ::std::string& SensorDataMessage::string() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.string)
  if (has_string()) {
    return data_.string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void SensorDataMessage::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.string)
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.string)
}
 void SensorDataMessage::set_string(const char* value) {
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDataMessage.string)
}
 void SensorDataMessage::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDataMessage.string)
}
 ::std::string* SensorDataMessage::mutable_string() {
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.string)
  return data_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorDataMessage::release_string() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.string)
  if (has_string()) {
    clear_has_data();
    return data_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void SensorDataMessage::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (string != NULL) {
    set_has_string();
    data_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string);
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.string)
}

// optional .naki3d.common.protocol.Vector2Data vector2 = 21;
bool SensorDataMessage::has_vector2() const {
  return data_case() == kVector2;
}
void SensorDataMessage::set_has_vector2() {
  _oneof_case_[0] = kVector2;
}
void SensorDataMessage::clear_vector2() {
  if (has_vector2()) {
    delete data_.vector2_;
    clear_has_data();
  }
}
 const ::naki3d::common::protocol::Vector2Data& SensorDataMessage::vector2() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.vector2)
  return has_vector2()
      ? *data_.vector2_
      : ::naki3d::common::protocol::Vector2Data::default_instance();
}
::naki3d::common::protocol::Vector2Data* SensorDataMessage::mutable_vector2() {
  if (!has_vector2()) {
    clear_data();
    set_has_vector2();
    data_.vector2_ = new ::naki3d::common::protocol::Vector2Data;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.vector2)
  return data_.vector2_;
}
::naki3d::common::protocol::Vector2Data* SensorDataMessage::release_vector2() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.vector2)
  if (has_vector2()) {
    clear_has_data();
    ::naki3d::common::protocol::Vector2Data* temp = data_.vector2_;
    data_.vector2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SensorDataMessage::set_allocated_vector2(::naki3d::common::protocol::Vector2Data* vector2) {
  clear_data();
  if (vector2) {
    set_has_vector2();
    data_.vector2_ = vector2;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.vector2)
}

// optional .naki3d.common.protocol.Vector3Data vector3 = 22;
bool SensorDataMessage::has_vector3() const {
  return data_case() == kVector3;
}
void SensorDataMessage::set_has_vector3() {
  _oneof_case_[0] = kVector3;
}
void SensorDataMessage::clear_vector3() {
  if (has_vector3()) {
    delete data_.vector3_;
    clear_has_data();
  }
}
 const ::naki3d::common::protocol::Vector3Data& SensorDataMessage::vector3() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.vector3)
  return has_vector3()
      ? *data_.vector3_
      : ::naki3d::common::protocol::Vector3Data::default_instance();
}
::naki3d::common::protocol::Vector3Data* SensorDataMessage::mutable_vector3() {
  if (!has_vector3()) {
    clear_data();
    set_has_vector3();
    data_.vector3_ = new ::naki3d::common::protocol::Vector3Data;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.vector3)
  return data_.vector3_;
}
::naki3d::common::protocol::Vector3Data* SensorDataMessage::release_vector3() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.vector3)
  if (has_vector3()) {
    clear_has_data();
    ::naki3d::common::protocol::Vector3Data* temp = data_.vector3_;
    data_.vector3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SensorDataMessage::set_allocated_vector3(::naki3d::common::protocol::Vector3Data* vector3) {
  clear_data();
  if (vector3) {
    set_has_vector3();
    data_.vector3_ = vector3;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.vector3)
}

bool SensorDataMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void SensorDataMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
SensorDataMessage::DataCase SensorDataMessage::data_case() const {
  return SensorDataMessage::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMessage::kDataFieldNumber;
const int SensorMessage::kDescriptorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMessage::SensorMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.SensorMessage)
}

void SensorMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  SensorMessage_default_oneof_instance_->data_ = const_cast< ::naki3d::common::protocol::SensorDataMessage*>(&::naki3d::common::protocol::SensorDataMessage::default_instance());
  SensorMessage_default_oneof_instance_->descriptor_ = const_cast< ::naki3d::common::protocol::SensorDescriptor*>(&::naki3d::common::protocol::SensorDescriptor::default_instance());
}

SensorMessage::SensorMessage(const SensorMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorMessage)
}

void SensorMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_message();
}

SensorMessage::~SensorMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorMessage)
  SharedDtor();
}

void SensorMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
  if (this != default_instance_) {
  }
}

void SensorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorMessage_descriptor_;
}

const SensorMessage& SensorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensors_2eproto();
  return *default_instance_;
}

SensorMessage* SensorMessage::default_instance_ = NULL;

SensorMessage* SensorMessage::New(::google::protobuf::Arena* arena) const {
  SensorMessage* n = new SensorMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:naki3d.common.protocol.SensorMessage)
  switch(message_case()) {
    case kData: {
      delete message_.data_;
      break;
    }
    case kDescriptor: {
      delete message_.descriptor_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SensorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorMessage)
  clear_message();
}

bool SensorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.SensorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naki3d.common.protocol.SensorDataMessage data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_descriptor;
        break;
      }

      // optional .naki3d.common.protocol.SensorDescriptor descriptor = 2;
      case 2: {
        if (tag == 18) {
         parse_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.SensorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.SensorMessage)
  return false;
#undef DO_
}

void SensorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.SensorMessage)
  // optional .naki3d.common.protocol.SensorDataMessage data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *message_.data_, output);
  }

  // optional .naki3d.common.protocol.SensorDescriptor descriptor = 2;
  if (has_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *message_.descriptor_, output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.SensorMessage)
}

::google::protobuf::uint8* SensorMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorMessage)
  // optional .naki3d.common.protocol.SensorDataMessage data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *message_.data_, false, target);
  }

  // optional .naki3d.common.protocol.SensorDescriptor descriptor = 2;
  if (has_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *message_.descriptor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorMessage)
  return target;
}

int SensorMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorMessage)
  int total_size = 0;

  switch (message_case()) {
    // optional .naki3d.common.protocol.SensorDataMessage data = 1;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.data_);
      break;
    }
    // optional .naki3d.common.protocol.SensorDescriptor descriptor = 2;
    case kDescriptor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.descriptor_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SensorMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SensorMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SensorMessage)
    MergeFrom(*source);
  }
}

void SensorMessage::MergeFrom(const SensorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.message_case()) {
    case kData: {
      mutable_data()->::naki3d::common::protocol::SensorDataMessage::MergeFrom(from.data());
      break;
    }
    case kDescriptor: {
      mutable_descriptor()->::naki3d::common::protocol::SensorDescriptor::MergeFrom(from.descriptor());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void SensorMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SensorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMessage::CopyFrom(const SensorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage::IsInitialized() const {

  return true;
}

void SensorMessage::Swap(SensorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMessage::InternalSwap(SensorMessage* other) {
  std::swap(message_, other->message_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorMessage_descriptor_;
  metadata.reflection = SensorMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorMessage

// optional .naki3d.common.protocol.SensorDataMessage data = 1;
bool SensorMessage::has_data() const {
  return message_case() == kData;
}
void SensorMessage::set_has_data() {
  _oneof_case_[0] = kData;
}
void SensorMessage::clear_data() {
  if (has_data()) {
    delete message_.data_;
    clear_has_message();
  }
}
 const ::naki3d::common::protocol::SensorDataMessage& SensorMessage::data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorMessage.data)
  return has_data()
      ? *message_.data_
      : ::naki3d::common::protocol::SensorDataMessage::default_instance();
}
::naki3d::common::protocol::SensorDataMessage* SensorMessage::mutable_data() {
  if (!has_data()) {
    clear_message();
    set_has_data();
    message_.data_ = new ::naki3d::common::protocol::SensorDataMessage;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorMessage.data)
  return message_.data_;
}
::naki3d::common::protocol::SensorDataMessage* SensorMessage::release_data() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorMessage.data)
  if (has_data()) {
    clear_has_message();
    ::naki3d::common::protocol::SensorDataMessage* temp = message_.data_;
    message_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SensorMessage::set_allocated_data(::naki3d::common::protocol::SensorDataMessage* data) {
  clear_message();
  if (data) {
    set_has_data();
    message_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorMessage.data)
}

// optional .naki3d.common.protocol.SensorDescriptor descriptor = 2;
bool SensorMessage::has_descriptor() const {
  return message_case() == kDescriptor;
}
void SensorMessage::set_has_descriptor() {
  _oneof_case_[0] = kDescriptor;
}
void SensorMessage::clear_descriptor() {
  if (has_descriptor()) {
    delete message_.descriptor_;
    clear_has_message();
  }
}
 const ::naki3d::common::protocol::SensorDescriptor& SensorMessage::descriptor() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorMessage.descriptor)
  return has_descriptor()
      ? *message_.descriptor_
      : ::naki3d::common::protocol::SensorDescriptor::default_instance();
}
::naki3d::common::protocol::SensorDescriptor* SensorMessage::mutable_descriptor() {
  if (!has_descriptor()) {
    clear_message();
    set_has_descriptor();
    message_.descriptor_ = new ::naki3d::common::protocol::SensorDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorMessage.descriptor)
  return message_.descriptor_;
}
::naki3d::common::protocol::SensorDescriptor* SensorMessage::release_descriptor() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorMessage.descriptor)
  if (has_descriptor()) {
    clear_has_message();
    ::naki3d::common::protocol::SensorDescriptor* temp = message_.descriptor_;
    message_.descriptor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SensorMessage::set_allocated_descriptor(::naki3d::common::protocol::SensorDescriptor* descriptor) {
  clear_message();
  if (descriptor) {
    set_has_descriptor();
    message_.descriptor_ = descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorMessage.descriptor)
}

bool SensorMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
void SensorMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
SensorMessage::MessageCase SensorMessage::message_case() const {
  return SensorMessage::MessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorControlMessage::kHostnameFieldNumber;
const int SensorControlMessage::kCecMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorControlMessage::SensorControlMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:naki3d.common.protocol.SensorControlMessage)
}

void SensorControlMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  SensorControlMessage_default_oneof_instance_->cec_message_ = const_cast< ::naki3d::common::protocol::CECMessage*>(&::naki3d::common::protocol::CECMessage::default_instance());
}

SensorControlMessage::SensorControlMessage(const SensorControlMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.SensorControlMessage)
}

void SensorControlMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}

SensorControlMessage::~SensorControlMessage() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.SensorControlMessage)
  SharedDtor();
}

void SensorControlMessage::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_message()) {
    clear_message();
  }
  if (this != default_instance_) {
  }
}

void SensorControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorControlMessage_descriptor_;
}

const SensorControlMessage& SensorControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensors_2eproto();
  return *default_instance_;
}

SensorControlMessage* SensorControlMessage::default_instance_ = NULL;

SensorControlMessage* SensorControlMessage::New(::google::protobuf::Arena* arena) const {
  SensorControlMessage* n = new SensorControlMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorControlMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:naki3d.common.protocol.SensorControlMessage)
  switch(message_case()) {
    case kCecMessage: {
      delete message_.cec_message_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SensorControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.SensorControlMessage)
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_message();
}

bool SensorControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naki3d.common.protocol.SensorControlMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "naki3d.common.protocol.SensorControlMessage.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_cec_message;
        break;
      }

      // optional .naki3d.common.protocol.CECMessage cec_message = 17;
      case 17: {
        if (tag == 138) {
         parse_cec_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cec_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naki3d.common.protocol.SensorControlMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naki3d.common.protocol.SensorControlMessage)
  return false;
#undef DO_
}

void SensorControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naki3d.common.protocol.SensorControlMessage)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorControlMessage.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional .naki3d.common.protocol.CECMessage cec_message = 17;
  if (has_cec_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *message_.cec_message_, output);
  }

  // @@protoc_insertion_point(serialize_end:naki3d.common.protocol.SensorControlMessage)
}

::google::protobuf::uint8* SensorControlMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.SensorControlMessage)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.SensorControlMessage.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional .naki3d.common.protocol.CECMessage cec_message = 17;
  if (has_cec_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *message_.cec_message_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.SensorControlMessage)
  return target;
}

int SensorControlMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.SensorControlMessage)
  int total_size = 0;

  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  switch (message_case()) {
    // optional .naki3d.common.protocol.CECMessage cec_message = 17;
    case kCecMessage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.cec_message_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.SensorControlMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorControlMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorControlMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.SensorControlMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.SensorControlMessage)
    MergeFrom(*source);
  }
}

void SensorControlMessage::MergeFrom(const SensorControlMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.SensorControlMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.message_case()) {
    case kCecMessage: {
      mutable_cec_message()->::naki3d::common::protocol::CECMessage::MergeFrom(from.cec_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
}

void SensorControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.SensorControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorControlMessage::CopyFrom(const SensorControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.SensorControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorControlMessage::IsInitialized() const {

  return true;
}

void SensorControlMessage::Swap(SensorControlMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorControlMessage::InternalSwap(SensorControlMessage* other) {
  hostname_.Swap(&other->hostname_);
  std::swap(message_, other->message_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorControlMessage_descriptor_;
  metadata.reflection = SensorControlMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorControlMessage

// optional string hostname = 1;
void SensorControlMessage::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorControlMessage::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorControlMessage.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorControlMessage::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorControlMessage.hostname)
}
 void SensorControlMessage::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorControlMessage.hostname)
}
 void SensorControlMessage::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorControlMessage.hostname)
}
 ::std::string* SensorControlMessage::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorControlMessage.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorControlMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorControlMessage.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorControlMessage::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorControlMessage.hostname)
}

// optional .naki3d.common.protocol.CECMessage cec_message = 17;
bool SensorControlMessage::has_cec_message() const {
  return message_case() == kCecMessage;
}
void SensorControlMessage::set_has_cec_message() {
  _oneof_case_[0] = kCecMessage;
}
void SensorControlMessage::clear_cec_message() {
  if (has_cec_message()) {
    delete message_.cec_message_;
    clear_has_message();
  }
}
 const ::naki3d::common::protocol::CECMessage& SensorControlMessage::cec_message() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorControlMessage.cec_message)
  return has_cec_message()
      ? *message_.cec_message_
      : ::naki3d::common::protocol::CECMessage::default_instance();
}
::naki3d::common::protocol::CECMessage* SensorControlMessage::mutable_cec_message() {
  if (!has_cec_message()) {
    clear_message();
    set_has_cec_message();
    message_.cec_message_ = new ::naki3d::common::protocol::CECMessage;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorControlMessage.cec_message)
  return message_.cec_message_;
}
::naki3d::common::protocol::CECMessage* SensorControlMessage::release_cec_message() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorControlMessage.cec_message)
  if (has_cec_message()) {
    clear_has_message();
    ::naki3d::common::protocol::CECMessage* temp = message_.cec_message_;
    message_.cec_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SensorControlMessage::set_allocated_cec_message(::naki3d::common::protocol::CECMessage* cec_message) {
  clear_message();
  if (cec_message) {
    set_has_cec_message();
    message_.cec_message_ = cec_message;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorControlMessage.cec_message)
}

bool SensorControlMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
void SensorControlMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
SensorControlMessage::MessageCase SensorControlMessage::message_case() const {
  return SensorControlMessage::MessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

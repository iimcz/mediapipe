// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mouse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mouse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mouse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mouse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mouse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mouse_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class MouseButtonData;
struct MouseButtonDataDefaultTypeInternal;
extern MouseButtonDataDefaultTypeInternal _MouseButtonData_default_instance_;
class MouseMoveData;
struct MouseMoveDataDefaultTypeInternal;
extern MouseMoveDataDefaultTypeInternal _MouseMoveData_default_instance_;
class MouseScrollData;
struct MouseScrollDataDefaultTypeInternal;
extern MouseScrollDataDefaultTypeInternal _MouseScrollData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::MouseButtonData* Arena::CreateMaybeMessage<::naki3d::common::protocol::MouseButtonData>(Arena*);
template<> ::naki3d::common::protocol::MouseMoveData* Arena::CreateMaybeMessage<::naki3d::common::protocol::MouseMoveData>(Arena*);
template<> ::naki3d::common::protocol::MouseScrollData* Arena::CreateMaybeMessage<::naki3d::common::protocol::MouseScrollData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

enum MouseActionType : int {
  BUTTON_UP = 0,
  BUTTON_DOWN = 1,
  MouseActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MouseActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MouseActionType_IsValid(int value);
constexpr MouseActionType MouseActionType_MIN = BUTTON_UP;
constexpr MouseActionType MouseActionType_MAX = BUTTON_DOWN;
constexpr int MouseActionType_ARRAYSIZE = MouseActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseActionType_descriptor();
template<typename T>
inline const std::string& MouseActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MouseActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MouseActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MouseActionType_descriptor(), enum_t_value);
}
inline bool MouseActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MouseActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MouseActionType>(
    MouseActionType_descriptor(), name, value);
}
enum MouseScrollType : int {
  SCROLL_UP = 0,
  SCROLL_DOWN = 1,
  MouseScrollType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MouseScrollType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MouseScrollType_IsValid(int value);
constexpr MouseScrollType MouseScrollType_MIN = SCROLL_UP;
constexpr MouseScrollType MouseScrollType_MAX = SCROLL_DOWN;
constexpr int MouseScrollType_ARRAYSIZE = MouseScrollType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseScrollType_descriptor();
template<typename T>
inline const std::string& MouseScrollType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MouseScrollType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MouseScrollType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MouseScrollType_descriptor(), enum_t_value);
}
inline bool MouseScrollType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MouseScrollType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MouseScrollType>(
    MouseScrollType_descriptor(), name, value);
}
// ===================================================================

class MouseMoveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.MouseMoveData) */ {
 public:
  inline MouseMoveData() : MouseMoveData(nullptr) {}
  ~MouseMoveData() override;
  explicit PROTOBUF_CONSTEXPR MouseMoveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MouseMoveData(const MouseMoveData& from);
  MouseMoveData(MouseMoveData&& from) noexcept
    : MouseMoveData() {
    *this = ::std::move(from);
  }

  inline MouseMoveData& operator=(const MouseMoveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseMoveData& operator=(MouseMoveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MouseMoveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MouseMoveData* internal_default_instance() {
    return reinterpret_cast<const MouseMoveData*>(
               &_MouseMoveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MouseMoveData& a, MouseMoveData& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseMoveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseMoveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MouseMoveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MouseMoveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MouseMoveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MouseMoveData& from) {
    MouseMoveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseMoveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.MouseMoveData";
  }
  protected:
  explicit MouseMoveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbsoluteFieldNumber = 1,
    kRelativeFieldNumber = 2,
  };
  // .naki3d.common.protocol.Vector2 absolute = 1;
  bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  void clear_absolute();
  const ::naki3d::common::protocol::Vector2& absolute() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::Vector2* release_absolute();
  ::naki3d::common::protocol::Vector2* mutable_absolute();
  void set_allocated_absolute(::naki3d::common::protocol::Vector2* absolute);
  private:
  const ::naki3d::common::protocol::Vector2& _internal_absolute() const;
  ::naki3d::common::protocol::Vector2* _internal_mutable_absolute();
  public:
  void unsafe_arena_set_allocated_absolute(
      ::naki3d::common::protocol::Vector2* absolute);
  ::naki3d::common::protocol::Vector2* unsafe_arena_release_absolute();

  // .naki3d.common.protocol.Vector2 relative = 2;
  bool has_relative() const;
  private:
  bool _internal_has_relative() const;
  public:
  void clear_relative();
  const ::naki3d::common::protocol::Vector2& relative() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::Vector2* release_relative();
  ::naki3d::common::protocol::Vector2* mutable_relative();
  void set_allocated_relative(::naki3d::common::protocol::Vector2* relative);
  private:
  const ::naki3d::common::protocol::Vector2& _internal_relative() const;
  ::naki3d::common::protocol::Vector2* _internal_mutable_relative();
  public:
  void unsafe_arena_set_allocated_relative(
      ::naki3d::common::protocol::Vector2* relative);
  ::naki3d::common::protocol::Vector2* unsafe_arena_release_relative();

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.MouseMoveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::naki3d::common::protocol::Vector2* absolute_;
    ::naki3d::common::protocol::Vector2* relative_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mouse_2eproto;
};
// -------------------------------------------------------------------

class MouseButtonData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.MouseButtonData) */ {
 public:
  inline MouseButtonData() : MouseButtonData(nullptr) {}
  ~MouseButtonData() override;
  explicit PROTOBUF_CONSTEXPR MouseButtonData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MouseButtonData(const MouseButtonData& from);
  MouseButtonData(MouseButtonData&& from) noexcept
    : MouseButtonData() {
    *this = ::std::move(from);
  }

  inline MouseButtonData& operator=(const MouseButtonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseButtonData& operator=(MouseButtonData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MouseButtonData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MouseButtonData* internal_default_instance() {
    return reinterpret_cast<const MouseButtonData*>(
               &_MouseButtonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MouseButtonData& a, MouseButtonData& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseButtonData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseButtonData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MouseButtonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MouseButtonData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MouseButtonData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MouseButtonData& from) {
    MouseButtonData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseButtonData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.MouseButtonData";
  }
  protected:
  explicit MouseButtonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kButtonIdFieldNumber = 2,
  };
  // .naki3d.common.protocol.MouseActionType type = 1;
  void clear_type();
  ::naki3d::common::protocol::MouseActionType type() const;
  void set_type(::naki3d::common::protocol::MouseActionType value);
  private:
  ::naki3d::common::protocol::MouseActionType _internal_type() const;
  void _internal_set_type(::naki3d::common::protocol::MouseActionType value);
  public:

  // int32 button_id = 2;
  void clear_button_id();
  int32_t button_id() const;
  void set_button_id(int32_t value);
  private:
  int32_t _internal_button_id() const;
  void _internal_set_button_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.MouseButtonData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int32_t button_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mouse_2eproto;
};
// -------------------------------------------------------------------

class MouseScrollData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.MouseScrollData) */ {
 public:
  inline MouseScrollData() : MouseScrollData(nullptr) {}
  ~MouseScrollData() override;
  explicit PROTOBUF_CONSTEXPR MouseScrollData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MouseScrollData(const MouseScrollData& from);
  MouseScrollData(MouseScrollData&& from) noexcept
    : MouseScrollData() {
    *this = ::std::move(from);
  }

  inline MouseScrollData& operator=(const MouseScrollData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseScrollData& operator=(MouseScrollData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MouseScrollData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MouseScrollData* internal_default_instance() {
    return reinterpret_cast<const MouseScrollData*>(
               &_MouseScrollData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MouseScrollData& a, MouseScrollData& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseScrollData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseScrollData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MouseScrollData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MouseScrollData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MouseScrollData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MouseScrollData& from) {
    MouseScrollData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseScrollData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.MouseScrollData";
  }
  protected:
  explicit MouseScrollData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .naki3d.common.protocol.MouseScrollType type = 1;
  void clear_type();
  ::naki3d::common::protocol::MouseScrollType type() const;
  void set_type(::naki3d::common::protocol::MouseScrollType value);
  private:
  ::naki3d::common::protocol::MouseScrollType _internal_type() const;
  void _internal_set_type(::naki3d::common::protocol::MouseScrollType value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.MouseScrollData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mouse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MouseMoveData

// .naki3d.common.protocol.Vector2 absolute = 1;
inline bool MouseMoveData::_internal_has_absolute() const {
  return this != internal_default_instance() && _impl_.absolute_ != nullptr;
}
inline bool MouseMoveData::has_absolute() const {
  return _internal_has_absolute();
}
inline const ::naki3d::common::protocol::Vector2& MouseMoveData::_internal_absolute() const {
  const ::naki3d::common::protocol::Vector2* p = _impl_.absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::naki3d::common::protocol::Vector2&>(
      ::naki3d::common::protocol::_Vector2_default_instance_);
}
inline const ::naki3d::common::protocol::Vector2& MouseMoveData::absolute() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MouseMoveData.absolute)
  return _internal_absolute();
}
inline void MouseMoveData::unsafe_arena_set_allocated_absolute(
    ::naki3d::common::protocol::Vector2* absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  _impl_.absolute_ = absolute;
  if (absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.MouseMoveData.absolute)
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::release_absolute() {
  
  ::naki3d::common::protocol::Vector2* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::unsafe_arena_release_absolute() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.MouseMoveData.absolute)
  
  ::naki3d::common::protocol::Vector2* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::_internal_mutable_absolute() {
  
  if (_impl_.absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::Vector2>(GetArenaForAllocation());
    _impl_.absolute_ = p;
  }
  return _impl_.absolute_;
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::mutable_absolute() {
  ::naki3d::common::protocol::Vector2* _msg = _internal_mutable_absolute();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.MouseMoveData.absolute)
  return _msg;
}
inline void MouseMoveData::set_allocated_absolute(::naki3d::common::protocol::Vector2* absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  if (absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute));
    if (message_arena != submessage_arena) {
      absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_ = absolute;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.MouseMoveData.absolute)
}

// .naki3d.common.protocol.Vector2 relative = 2;
inline bool MouseMoveData::_internal_has_relative() const {
  return this != internal_default_instance() && _impl_.relative_ != nullptr;
}
inline bool MouseMoveData::has_relative() const {
  return _internal_has_relative();
}
inline const ::naki3d::common::protocol::Vector2& MouseMoveData::_internal_relative() const {
  const ::naki3d::common::protocol::Vector2* p = _impl_.relative_;
  return p != nullptr ? *p : reinterpret_cast<const ::naki3d::common::protocol::Vector2&>(
      ::naki3d::common::protocol::_Vector2_default_instance_);
}
inline const ::naki3d::common::protocol::Vector2& MouseMoveData::relative() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MouseMoveData.relative)
  return _internal_relative();
}
inline void MouseMoveData::unsafe_arena_set_allocated_relative(
    ::naki3d::common::protocol::Vector2* relative) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_);
  }
  _impl_.relative_ = relative;
  if (relative) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.MouseMoveData.relative)
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::release_relative() {
  
  ::naki3d::common::protocol::Vector2* temp = _impl_.relative_;
  _impl_.relative_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::unsafe_arena_release_relative() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.MouseMoveData.relative)
  
  ::naki3d::common::protocol::Vector2* temp = _impl_.relative_;
  _impl_.relative_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::_internal_mutable_relative() {
  
  if (_impl_.relative_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::Vector2>(GetArenaForAllocation());
    _impl_.relative_ = p;
  }
  return _impl_.relative_;
}
inline ::naki3d::common::protocol::Vector2* MouseMoveData::mutable_relative() {
  ::naki3d::common::protocol::Vector2* _msg = _internal_mutable_relative();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.MouseMoveData.relative)
  return _msg;
}
inline void MouseMoveData::set_allocated_relative(::naki3d::common::protocol::Vector2* relative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_);
  }
  if (relative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative));
    if (message_arena != submessage_arena) {
      relative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relative_ = relative;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.MouseMoveData.relative)
}

// -------------------------------------------------------------------

// MouseButtonData

// .naki3d.common.protocol.MouseActionType type = 1;
inline void MouseButtonData::clear_type() {
  _impl_.type_ = 0;
}
inline ::naki3d::common::protocol::MouseActionType MouseButtonData::_internal_type() const {
  return static_cast< ::naki3d::common::protocol::MouseActionType >(_impl_.type_);
}
inline ::naki3d::common::protocol::MouseActionType MouseButtonData::type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MouseButtonData.type)
  return _internal_type();
}
inline void MouseButtonData::_internal_set_type(::naki3d::common::protocol::MouseActionType value) {
  
  _impl_.type_ = value;
}
inline void MouseButtonData::set_type(::naki3d::common::protocol::MouseActionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.MouseButtonData.type)
}

// int32 button_id = 2;
inline void MouseButtonData::clear_button_id() {
  _impl_.button_id_ = 0;
}
inline int32_t MouseButtonData::_internal_button_id() const {
  return _impl_.button_id_;
}
inline int32_t MouseButtonData::button_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MouseButtonData.button_id)
  return _internal_button_id();
}
inline void MouseButtonData::_internal_set_button_id(int32_t value) {
  
  _impl_.button_id_ = value;
}
inline void MouseButtonData::set_button_id(int32_t value) {
  _internal_set_button_id(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.MouseButtonData.button_id)
}

// -------------------------------------------------------------------

// MouseScrollData

// .naki3d.common.protocol.MouseScrollType type = 1;
inline void MouseScrollData::clear_type() {
  _impl_.type_ = 0;
}
inline ::naki3d::common::protocol::MouseScrollType MouseScrollData::_internal_type() const {
  return static_cast< ::naki3d::common::protocol::MouseScrollType >(_impl_.type_);
}
inline ::naki3d::common::protocol::MouseScrollType MouseScrollData::type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MouseScrollData.type)
  return _internal_type();
}
inline void MouseScrollData::_internal_set_type(::naki3d::common::protocol::MouseScrollType value) {
  
  _impl_.type_ = value;
}
inline void MouseScrollData::set_type(::naki3d::common::protocol::MouseScrollType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.MouseScrollData.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::naki3d::common::protocol::MouseActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::MouseActionType>() {
  return ::naki3d::common::protocol::MouseActionType_descriptor();
}
template <> struct is_proto_enum< ::naki3d::common::protocol::MouseScrollType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::MouseScrollType>() {
  return ::naki3d::common::protocol::MouseScrollType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mouse_2eproto

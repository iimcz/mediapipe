// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#ifndef PROTOBUF_sensors_2eproto__INCLUDED
#define PROTOBUF_sensors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cec.pb.h"
#include "discovery.pb.h"
#include "types.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sensors_2eproto();
void protobuf_AssignDesc_sensors_2eproto();
void protobuf_ShutdownFile_sensors_2eproto();

class SensorControlMessage;
class SensorDataMessage;
class SensorMessage;

// ===================================================================

class SensorDataMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorDataMessage) */ {
 public:
  SensorDataMessage();
  virtual ~SensorDataMessage();

  SensorDataMessage(const SensorDataMessage& from);

  inline SensorDataMessage& operator=(const SensorDataMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorDataMessage& default_instance();

  enum DataCase {
    kVoid = 16,
    kBool = 17,
    kInteger = 18,
    kFloat = 19,
    kString = 20,
    kVector2 = 21,
    kVector3 = 22,
    DATA_NOT_SET = 0,
  };

  void Swap(SensorDataMessage* other);

  // implements Message ----------------------------------------------

  inline SensorDataMessage* New() const { return New(NULL); }

  SensorDataMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorDataMessage& from);
  void MergeFrom(const SensorDataMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorDataMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional .google.protobuf.Empty void = 16;
  bool has_void_() const;
  void clear_void_();
  static const int kVoidFieldNumber = 16;
  const ::google::protobuf::Empty& void_() const;
  ::google::protobuf::Empty* mutable_void_();
  ::google::protobuf::Empty* release_void_();
  void set_allocated_void_(::google::protobuf::Empty* void_);

  // optional bool bool = 17;
  private:
  bool has_bool_() const;
  public:
  void clear_bool_();
  static const int kBoolFieldNumber = 17;
  bool bool_() const;
  void set_bool_(bool value);

  // optional int32 integer = 18;
  private:
  bool has_integer() const;
  public:
  void clear_integer();
  static const int kIntegerFieldNumber = 18;
  ::google::protobuf::int32 integer() const;
  void set_integer(::google::protobuf::int32 value);

  // optional float float = 19;
  private:
  bool has_float_() const;
  public:
  void clear_float_();
  static const int kFloatFieldNumber = 19;
  float float_() const;
  void set_float_(float value);

  // optional string string = 20;
  private:
  bool has_string() const;
  public:
  void clear_string();
  static const int kStringFieldNumber = 20;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // optional .naki3d.common.protocol.Vector2Data vector2 = 21;
  bool has_vector2() const;
  void clear_vector2();
  static const int kVector2FieldNumber = 21;
  const ::naki3d::common::protocol::Vector2Data& vector2() const;
  ::naki3d::common::protocol::Vector2Data* mutable_vector2();
  ::naki3d::common::protocol::Vector2Data* release_vector2();
  void set_allocated_vector2(::naki3d::common::protocol::Vector2Data* vector2);

  // optional .naki3d.common.protocol.Vector3Data vector3 = 22;
  bool has_vector3() const;
  void clear_vector3();
  static const int kVector3FieldNumber = 22;
  const ::naki3d::common::protocol::Vector3Data& vector3() const;
  ::naki3d::common::protocol::Vector3Data* mutable_vector3();
  ::naki3d::common::protocol::Vector3Data* release_vector3();
  void set_allocated_vector3(::naki3d::common::protocol::Vector3Data* vector3);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorDataMessage)
 private:
  inline void set_has_void_();
  inline void set_has_bool_();
  inline void set_has_integer();
  inline void set_has_float_();
  inline void set_has_string();
  inline void set_has_vector2();
  inline void set_has_vector3();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint64 timestamp_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::Empty* void__;
    bool bool__;
    ::google::protobuf::int32 integer_;
    float float__;
    ::google::protobuf::internal::ArenaStringPtr string_;
    ::naki3d::common::protocol::Vector2Data* vector2_;
    ::naki3d::common::protocol::Vector3Data* vector3_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_sensors_2eproto();
  friend void protobuf_AssignDesc_sensors_2eproto();
  friend void protobuf_ShutdownFile_sensors_2eproto();

  void InitAsDefaultInstance();
  static SensorDataMessage* default_instance_;
};
// -------------------------------------------------------------------

class SensorMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorMessage) */ {
 public:
  SensorMessage();
  virtual ~SensorMessage();

  SensorMessage(const SensorMessage& from);

  inline SensorMessage& operator=(const SensorMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorMessage& default_instance();

  enum MessageCase {
    kData = 1,
    kDescriptor = 2,
    MESSAGE_NOT_SET = 0,
  };

  void Swap(SensorMessage* other);

  // implements Message ----------------------------------------------

  inline SensorMessage* New() const { return New(NULL); }

  SensorMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorMessage& from);
  void MergeFrom(const SensorMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .naki3d.common.protocol.SensorDataMessage data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::naki3d::common::protocol::SensorDataMessage& data() const;
  ::naki3d::common::protocol::SensorDataMessage* mutable_data();
  ::naki3d::common::protocol::SensorDataMessage* release_data();
  void set_allocated_data(::naki3d::common::protocol::SensorDataMessage* data);

  // optional .naki3d.common.protocol.SensorDescriptor descriptor = 2;
  bool has_descriptor() const;
  void clear_descriptor();
  static const int kDescriptorFieldNumber = 2;
  const ::naki3d::common::protocol::SensorDescriptor& descriptor() const;
  ::naki3d::common::protocol::SensorDescriptor* mutable_descriptor();
  ::naki3d::common::protocol::SensorDescriptor* release_descriptor();
  void set_allocated_descriptor(::naki3d::common::protocol::SensorDescriptor* descriptor);

  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorMessage)
 private:
  inline void set_has_data();
  inline void set_has_descriptor();

  inline bool has_message() const;
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union MessageUnion {
    MessageUnion() {}
    ::naki3d::common::protocol::SensorDataMessage* data_;
    ::naki3d::common::protocol::SensorDescriptor* descriptor_;
  } message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_sensors_2eproto();
  friend void protobuf_AssignDesc_sensors_2eproto();
  friend void protobuf_ShutdownFile_sensors_2eproto();

  void InitAsDefaultInstance();
  static SensorMessage* default_instance_;
};
// -------------------------------------------------------------------

class SensorControlMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorControlMessage) */ {
 public:
  SensorControlMessage();
  virtual ~SensorControlMessage();

  SensorControlMessage(const SensorControlMessage& from);

  inline SensorControlMessage& operator=(const SensorControlMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorControlMessage& default_instance();

  enum MessageCase {
    kCecMessage = 17,
    MESSAGE_NOT_SET = 0,
  };

  void Swap(SensorControlMessage* other);

  // implements Message ----------------------------------------------

  inline SensorControlMessage* New() const { return New(NULL); }

  SensorControlMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorControlMessage& from);
  void MergeFrom(const SensorControlMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorControlMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hostname = 1;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional .naki3d.common.protocol.CECMessage cec_message = 17;
  bool has_cec_message() const;
  void clear_cec_message();
  static const int kCecMessageFieldNumber = 17;
  const ::naki3d::common::protocol::CECMessage& cec_message() const;
  ::naki3d::common::protocol::CECMessage* mutable_cec_message();
  ::naki3d::common::protocol::CECMessage* release_cec_message();
  void set_allocated_cec_message(::naki3d::common::protocol::CECMessage* cec_message);

  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorControlMessage)
 private:
  inline void set_has_cec_message();

  inline bool has_message() const;
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  union MessageUnion {
    MessageUnion() {}
    ::naki3d::common::protocol::CECMessage* cec_message_;
  } message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_sensors_2eproto();
  friend void protobuf_AssignDesc_sensors_2eproto();
  friend void protobuf_ShutdownFile_sensors_2eproto();

  void InitAsDefaultInstance();
  static SensorControlMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorDataMessage

// optional string path = 1;
inline void SensorDataMessage::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorDataMessage::path() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDataMessage::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.path)
}
inline void SensorDataMessage::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDataMessage.path)
}
inline void SensorDataMessage::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDataMessage.path)
}
inline ::std::string* SensorDataMessage::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorDataMessage::release_path() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDataMessage::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.path)
}

// optional uint64 timestamp = 2;
inline void SensorDataMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SensorDataMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.timestamp)
  return timestamp_;
}
inline void SensorDataMessage::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.timestamp)
}

// optional .google.protobuf.Empty void = 16;
inline bool SensorDataMessage::has_void_() const {
  return data_case() == kVoid;
}
inline void SensorDataMessage::set_has_void_() {
  _oneof_case_[0] = kVoid;
}
inline void SensorDataMessage::clear_void_() {
  if (has_void_()) {
    delete data_.void__;
    clear_has_data();
  }
}
inline  const ::google::protobuf::Empty& SensorDataMessage::void_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.void)
  return has_void_()
      ? *data_.void__
      : ::google::protobuf::Empty::default_instance();
}
inline ::google::protobuf::Empty* SensorDataMessage::mutable_void_() {
  if (!has_void_()) {
    clear_data();
    set_has_void_();
    data_.void__ = new ::google::protobuf::Empty;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.void)
  return data_.void__;
}
inline ::google::protobuf::Empty* SensorDataMessage::release_void_() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.void)
  if (has_void_()) {
    clear_has_data();
    ::google::protobuf::Empty* temp = data_.void__;
    data_.void__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SensorDataMessage::set_allocated_void_(::google::protobuf::Empty* void_) {
  clear_data();
  if (void_) {
    if (static_cast< ::google::protobuf::Empty*>(void_)->GetArena() != NULL) {
      ::google::protobuf::Empty* new_void_ = new ::google::protobuf::Empty;
      new_void_->CopyFrom(*void_);
      void_ = new_void_;
    }
    set_has_void_();
    data_.void__ = void_;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.void)
}

// optional bool bool = 17;
inline bool SensorDataMessage::has_bool_() const {
  return data_case() == kBool;
}
inline void SensorDataMessage::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void SensorDataMessage::clear_bool_() {
  if (has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
inline bool SensorDataMessage::bool_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.bool)
  if (has_bool_()) {
    return data_.bool__;
  }
  return false;
}
inline void SensorDataMessage::set_bool_(bool value) {
  if (!has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.bool)
}

// optional int32 integer = 18;
inline bool SensorDataMessage::has_integer() const {
  return data_case() == kInteger;
}
inline void SensorDataMessage::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void SensorDataMessage::clear_integer() {
  if (has_integer()) {
    data_.integer_ = 0;
    clear_has_data();
  }
}
inline ::google::protobuf::int32 SensorDataMessage::integer() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.integer)
  if (has_integer()) {
    return data_.integer_;
  }
  return 0;
}
inline void SensorDataMessage::set_integer(::google::protobuf::int32 value) {
  if (!has_integer()) {
    clear_data();
    set_has_integer();
  }
  data_.integer_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.integer)
}

// optional float float = 19;
inline bool SensorDataMessage::has_float_() const {
  return data_case() == kFloat;
}
inline void SensorDataMessage::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void SensorDataMessage::clear_float_() {
  if (has_float_()) {
    data_.float__ = 0;
    clear_has_data();
  }
}
inline float SensorDataMessage::float_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.float)
  if (has_float_()) {
    return data_.float__;
  }
  return 0;
}
inline void SensorDataMessage::set_float_(float value) {
  if (!has_float_()) {
    clear_data();
    set_has_float_();
  }
  data_.float__ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.float)
}

// optional string string = 20;
inline bool SensorDataMessage::has_string() const {
  return data_case() == kString;
}
inline void SensorDataMessage::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void SensorDataMessage::clear_string() {
  if (has_string()) {
    data_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& SensorDataMessage::string() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.string)
  if (has_string()) {
    return data_.string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SensorDataMessage::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.string)
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.string)
}
inline void SensorDataMessage::set_string(const char* value) {
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorDataMessage.string)
}
inline void SensorDataMessage::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorDataMessage.string)
}
inline ::std::string* SensorDataMessage::mutable_string() {
  if (!has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.string)
  return data_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorDataMessage::release_string() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.string)
  if (has_string()) {
    clear_has_data();
    return data_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SensorDataMessage::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    data_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (string != NULL) {
    set_has_string();
    data_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string);
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.string)
}

// optional .naki3d.common.protocol.Vector2Data vector2 = 21;
inline bool SensorDataMessage::has_vector2() const {
  return data_case() == kVector2;
}
inline void SensorDataMessage::set_has_vector2() {
  _oneof_case_[0] = kVector2;
}
inline void SensorDataMessage::clear_vector2() {
  if (has_vector2()) {
    delete data_.vector2_;
    clear_has_data();
  }
}
inline  const ::naki3d::common::protocol::Vector2Data& SensorDataMessage::vector2() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.vector2)
  return has_vector2()
      ? *data_.vector2_
      : ::naki3d::common::protocol::Vector2Data::default_instance();
}
inline ::naki3d::common::protocol::Vector2Data* SensorDataMessage::mutable_vector2() {
  if (!has_vector2()) {
    clear_data();
    set_has_vector2();
    data_.vector2_ = new ::naki3d::common::protocol::Vector2Data;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.vector2)
  return data_.vector2_;
}
inline ::naki3d::common::protocol::Vector2Data* SensorDataMessage::release_vector2() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.vector2)
  if (has_vector2()) {
    clear_has_data();
    ::naki3d::common::protocol::Vector2Data* temp = data_.vector2_;
    data_.vector2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SensorDataMessage::set_allocated_vector2(::naki3d::common::protocol::Vector2Data* vector2) {
  clear_data();
  if (vector2) {
    set_has_vector2();
    data_.vector2_ = vector2;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.vector2)
}

// optional .naki3d.common.protocol.Vector3Data vector3 = 22;
inline bool SensorDataMessage::has_vector3() const {
  return data_case() == kVector3;
}
inline void SensorDataMessage::set_has_vector3() {
  _oneof_case_[0] = kVector3;
}
inline void SensorDataMessage::clear_vector3() {
  if (has_vector3()) {
    delete data_.vector3_;
    clear_has_data();
  }
}
inline  const ::naki3d::common::protocol::Vector3Data& SensorDataMessage::vector3() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.vector3)
  return has_vector3()
      ? *data_.vector3_
      : ::naki3d::common::protocol::Vector3Data::default_instance();
}
inline ::naki3d::common::protocol::Vector3Data* SensorDataMessage::mutable_vector3() {
  if (!has_vector3()) {
    clear_data();
    set_has_vector3();
    data_.vector3_ = new ::naki3d::common::protocol::Vector3Data;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.vector3)
  return data_.vector3_;
}
inline ::naki3d::common::protocol::Vector3Data* SensorDataMessage::release_vector3() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.vector3)
  if (has_vector3()) {
    clear_has_data();
    ::naki3d::common::protocol::Vector3Data* temp = data_.vector3_;
    data_.vector3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SensorDataMessage::set_allocated_vector3(::naki3d::common::protocol::Vector3Data* vector3) {
  clear_data();
  if (vector3) {
    set_has_vector3();
    data_.vector3_ = vector3;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.vector3)
}

inline bool SensorDataMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SensorDataMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SensorDataMessage::DataCase SensorDataMessage::data_case() const {
  return SensorDataMessage::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SensorMessage

// optional .naki3d.common.protocol.SensorDataMessage data = 1;
inline bool SensorMessage::has_data() const {
  return message_case() == kData;
}
inline void SensorMessage::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void SensorMessage::clear_data() {
  if (has_data()) {
    delete message_.data_;
    clear_has_message();
  }
}
inline  const ::naki3d::common::protocol::SensorDataMessage& SensorMessage::data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorMessage.data)
  return has_data()
      ? *message_.data_
      : ::naki3d::common::protocol::SensorDataMessage::default_instance();
}
inline ::naki3d::common::protocol::SensorDataMessage* SensorMessage::mutable_data() {
  if (!has_data()) {
    clear_message();
    set_has_data();
    message_.data_ = new ::naki3d::common::protocol::SensorDataMessage;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorMessage.data)
  return message_.data_;
}
inline ::naki3d::common::protocol::SensorDataMessage* SensorMessage::release_data() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorMessage.data)
  if (has_data()) {
    clear_has_message();
    ::naki3d::common::protocol::SensorDataMessage* temp = message_.data_;
    message_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SensorMessage::set_allocated_data(::naki3d::common::protocol::SensorDataMessage* data) {
  clear_message();
  if (data) {
    set_has_data();
    message_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorMessage.data)
}

// optional .naki3d.common.protocol.SensorDescriptor descriptor = 2;
inline bool SensorMessage::has_descriptor() const {
  return message_case() == kDescriptor;
}
inline void SensorMessage::set_has_descriptor() {
  _oneof_case_[0] = kDescriptor;
}
inline void SensorMessage::clear_descriptor() {
  if (has_descriptor()) {
    delete message_.descriptor_;
    clear_has_message();
  }
}
inline  const ::naki3d::common::protocol::SensorDescriptor& SensorMessage::descriptor() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorMessage.descriptor)
  return has_descriptor()
      ? *message_.descriptor_
      : ::naki3d::common::protocol::SensorDescriptor::default_instance();
}
inline ::naki3d::common::protocol::SensorDescriptor* SensorMessage::mutable_descriptor() {
  if (!has_descriptor()) {
    clear_message();
    set_has_descriptor();
    message_.descriptor_ = new ::naki3d::common::protocol::SensorDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorMessage.descriptor)
  return message_.descriptor_;
}
inline ::naki3d::common::protocol::SensorDescriptor* SensorMessage::release_descriptor() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorMessage.descriptor)
  if (has_descriptor()) {
    clear_has_message();
    ::naki3d::common::protocol::SensorDescriptor* temp = message_.descriptor_;
    message_.descriptor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SensorMessage::set_allocated_descriptor(::naki3d::common::protocol::SensorDescriptor* descriptor) {
  clear_message();
  if (descriptor) {
    set_has_descriptor();
    message_.descriptor_ = descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorMessage.descriptor)
}

inline bool SensorMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void SensorMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline SensorMessage::MessageCase SensorMessage::message_case() const {
  return SensorMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SensorControlMessage

// optional string hostname = 1;
inline void SensorControlMessage::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorControlMessage::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorControlMessage.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorControlMessage::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorControlMessage.hostname)
}
inline void SensorControlMessage::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SensorControlMessage.hostname)
}
inline void SensorControlMessage::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SensorControlMessage.hostname)
}
inline ::std::string* SensorControlMessage::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorControlMessage.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorControlMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorControlMessage.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorControlMessage::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorControlMessage.hostname)
}

// optional .naki3d.common.protocol.CECMessage cec_message = 17;
inline bool SensorControlMessage::has_cec_message() const {
  return message_case() == kCecMessage;
}
inline void SensorControlMessage::set_has_cec_message() {
  _oneof_case_[0] = kCecMessage;
}
inline void SensorControlMessage::clear_cec_message() {
  if (has_cec_message()) {
    delete message_.cec_message_;
    clear_has_message();
  }
}
inline  const ::naki3d::common::protocol::CECMessage& SensorControlMessage::cec_message() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorControlMessage.cec_message)
  return has_cec_message()
      ? *message_.cec_message_
      : ::naki3d::common::protocol::CECMessage::default_instance();
}
inline ::naki3d::common::protocol::CECMessage* SensorControlMessage::mutable_cec_message() {
  if (!has_cec_message()) {
    clear_message();
    set_has_cec_message();
    message_.cec_message_ = new ::naki3d::common::protocol::CECMessage;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorControlMessage.cec_message)
  return message_.cec_message_;
}
inline ::naki3d::common::protocol::CECMessage* SensorControlMessage::release_cec_message() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorControlMessage.cec_message)
  if (has_cec_message()) {
    clear_has_message();
    ::naki3d::common::protocol::CECMessage* temp = message_.cec_message_;
    message_.cec_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SensorControlMessage::set_allocated_cec_message(::naki3d::common::protocol::CECMessage* cec_message) {
  clear_message();
  if (cec_message) {
    set_has_cec_message();
    message_.cec_message_ = cec_message;
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorControlMessage.cec_message)
}

inline bool SensorControlMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void SensorControlMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline SensorControlMessage::MessageCase SensorControlMessage::message_case() const {
  return SensorControlMessage::MessageCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensors_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cec.pb.h"
#include "discovery.pb.h"
#include "types.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class SensorControlMessage;
struct SensorControlMessageDefaultTypeInternal;
extern SensorControlMessageDefaultTypeInternal _SensorControlMessage_default_instance_;
class SensorDataMessage;
struct SensorDataMessageDefaultTypeInternal;
extern SensorDataMessageDefaultTypeInternal _SensorDataMessage_default_instance_;
class SensorMessage;
struct SensorMessageDefaultTypeInternal;
extern SensorMessageDefaultTypeInternal _SensorMessage_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::SensorControlMessage* Arena::CreateMaybeMessage<::naki3d::common::protocol::SensorControlMessage>(Arena*);
template<> ::naki3d::common::protocol::SensorDataMessage* Arena::CreateMaybeMessage<::naki3d::common::protocol::SensorDataMessage>(Arena*);
template<> ::naki3d::common::protocol::SensorMessage* Arena::CreateMaybeMessage<::naki3d::common::protocol::SensorMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class SensorDataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorDataMessage) */ {
 public:
  inline SensorDataMessage() : SensorDataMessage(nullptr) {}
  ~SensorDataMessage() override;
  explicit constexpr SensorDataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorDataMessage(const SensorDataMessage& from);
  SensorDataMessage(SensorDataMessage&& from) noexcept
    : SensorDataMessage() {
    *this = ::std::move(from);
  }

  inline SensorDataMessage& operator=(const SensorDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDataMessage& operator=(SensorDataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorDataMessage& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kVoid = 16,
    kBool = 17,
    kInteger = 18,
    kFloat = 19,
    kString = 20,
    kVector2 = 21,
    kVector3 = 22,
    DATA_NOT_SET = 0,
  };

  static inline const SensorDataMessage* internal_default_instance() {
    return reinterpret_cast<const SensorDataMessage*>(
               &_SensorDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorDataMessage& a, SensorDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorDataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorDataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorDataMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorDataMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDataMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SensorDataMessage";
  }
  protected:
  explicit SensorDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kVoidFieldNumber = 16,
    kBoolFieldNumber = 17,
    kIntegerFieldNumber = 18,
    kFloatFieldNumber = 19,
    kStringFieldNumber = 20,
    kVector2FieldNumber = 21,
    kVector3FieldNumber = 22,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // .google.protobuf.Empty void = 16;
  bool has_void_() const;
  private:
  bool _internal_has_void_() const;
  public:
  void clear_void_();
  const ::PROTOBUF_NAMESPACE_ID::Empty& void_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Empty* release_void_();
  ::PROTOBUF_NAMESPACE_ID::Empty* mutable_void_();
  void set_allocated_void_(::PROTOBUF_NAMESPACE_ID::Empty* void_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Empty& _internal_void_() const;
  ::PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_void_();
  public:
  void unsafe_arena_set_allocated_void_(
      ::PROTOBUF_NAMESPACE_ID::Empty* void_);
  ::PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_void_();

  // bool bool = 17;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // int32 integer = 18;
  bool has_integer() const;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  int32_t integer() const;
  void set_integer(int32_t value);
  private:
  int32_t _internal_integer() const;
  void _internal_set_integer(int32_t value);
  public:

  // float float = 19;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // string string = 20;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  PROTOBUF_NODISCARD std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // .naki3d.common.protocol.Vector2Data vector2 = 21;
  bool has_vector2() const;
  private:
  bool _internal_has_vector2() const;
  public:
  void clear_vector2();
  const ::naki3d::common::protocol::Vector2Data& vector2() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::Vector2Data* release_vector2();
  ::naki3d::common::protocol::Vector2Data* mutable_vector2();
  void set_allocated_vector2(::naki3d::common::protocol::Vector2Data* vector2);
  private:
  const ::naki3d::common::protocol::Vector2Data& _internal_vector2() const;
  ::naki3d::common::protocol::Vector2Data* _internal_mutable_vector2();
  public:
  void unsafe_arena_set_allocated_vector2(
      ::naki3d::common::protocol::Vector2Data* vector2);
  ::naki3d::common::protocol::Vector2Data* unsafe_arena_release_vector2();

  // .naki3d.common.protocol.Vector3Data vector3 = 22;
  bool has_vector3() const;
  private:
  bool _internal_has_vector3() const;
  public:
  void clear_vector3();
  const ::naki3d::common::protocol::Vector3Data& vector3() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::Vector3Data* release_vector3();
  ::naki3d::common::protocol::Vector3Data* mutable_vector3();
  void set_allocated_vector3(::naki3d::common::protocol::Vector3Data* vector3);
  private:
  const ::naki3d::common::protocol::Vector3Data& _internal_vector3() const;
  ::naki3d::common::protocol::Vector3Data* _internal_mutable_vector3();
  public:
  void unsafe_arena_set_allocated_vector3(
      ::naki3d::common::protocol::Vector3Data* vector3);
  ::naki3d::common::protocol::Vector3Data* unsafe_arena_release_vector3();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorDataMessage)
 private:
  class _Internal;
  void set_has_void_();
  void set_has_bool_();
  void set_has_integer();
  void set_has_float_();
  void set_has_string();
  void set_has_vector2();
  void set_has_vector3();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  uint64_t timestamp_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::Empty* void__;
    bool bool__;
    int32_t integer_;
    float float__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::naki3d::common::protocol::Vector2Data* vector2_;
    ::naki3d::common::protocol::Vector3Data* vector3_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sensors_2eproto;
};
// -------------------------------------------------------------------

class SensorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorMessage) */ {
 public:
  inline SensorMessage() : SensorMessage(nullptr) {}
  ~SensorMessage() override;
  explicit constexpr SensorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorMessage(const SensorMessage& from);
  SensorMessage(SensorMessage&& from) noexcept
    : SensorMessage() {
    *this = ::std::move(from);
  }

  inline SensorMessage& operator=(const SensorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorMessage& operator=(SensorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kData = 1,
    kSensorDescriptor = 2,
    MESSAGE_NOT_SET = 0,
  };

  static inline const SensorMessage* internal_default_instance() {
    return reinterpret_cast<const SensorMessage*>(
               &_SensorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorMessage& a, SensorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SensorMessage";
  }
  protected:
  explicit SensorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kSensorDescriptorFieldNumber = 2,
  };
  // .naki3d.common.protocol.SensorDataMessage data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::naki3d::common::protocol::SensorDataMessage& data() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::SensorDataMessage* release_data();
  ::naki3d::common::protocol::SensorDataMessage* mutable_data();
  void set_allocated_data(::naki3d::common::protocol::SensorDataMessage* data);
  private:
  const ::naki3d::common::protocol::SensorDataMessage& _internal_data() const;
  ::naki3d::common::protocol::SensorDataMessage* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::naki3d::common::protocol::SensorDataMessage* data);
  ::naki3d::common::protocol::SensorDataMessage* unsafe_arena_release_data();

  // .naki3d.common.protocol.SensorDescriptor sensor_descriptor = 2;
  bool has_sensor_descriptor() const;
  private:
  bool _internal_has_sensor_descriptor() const;
  public:
  void clear_sensor_descriptor();
  const ::naki3d::common::protocol::SensorDescriptor& sensor_descriptor() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::SensorDescriptor* release_sensor_descriptor();
  ::naki3d::common::protocol::SensorDescriptor* mutable_sensor_descriptor();
  void set_allocated_sensor_descriptor(::naki3d::common::protocol::SensorDescriptor* sensor_descriptor);
  private:
  const ::naki3d::common::protocol::SensorDescriptor& _internal_sensor_descriptor() const;
  ::naki3d::common::protocol::SensorDescriptor* _internal_mutable_sensor_descriptor();
  public:
  void unsafe_arena_set_allocated_sensor_descriptor(
      ::naki3d::common::protocol::SensorDescriptor* sensor_descriptor);
  ::naki3d::common::protocol::SensorDescriptor* unsafe_arena_release_sensor_descriptor();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorMessage)
 private:
  class _Internal;
  void set_has_data();
  void set_has_sensor_descriptor();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::naki3d::common::protocol::SensorDataMessage* data_;
    ::naki3d::common::protocol::SensorDescriptor* sensor_descriptor_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sensors_2eproto;
};
// -------------------------------------------------------------------

class SensorControlMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SensorControlMessage) */ {
 public:
  inline SensorControlMessage() : SensorControlMessage(nullptr) {}
  ~SensorControlMessage() override;
  explicit constexpr SensorControlMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorControlMessage(const SensorControlMessage& from);
  SensorControlMessage(SensorControlMessage&& from) noexcept
    : SensorControlMessage() {
    *this = ::std::move(from);
  }

  inline SensorControlMessage& operator=(const SensorControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorControlMessage& operator=(SensorControlMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorControlMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kCecMessage = 17,
    MESSAGE_NOT_SET = 0,
  };

  static inline const SensorControlMessage* internal_default_instance() {
    return reinterpret_cast<const SensorControlMessage*>(
               &_SensorControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorControlMessage& a, SensorControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorControlMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorControlMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorControlMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorControlMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorControlMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorControlMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SensorControlMessage";
  }
  protected:
  explicit SensorControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kCecMessageFieldNumber = 17,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // .naki3d.common.protocol.CECMessage cec_message = 17;
  bool has_cec_message() const;
  private:
  bool _internal_has_cec_message() const;
  public:
  void clear_cec_message();
  const ::naki3d::common::protocol::CECMessage& cec_message() const;
  PROTOBUF_NODISCARD ::naki3d::common::protocol::CECMessage* release_cec_message();
  ::naki3d::common::protocol::CECMessage* mutable_cec_message();
  void set_allocated_cec_message(::naki3d::common::protocol::CECMessage* cec_message);
  private:
  const ::naki3d::common::protocol::CECMessage& _internal_cec_message() const;
  ::naki3d::common::protocol::CECMessage* _internal_mutable_cec_message();
  public:
  void unsafe_arena_set_allocated_cec_message(
      ::naki3d::common::protocol::CECMessage* cec_message);
  ::naki3d::common::protocol::CECMessage* unsafe_arena_release_cec_message();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SensorControlMessage)
 private:
  class _Internal;
  void set_has_cec_message();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::naki3d::common::protocol::CECMessage* cec_message_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sensors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorDataMessage

// string path = 1;
inline void SensorDataMessage::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SensorDataMessage::path() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorDataMessage::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.path)
}
inline std::string* SensorDataMessage::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.path)
  return _s;
}
inline const std::string& SensorDataMessage::_internal_path() const {
  return path_.Get();
}
inline void SensorDataMessage::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorDataMessage::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorDataMessage::release_path() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SensorDataMessage::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.path)
}

// uint64 timestamp = 2;
inline void SensorDataMessage::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t SensorDataMessage::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t SensorDataMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.timestamp)
  return _internal_timestamp();
}
inline void SensorDataMessage::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void SensorDataMessage::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.timestamp)
}

// .google.protobuf.Empty void = 16;
inline bool SensorDataMessage::_internal_has_void_() const {
  return data_case() == kVoid;
}
inline bool SensorDataMessage::has_void_() const {
  return _internal_has_void_();
}
inline void SensorDataMessage::set_has_void_() {
  _oneof_case_[0] = kVoid;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* SensorDataMessage::release_void_() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.void)
  if (_internal_has_void_()) {
    clear_has_data();
      ::PROTOBUF_NAMESPACE_ID::Empty* temp = data_.void__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.void__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& SensorDataMessage::_internal_void_() const {
  return _internal_has_void_()
      ? *data_.void__
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Empty&>(::PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& SensorDataMessage::void_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.void)
  return _internal_void_();
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* SensorDataMessage::unsafe_arena_release_void_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:naki3d.common.protocol.SensorDataMessage.void)
  if (_internal_has_void_()) {
    clear_has_data();
    ::PROTOBUF_NAMESPACE_ID::Empty* temp = data_.void__;
    data_.void__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorDataMessage::unsafe_arena_set_allocated_void_(::PROTOBUF_NAMESPACE_ID::Empty* void_) {
  clear_data();
  if (void_) {
    set_has_void_();
    data_.void__ = void_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.SensorDataMessage.void)
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* SensorDataMessage::_internal_mutable_void_() {
  if (!_internal_has_void_()) {
    clear_data();
    set_has_void_();
    data_.void__ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Empty >(GetArenaForAllocation());
  }
  return data_.void__;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* SensorDataMessage::mutable_void_() {
  ::PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_void_();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.void)
  return _msg;
}

// bool bool = 17;
inline bool SensorDataMessage::_internal_has_bool_() const {
  return data_case() == kBool;
}
inline bool SensorDataMessage::has_bool_() const {
  return _internal_has_bool_();
}
inline void SensorDataMessage::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void SensorDataMessage::clear_bool_() {
  if (_internal_has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
inline bool SensorDataMessage::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return data_.bool__;
  }
  return false;
}
inline void SensorDataMessage::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
}
inline bool SensorDataMessage::bool_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.bool)
  return _internal_bool_();
}
inline void SensorDataMessage::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.bool)
}

// int32 integer = 18;
inline bool SensorDataMessage::_internal_has_integer() const {
  return data_case() == kInteger;
}
inline bool SensorDataMessage::has_integer() const {
  return _internal_has_integer();
}
inline void SensorDataMessage::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void SensorDataMessage::clear_integer() {
  if (_internal_has_integer()) {
    data_.integer_ = 0;
    clear_has_data();
  }
}
inline int32_t SensorDataMessage::_internal_integer() const {
  if (_internal_has_integer()) {
    return data_.integer_;
  }
  return 0;
}
inline void SensorDataMessage::_internal_set_integer(int32_t value) {
  if (!_internal_has_integer()) {
    clear_data();
    set_has_integer();
  }
  data_.integer_ = value;
}
inline int32_t SensorDataMessage::integer() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.integer)
  return _internal_integer();
}
inline void SensorDataMessage::set_integer(int32_t value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.integer)
}

// float float = 19;
inline bool SensorDataMessage::_internal_has_float_() const {
  return data_case() == kFloat;
}
inline bool SensorDataMessage::has_float_() const {
  return _internal_has_float_();
}
inline void SensorDataMessage::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void SensorDataMessage::clear_float_() {
  if (_internal_has_float_()) {
    data_.float__ = 0;
    clear_has_data();
  }
}
inline float SensorDataMessage::_internal_float_() const {
  if (_internal_has_float_()) {
    return data_.float__;
  }
  return 0;
}
inline void SensorDataMessage::_internal_set_float_(float value) {
  if (!_internal_has_float_()) {
    clear_data();
    set_has_float_();
  }
  data_.float__ = value;
}
inline float SensorDataMessage::float_() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.float)
  return _internal_float_();
}
inline void SensorDataMessage::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.float)
}

// string string = 20;
inline bool SensorDataMessage::_internal_has_string() const {
  return data_case() == kString;
}
inline bool SensorDataMessage::has_string() const {
  return _internal_has_string();
}
inline void SensorDataMessage::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void SensorDataMessage::clear_string() {
  if (_internal_has_string()) {
    data_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& SensorDataMessage::string() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
inline void SensorDataMessage::set_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorDataMessage.string)
}
inline std::string* SensorDataMessage::mutable_string() {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.string)
  return _s;
}
inline const std::string& SensorDataMessage::_internal_string() const {
  if (_internal_has_string()) {
    return data_.string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SensorDataMessage::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorDataMessage::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_data();
    set_has_string();
    data_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorDataMessage::release_string() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.string)
  if (_internal_has_string()) {
    clear_has_data();
    return data_.string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SensorDataMessage::set_allocated_string(std::string* string) {
  if (has_data()) {
    clear_data();
  }
  if (string != nullptr) {
    set_has_string();
    data_.string_.UnsafeSetDefault(string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorDataMessage.string)
}

// .naki3d.common.protocol.Vector2Data vector2 = 21;
inline bool SensorDataMessage::_internal_has_vector2() const {
  return data_case() == kVector2;
}
inline bool SensorDataMessage::has_vector2() const {
  return _internal_has_vector2();
}
inline void SensorDataMessage::set_has_vector2() {
  _oneof_case_[0] = kVector2;
}
inline ::naki3d::common::protocol::Vector2Data* SensorDataMessage::release_vector2() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.vector2)
  if (_internal_has_vector2()) {
    clear_has_data();
      ::naki3d::common::protocol::Vector2Data* temp = data_.vector2_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.vector2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::naki3d::common::protocol::Vector2Data& SensorDataMessage::_internal_vector2() const {
  return _internal_has_vector2()
      ? *data_.vector2_
      : reinterpret_cast< ::naki3d::common::protocol::Vector2Data&>(::naki3d::common::protocol::_Vector2Data_default_instance_);
}
inline const ::naki3d::common::protocol::Vector2Data& SensorDataMessage::vector2() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.vector2)
  return _internal_vector2();
}
inline ::naki3d::common::protocol::Vector2Data* SensorDataMessage::unsafe_arena_release_vector2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:naki3d.common.protocol.SensorDataMessage.vector2)
  if (_internal_has_vector2()) {
    clear_has_data();
    ::naki3d::common::protocol::Vector2Data* temp = data_.vector2_;
    data_.vector2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorDataMessage::unsafe_arena_set_allocated_vector2(::naki3d::common::protocol::Vector2Data* vector2) {
  clear_data();
  if (vector2) {
    set_has_vector2();
    data_.vector2_ = vector2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.SensorDataMessage.vector2)
}
inline ::naki3d::common::protocol::Vector2Data* SensorDataMessage::_internal_mutable_vector2() {
  if (!_internal_has_vector2()) {
    clear_data();
    set_has_vector2();
    data_.vector2_ = CreateMaybeMessage< ::naki3d::common::protocol::Vector2Data >(GetArenaForAllocation());
  }
  return data_.vector2_;
}
inline ::naki3d::common::protocol::Vector2Data* SensorDataMessage::mutable_vector2() {
  ::naki3d::common::protocol::Vector2Data* _msg = _internal_mutable_vector2();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.vector2)
  return _msg;
}

// .naki3d.common.protocol.Vector3Data vector3 = 22;
inline bool SensorDataMessage::_internal_has_vector3() const {
  return data_case() == kVector3;
}
inline bool SensorDataMessage::has_vector3() const {
  return _internal_has_vector3();
}
inline void SensorDataMessage::set_has_vector3() {
  _oneof_case_[0] = kVector3;
}
inline ::naki3d::common::protocol::Vector3Data* SensorDataMessage::release_vector3() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorDataMessage.vector3)
  if (_internal_has_vector3()) {
    clear_has_data();
      ::naki3d::common::protocol::Vector3Data* temp = data_.vector3_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.vector3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::naki3d::common::protocol::Vector3Data& SensorDataMessage::_internal_vector3() const {
  return _internal_has_vector3()
      ? *data_.vector3_
      : reinterpret_cast< ::naki3d::common::protocol::Vector3Data&>(::naki3d::common::protocol::_Vector3Data_default_instance_);
}
inline const ::naki3d::common::protocol::Vector3Data& SensorDataMessage::vector3() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorDataMessage.vector3)
  return _internal_vector3();
}
inline ::naki3d::common::protocol::Vector3Data* SensorDataMessage::unsafe_arena_release_vector3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:naki3d.common.protocol.SensorDataMessage.vector3)
  if (_internal_has_vector3()) {
    clear_has_data();
    ::naki3d::common::protocol::Vector3Data* temp = data_.vector3_;
    data_.vector3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorDataMessage::unsafe_arena_set_allocated_vector3(::naki3d::common::protocol::Vector3Data* vector3) {
  clear_data();
  if (vector3) {
    set_has_vector3();
    data_.vector3_ = vector3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.SensorDataMessage.vector3)
}
inline ::naki3d::common::protocol::Vector3Data* SensorDataMessage::_internal_mutable_vector3() {
  if (!_internal_has_vector3()) {
    clear_data();
    set_has_vector3();
    data_.vector3_ = CreateMaybeMessage< ::naki3d::common::protocol::Vector3Data >(GetArenaForAllocation());
  }
  return data_.vector3_;
}
inline ::naki3d::common::protocol::Vector3Data* SensorDataMessage::mutable_vector3() {
  ::naki3d::common::protocol::Vector3Data* _msg = _internal_mutable_vector3();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorDataMessage.vector3)
  return _msg;
}

inline bool SensorDataMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SensorDataMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SensorDataMessage::DataCase SensorDataMessage::data_case() const {
  return SensorDataMessage::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SensorMessage

// .naki3d.common.protocol.SensorDataMessage data = 1;
inline bool SensorMessage::_internal_has_data() const {
  return message_case() == kData;
}
inline bool SensorMessage::has_data() const {
  return _internal_has_data();
}
inline void SensorMessage::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void SensorMessage::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.data_;
    }
    clear_has_message();
  }
}
inline ::naki3d::common::protocol::SensorDataMessage* SensorMessage::release_data() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorMessage.data)
  if (_internal_has_data()) {
    clear_has_message();
      ::naki3d::common::protocol::SensorDataMessage* temp = message_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::naki3d::common::protocol::SensorDataMessage& SensorMessage::_internal_data() const {
  return _internal_has_data()
      ? *message_.data_
      : reinterpret_cast< ::naki3d::common::protocol::SensorDataMessage&>(::naki3d::common::protocol::_SensorDataMessage_default_instance_);
}
inline const ::naki3d::common::protocol::SensorDataMessage& SensorMessage::data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorMessage.data)
  return _internal_data();
}
inline ::naki3d::common::protocol::SensorDataMessage* SensorMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:naki3d.common.protocol.SensorMessage.data)
  if (_internal_has_data()) {
    clear_has_message();
    ::naki3d::common::protocol::SensorDataMessage* temp = message_.data_;
    message_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorMessage::unsafe_arena_set_allocated_data(::naki3d::common::protocol::SensorDataMessage* data) {
  clear_message();
  if (data) {
    set_has_data();
    message_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.SensorMessage.data)
}
inline ::naki3d::common::protocol::SensorDataMessage* SensorMessage::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_message();
    set_has_data();
    message_.data_ = CreateMaybeMessage< ::naki3d::common::protocol::SensorDataMessage >(GetArenaForAllocation());
  }
  return message_.data_;
}
inline ::naki3d::common::protocol::SensorDataMessage* SensorMessage::mutable_data() {
  ::naki3d::common::protocol::SensorDataMessage* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorMessage.data)
  return _msg;
}

// .naki3d.common.protocol.SensorDescriptor sensor_descriptor = 2;
inline bool SensorMessage::_internal_has_sensor_descriptor() const {
  return message_case() == kSensorDescriptor;
}
inline bool SensorMessage::has_sensor_descriptor() const {
  return _internal_has_sensor_descriptor();
}
inline void SensorMessage::set_has_sensor_descriptor() {
  _oneof_case_[0] = kSensorDescriptor;
}
inline ::naki3d::common::protocol::SensorDescriptor* SensorMessage::release_sensor_descriptor() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorMessage.sensor_descriptor)
  if (_internal_has_sensor_descriptor()) {
    clear_has_message();
      ::naki3d::common::protocol::SensorDescriptor* temp = message_.sensor_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.sensor_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::naki3d::common::protocol::SensorDescriptor& SensorMessage::_internal_sensor_descriptor() const {
  return _internal_has_sensor_descriptor()
      ? *message_.sensor_descriptor_
      : reinterpret_cast< ::naki3d::common::protocol::SensorDescriptor&>(::naki3d::common::protocol::_SensorDescriptor_default_instance_);
}
inline const ::naki3d::common::protocol::SensorDescriptor& SensorMessage::sensor_descriptor() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorMessage.sensor_descriptor)
  return _internal_sensor_descriptor();
}
inline ::naki3d::common::protocol::SensorDescriptor* SensorMessage::unsafe_arena_release_sensor_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:naki3d.common.protocol.SensorMessage.sensor_descriptor)
  if (_internal_has_sensor_descriptor()) {
    clear_has_message();
    ::naki3d::common::protocol::SensorDescriptor* temp = message_.sensor_descriptor_;
    message_.sensor_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorMessage::unsafe_arena_set_allocated_sensor_descriptor(::naki3d::common::protocol::SensorDescriptor* sensor_descriptor) {
  clear_message();
  if (sensor_descriptor) {
    set_has_sensor_descriptor();
    message_.sensor_descriptor_ = sensor_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.SensorMessage.sensor_descriptor)
}
inline ::naki3d::common::protocol::SensorDescriptor* SensorMessage::_internal_mutable_sensor_descriptor() {
  if (!_internal_has_sensor_descriptor()) {
    clear_message();
    set_has_sensor_descriptor();
    message_.sensor_descriptor_ = CreateMaybeMessage< ::naki3d::common::protocol::SensorDescriptor >(GetArenaForAllocation());
  }
  return message_.sensor_descriptor_;
}
inline ::naki3d::common::protocol::SensorDescriptor* SensorMessage::mutable_sensor_descriptor() {
  ::naki3d::common::protocol::SensorDescriptor* _msg = _internal_mutable_sensor_descriptor();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorMessage.sensor_descriptor)
  return _msg;
}

inline bool SensorMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void SensorMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline SensorMessage::MessageCase SensorMessage::message_case() const {
  return SensorMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SensorControlMessage

// string hostname = 1;
inline void SensorControlMessage::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& SensorControlMessage::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorControlMessage.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorControlMessage::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SensorControlMessage.hostname)
}
inline std::string* SensorControlMessage::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorControlMessage.hostname)
  return _s;
}
inline const std::string& SensorControlMessage::_internal_hostname() const {
  return hostname_.Get();
}
inline void SensorControlMessage::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorControlMessage::_internal_mutable_hostname() {
  
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorControlMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorControlMessage.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SensorControlMessage::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SensorControlMessage.hostname)
}

// .naki3d.common.protocol.CECMessage cec_message = 17;
inline bool SensorControlMessage::_internal_has_cec_message() const {
  return message_case() == kCecMessage;
}
inline bool SensorControlMessage::has_cec_message() const {
  return _internal_has_cec_message();
}
inline void SensorControlMessage::set_has_cec_message() {
  _oneof_case_[0] = kCecMessage;
}
inline ::naki3d::common::protocol::CECMessage* SensorControlMessage::release_cec_message() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SensorControlMessage.cec_message)
  if (_internal_has_cec_message()) {
    clear_has_message();
      ::naki3d::common::protocol::CECMessage* temp = message_.cec_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.cec_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::naki3d::common::protocol::CECMessage& SensorControlMessage::_internal_cec_message() const {
  return _internal_has_cec_message()
      ? *message_.cec_message_
      : reinterpret_cast< ::naki3d::common::protocol::CECMessage&>(::naki3d::common::protocol::_CECMessage_default_instance_);
}
inline const ::naki3d::common::protocol::CECMessage& SensorControlMessage::cec_message() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SensorControlMessage.cec_message)
  return _internal_cec_message();
}
inline ::naki3d::common::protocol::CECMessage* SensorControlMessage::unsafe_arena_release_cec_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:naki3d.common.protocol.SensorControlMessage.cec_message)
  if (_internal_has_cec_message()) {
    clear_has_message();
    ::naki3d::common::protocol::CECMessage* temp = message_.cec_message_;
    message_.cec_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorControlMessage::unsafe_arena_set_allocated_cec_message(::naki3d::common::protocol::CECMessage* cec_message) {
  clear_message();
  if (cec_message) {
    set_has_cec_message();
    message_.cec_message_ = cec_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.SensorControlMessage.cec_message)
}
inline ::naki3d::common::protocol::CECMessage* SensorControlMessage::_internal_mutable_cec_message() {
  if (!_internal_has_cec_message()) {
    clear_message();
    set_has_cec_message();
    message_.cec_message_ = CreateMaybeMessage< ::naki3d::common::protocol::CECMessage >(GetArenaForAllocation());
  }
  return message_.cec_message_;
}
inline ::naki3d::common::protocol::CECMessage* SensorControlMessage::mutable_cec_message() {
  ::naki3d::common::protocol::CECMessage* _msg = _internal_mutable_cec_message();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SensorControlMessage.cec_message)
  return _msg;
}

inline bool SensorControlMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void SensorControlMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline SensorControlMessage::MessageCase SensorControlMessage::message_case() const {
  return SensorControlMessage::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensors_2eproto

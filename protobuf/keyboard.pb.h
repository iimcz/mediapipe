// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keyboard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_keyboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_keyboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_keyboard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_keyboard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keyboard_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class KeyboardUpdateData;
class KeyboardUpdateDataDefaultTypeInternal;
extern KeyboardUpdateDataDefaultTypeInternal _KeyboardUpdateData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::KeyboardUpdateData* Arena::CreateMaybeMessage<::naki3d::common::protocol::KeyboardUpdateData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

enum KeyActionType : int {
  KEY_UP = 0,
  KEY_DOWN = 1,
  KeyActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KeyActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KeyActionType_IsValid(int value);
constexpr KeyActionType KeyActionType_MIN = KEY_UP;
constexpr KeyActionType KeyActionType_MAX = KEY_DOWN;
constexpr int KeyActionType_ARRAYSIZE = KeyActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyActionType_descriptor();
template<typename T>
inline const std::string& KeyActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyActionType_descriptor(), enum_t_value);
}
inline bool KeyActionType_Parse(
    const std::string& name, KeyActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyActionType>(
    KeyActionType_descriptor(), name, value);
}
// ===================================================================

class KeyboardUpdateData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.KeyboardUpdateData) */ {
 public:
  inline KeyboardUpdateData() : KeyboardUpdateData(nullptr) {};
  virtual ~KeyboardUpdateData();

  KeyboardUpdateData(const KeyboardUpdateData& from);
  KeyboardUpdateData(KeyboardUpdateData&& from) noexcept
    : KeyboardUpdateData() {
    *this = ::std::move(from);
  }

  inline KeyboardUpdateData& operator=(const KeyboardUpdateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyboardUpdateData& operator=(KeyboardUpdateData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyboardUpdateData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyboardUpdateData* internal_default_instance() {
    return reinterpret_cast<const KeyboardUpdateData*>(
               &_KeyboardUpdateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyboardUpdateData& a, KeyboardUpdateData& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyboardUpdateData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyboardUpdateData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyboardUpdateData* New() const final {
    return CreateMaybeMessage<KeyboardUpdateData>(nullptr);
  }

  KeyboardUpdateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyboardUpdateData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyboardUpdateData& from);
  void MergeFrom(const KeyboardUpdateData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyboardUpdateData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.KeyboardUpdateData";
  }
  protected:
  explicit KeyboardUpdateData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_keyboard_2eproto);
    return ::descriptor_table_keyboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kKeycodeFieldNumber = 2,
  };
  // .naki3d.common.protocol.KeyActionType type = 1;
  void clear_type();
  ::naki3d::common::protocol::KeyActionType type() const;
  void set_type(::naki3d::common::protocol::KeyActionType value);
  private:
  ::naki3d::common::protocol::KeyActionType _internal_type() const;
  void _internal_set_type(::naki3d::common::protocol::KeyActionType value);
  public:

  // int32 keycode = 2;
  void clear_keycode();
  ::PROTOBUF_NAMESPACE_ID::int32 keycode() const;
  void set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keycode() const;
  void _internal_set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.KeyboardUpdateData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 keycode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keyboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyboardUpdateData

// .naki3d.common.protocol.KeyActionType type = 1;
inline void KeyboardUpdateData::clear_type() {
  type_ = 0;
}
inline ::naki3d::common::protocol::KeyActionType KeyboardUpdateData::_internal_type() const {
  return static_cast< ::naki3d::common::protocol::KeyActionType >(type_);
}
inline ::naki3d::common::protocol::KeyActionType KeyboardUpdateData::type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.KeyboardUpdateData.type)
  return _internal_type();
}
inline void KeyboardUpdateData::_internal_set_type(::naki3d::common::protocol::KeyActionType value) {
  
  type_ = value;
}
inline void KeyboardUpdateData::set_type(::naki3d::common::protocol::KeyActionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.KeyboardUpdateData.type)
}

// int32 keycode = 2;
inline void KeyboardUpdateData::clear_keycode() {
  keycode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyboardUpdateData::_internal_keycode() const {
  return keycode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyboardUpdateData::keycode() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.KeyboardUpdateData.keycode)
  return _internal_keycode();
}
inline void KeyboardUpdateData::_internal_set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keycode_ = value;
}
inline void KeyboardUpdateData::set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.KeyboardUpdateData.keycode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::naki3d::common::protocol::KeyActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::KeyActionType>() {
  return ::naki3d::common::protocol::KeyActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_keyboard_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#include "connection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace naki3d {
namespace common {
namespace protocol {
PROTOBUF_CONSTEXPR VersionInfo::VersionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.build_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.major_)*/0u
  , /*decltype(_impl_.minor_)*/0u
  , /*decltype(_impl_.patch_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionInfoDefaultTypeInternal() {}
  union {
    VersionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
PROTOBUF_CONSTEXPR ConnectionRequest::ConnectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionRequestDefaultTypeInternal() {}
  union {
    ConnectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionRequestDefaultTypeInternal _ConnectionRequest_default_instance_;
PROTOBUF_CONSTEXPR ConnectionAcknowledgement::ConnectionAcknowledgement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verified_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionAcknowledgementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionAcknowledgementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionAcknowledgementDefaultTypeInternal() {}
  union {
    ConnectionAcknowledgement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionAcknowledgementDefaultTypeInternal _ConnectionAcknowledgement_default_instance_;
PROTOBUF_CONSTEXPR DeviceDescriptor::DeviceDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.localsensors_)*/{}
  , /*decltype(_impl_._localsensors_cached_byte_size_)*/{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.performancecap_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDescriptorDefaultTypeInternal() {}
  union {
    DeviceDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDescriptorDefaultTypeInternal _DeviceDescriptor_default_instance_;
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized) {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR EncryptionInfo::EncryptionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.managementkeys_)*/{}
  , /*decltype(_impl_.devicecertificate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionInfoDefaultTypeInternal() {}
  union {
    EncryptionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static ::_pb::Metadata file_level_metadata_connection_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_connection_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_connection_2eproto = nullptr;

const uint32_t TableStruct_connection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::VersionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::VersionInfo, _impl_.major_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::VersionInfo, _impl_.minor_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::VersionInfo, _impl_.patch_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::VersionInfo, _impl_.build_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ConnectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ConnectionRequest, _impl_.connection_id_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ConnectionRequest, _impl_.public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ConnectionAcknowledgement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ConnectionAcknowledgement, _impl_.connection_id_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ConnectionAcknowledgement, _impl_.verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptor, _impl_.performancecap_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::DeviceDescriptor, _impl_.localsensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::EncryptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::EncryptionInfo, _impl_.devicecertificate_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::EncryptionInfo, _impl_.managementkeys_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::naki3d::common::protocol::VersionInfo)},
  { 10, -1, -1, sizeof(::naki3d::common::protocol::ConnectionRequest)},
  { 18, -1, -1, sizeof(::naki3d::common::protocol::ConnectionAcknowledgement)},
  { 26, -1, -1, sizeof(::naki3d::common::protocol::DeviceDescriptor)},
  { 35, -1, -1, sizeof(::naki3d::common::protocol::Ping)},
  { 41, -1, -1, sizeof(::naki3d::common::protocol::EncryptionInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::naki3d::common::protocol::_VersionInfo_default_instance_._instance,
  &::naki3d::common::protocol::_ConnectionRequest_default_instance_._instance,
  &::naki3d::common::protocol::_ConnectionAcknowledgement_default_instance_._instance,
  &::naki3d::common::protocol::_DeviceDescriptor_default_instance_._instance,
  &::naki3d::common::protocol::_Ping_default_instance_._instance,
  &::naki3d::common::protocol::_EncryptionInfo_default_instance_._instance,
};

const char descriptor_table_protodef_connection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020connection.proto\022\026naki3d.common.protoc"
  "ol\"I\n\013VersionInfo\022\r\n\005major\030\001 \001(\r\022\r\n\005mino"
  "r\030\002 \001(\r\022\r\n\005patch\030\003 \001(\r\022\r\n\005build\030\004 \001(\t\">\n"
  "\021ConnectionRequest\022\025\n\rconnection_id\030\001 \001("
  "\t\022\022\n\npublic_key\030\002 \001(\014\"D\n\031ConnectionAckno"
  "wledgement\022\025\n\rconnection_id\030\001 \001(\t\022\020\n\010ver"
  "ified\030\002 \001(\010\"\276\001\n\020DeviceDescriptor\0220\n\004type"
  "\030\001 \001(\0162\".naki3d.common.protocol.DeviceTy"
  "pe\022>\n\016performanceCap\030\002 \001(\0162&.naki3d.comm"
  "on.protocol.PerformanceCap\0228\n\014localSenso"
  "rs\030\003 \003(\0162\".naki3d.common.protocol.Sensor"
  "Type\"\006\n\004Ping\"C\n\016EncryptionInfo\022\031\n\021device"
  "Certificate\030\001 \001(\014\022\026\n\016managementKeys\030\002 \003("
  "\014*`\n\016PerformanceCap\022\030\n\024PERFORMANCE_CAP_S"
  "LOW\020\000\022\032\n\026PERFORMANCE_CAP_MEDIUM\020\001\022\030\n\024PER"
  "FORMANCE_CAP_FAST\020\002*\270\001\n\nSensorType\022\027\n\023SE"
  "NSOR_TYPE_GESTURE\020\000\022\025\n\021SENSOR_TYPE_IMAGE"
  "\020\001\022\025\n\021SENSOR_TYPE_DEPTH\020\002\022\025\n\021SENSOR_TYPE"
  "_LIGHT\020\003\022\032\n\026SENSOR_TYPE_MICROPHONE\020\004\022\022\n\016"
  "SENSOR_TYPE_IR\020\005\022\034\n\030SENSOR_TYPE_HANDTRAC"
  "KING\020\006*O\n\nDeviceType\022\027\n\023DEVICE_TYPE_UNKN"
  "OWN\020\000\022\023\n\017DEVICE_TYPE_IPW\020\001\022\023\n\017DEVICE_TYP"
  "E_PGE\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_connection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_connection_2eproto = {
    false, false, 895, descriptor_table_protodef_connection_2eproto,
    "connection.proto",
    &descriptor_table_connection_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_connection_2eproto::offsets,
    file_level_metadata_connection_2eproto, file_level_enum_descriptors_connection_2eproto,
    file_level_service_descriptors_connection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_connection_2eproto_getter() {
  return &descriptor_table_connection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_connection_2eproto(&descriptor_table_connection_2eproto);
namespace naki3d {
namespace common {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceCap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_connection_2eproto);
  return file_level_enum_descriptors_connection_2eproto[0];
}
bool PerformanceCap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_connection_2eproto);
  return file_level_enum_descriptors_connection_2eproto[1];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_connection_2eproto);
  return file_level_enum_descriptors_connection_2eproto[2];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VersionInfo::_Internal {
 public:
};

VersionInfo::VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.VersionInfo)
}
VersionInfo::VersionInfo(const VersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.build_){}
    , decltype(_impl_.major_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.patch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_build().empty()) {
    _this->_impl_.build_.Set(from._internal_build(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.major_, &from._impl_.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.patch_) -
    reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.VersionInfo)
}

inline void VersionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.build_){}
    , decltype(_impl_.major_){0u}
    , decltype(_impl_.minor_){0u}
    , decltype(_impl_.patch_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.VersionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.build_.Destroy();
}

void VersionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.VersionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.build_.ClearToEmpty();
  ::memset(&_impl_.major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.patch_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string build = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_build();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "naki3d.common.protocol.VersionInfo.build"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.VersionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  // string build = 4;
  if (!this->_internal_build().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.VersionInfo.build");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_build(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.VersionInfo)
  return target;
}

size_t VersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.VersionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string build = 4;
  if (!this->_internal_build().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build());
  }

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionInfo::GetClassData() const { return &_class_data_; }


void VersionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionInfo*>(&to_msg);
  auto& from = static_cast<const VersionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.VersionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_build().empty()) {
    _this->_internal_set_build(from._internal_build());
  }
  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _this->_internal_set_patch(from._internal_patch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  return true;
}

void VersionInfo::InternalSwap(VersionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.build_, lhs_arena,
      &other->_impl_.build_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionInfo, _impl_.patch_)
      + sizeof(VersionInfo::_impl_.patch_)
      - PROTOBUF_FIELD_OFFSET(VersionInfo, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[0]);
}

// ===================================================================

class ConnectionRequest::_Internal {
 public:
};

ConnectionRequest::ConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.ConnectionRequest)
}
ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){}
    , decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ConnectionRequest)
}

inline void ConnectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){}
    , decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionRequest::~ConnectionRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.ConnectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_id_.Destroy();
  _impl_.public_key_.Destroy();
}

void ConnectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.ConnectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_.ClearToEmpty();
  _impl_.public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "naki3d.common.protocol.ConnectionRequest.connection_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.ConnectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1;
  if (!this->_internal_connection_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.ConnectionRequest.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.ConnectionRequest)
  return target;
}

size_t ConnectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.ConnectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1;
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_id());
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionRequest::GetClassData() const { return &_class_data_; }


void ConnectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionRequest*>(&to_msg);
  auto& from = static_cast<const ConnectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.ConnectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.ConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {
  return true;
}

void ConnectionRequest::InternalSwap(ConnectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connection_id_, lhs_arena,
      &other->_impl_.connection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[1]);
}

// ===================================================================

class ConnectionAcknowledgement::_Internal {
 public:
};

ConnectionAcknowledgement::ConnectionAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.ConnectionAcknowledgement)
}
ConnectionAcknowledgement::ConnectionAcknowledgement(const ConnectionAcknowledgement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionAcknowledgement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){}
    , decltype(_impl_.verified_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.verified_ = from._impl_.verified_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ConnectionAcknowledgement)
}

inline void ConnectionAcknowledgement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){}
    , decltype(_impl_.verified_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionAcknowledgement::~ConnectionAcknowledgement() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.ConnectionAcknowledgement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionAcknowledgement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_id_.Destroy();
}

void ConnectionAcknowledgement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionAcknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.ConnectionAcknowledgement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_.ClearToEmpty();
  _impl_.verified_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionAcknowledgement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "naki3d.common.protocol.ConnectionAcknowledgement.connection_id"));
        } else
          goto handle_unusual;
        continue;
      // bool verified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionAcknowledgement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.ConnectionAcknowledgement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1;
  if (!this->_internal_connection_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.ConnectionAcknowledgement.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // bool verified = 2;
  if (this->_internal_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.ConnectionAcknowledgement)
  return target;
}

size_t ConnectionAcknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.ConnectionAcknowledgement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1;
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_id());
  }

  // bool verified = 2;
  if (this->_internal_verified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionAcknowledgement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionAcknowledgement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionAcknowledgement::GetClassData() const { return &_class_data_; }


void ConnectionAcknowledgement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionAcknowledgement*>(&to_msg);
  auto& from = static_cast<const ConnectionAcknowledgement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.ConnectionAcknowledgement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (from._internal_verified() != 0) {
    _this->_internal_set_verified(from._internal_verified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionAcknowledgement::CopyFrom(const ConnectionAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.ConnectionAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionAcknowledgement::IsInitialized() const {
  return true;
}

void ConnectionAcknowledgement::InternalSwap(ConnectionAcknowledgement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connection_id_, lhs_arena,
      &other->_impl_.connection_id_, rhs_arena
  );
  swap(_impl_.verified_, other->_impl_.verified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionAcknowledgement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[2]);
}

// ===================================================================

class DeviceDescriptor::_Internal {
 public:
};

DeviceDescriptor::DeviceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.DeviceDescriptor)
}
DeviceDescriptor::DeviceDescriptor(const DeviceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.localsensors_){from._impl_.localsensors_}
    , /*decltype(_impl_._localsensors_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){}
    , decltype(_impl_.performancecap_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.performancecap_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.performancecap_));
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.DeviceDescriptor)
}

inline void DeviceDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.localsensors_){arena}
    , /*decltype(_impl_._localsensors_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.performancecap_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceDescriptor::~DeviceDescriptor() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.DeviceDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localsensors_.~RepeatedField();
}

void DeviceDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.DeviceDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.localsensors_.Clear();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.performancecap_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.performancecap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.DeviceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::DeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.PerformanceCap performanceCap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_performancecap(static_cast<::naki3d::common::protocol::PerformanceCap>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .naki3d.common.protocol.SensorType localSensors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_localsensors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_localsensors(static_cast<::naki3d::common::protocol::SensorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.DeviceDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.DeviceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .naki3d.common.protocol.PerformanceCap performanceCap = 2;
  if (this->_internal_performancecap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_performancecap(), target);
  }

  // repeated .naki3d.common.protocol.SensorType localSensors = 3;
  {
    int byte_size = _impl_._localsensors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, _impl_.localsensors_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.DeviceDescriptor)
  return target;
}

size_t DeviceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.DeviceDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.SensorType localSensors = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_localsensors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_localsensors(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._localsensors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .naki3d.common.protocol.DeviceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .naki3d.common.protocol.PerformanceCap performanceCap = 2;
  if (this->_internal_performancecap() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_performancecap());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceDescriptor::GetClassData() const { return &_class_data_; }


void DeviceDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceDescriptor*>(&to_msg);
  auto& from = static_cast<const DeviceDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.DeviceDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.localsensors_.MergeFrom(from._impl_.localsensors_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_performancecap() != 0) {
    _this->_internal_set_performancecap(from._internal_performancecap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceDescriptor::CopyFrom(const DeviceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.DeviceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDescriptor::IsInitialized() const {
  return true;
}

void DeviceDescriptor::InternalSwap(DeviceDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.localsensors_.InternalSwap(&other->_impl_.localsensors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceDescriptor, _impl_.performancecap_)
      + sizeof(DeviceDescriptor::_impl_.performancecap_)
      - PROTOBUF_FIELD_OFFSET(DeviceDescriptor, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[3]);
}

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Ping* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.Ping)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[4]);
}

// ===================================================================

class EncryptionInfo::_Internal {
 public:
};

EncryptionInfo::EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.EncryptionInfo)
}
EncryptionInfo::EncryptionInfo(const EncryptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncryptionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.managementkeys_){from._impl_.managementkeys_}
    , decltype(_impl_.devicecertificate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.devicecertificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicecertificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicecertificate().empty()) {
    _this->_impl_.devicecertificate_.Set(from._internal_devicecertificate(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.EncryptionInfo)
}

inline void EncryptionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.managementkeys_){arena}
    , decltype(_impl_.devicecertificate_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.devicecertificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicecertificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncryptionInfo::~EncryptionInfo() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.EncryptionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.managementkeys_.~RepeatedPtrField();
  _impl_.devicecertificate_.Destroy();
}

void EncryptionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.EncryptionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.managementkeys_.Clear();
  _impl_.devicecertificate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes deviceCertificate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_devicecertificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes managementKeys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_managementkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.EncryptionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceCertificate = 1;
  if (!this->_internal_devicecertificate().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_devicecertificate(), target);
  }

  // repeated bytes managementKeys = 2;
  for (int i = 0, n = this->_internal_managementkeys_size(); i < n; i++) {
    const auto& s = this->_internal_managementkeys(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.EncryptionInfo)
  return target;
}

size_t EncryptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.EncryptionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes managementKeys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.managementkeys_.size());
  for (int i = 0, n = _impl_.managementkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.managementkeys_.Get(i));
  }

  // bytes deviceCertificate = 1;
  if (!this->_internal_devicecertificate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_devicecertificate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncryptionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptionInfo::GetClassData() const { return &_class_data_; }


void EncryptionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncryptionInfo*>(&to_msg);
  auto& from = static_cast<const EncryptionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.EncryptionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.managementkeys_.MergeFrom(from._impl_.managementkeys_);
  if (!from._internal_devicecertificate().empty()) {
    _this->_internal_set_devicecertificate(from._internal_devicecertificate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptionInfo::CopyFrom(const EncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.EncryptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionInfo::IsInitialized() const {
  return true;
}

void EncryptionInfo::InternalSwap(EncryptionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.managementkeys_.InternalSwap(&other->_impl_.managementkeys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicecertificate_, lhs_arena,
      &other->_impl_.devicecertificate_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::VersionInfo*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::VersionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::VersionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::ConnectionRequest*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::ConnectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::ConnectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::ConnectionAcknowledgement*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::ConnectionAcknowledgement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::ConnectionAcknowledgement >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::DeviceDescriptor*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::DeviceDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::DeviceDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::Ping*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::EncryptionInfo*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::EncryptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::EncryptionInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

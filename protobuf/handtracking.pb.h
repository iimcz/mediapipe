// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: handtracking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_handtracking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_handtracking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_handtracking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_handtracking_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_handtracking_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

enum HandGestureType : int {
  GESTURE_NONE = 0,
  GESTURE_SWIPE_LEFT = 1,
  GESTURE_SWIPE_RIGHT = 2,
  GESTURE_SWIPE_UP = 3,
  GESTURE_SWIPE_DOWN = 4,
  GESTURE_CLOSE_HAND = 5,
  GESTURE_OPEN_HAND = 6,
  GESTURE_PINCH = 7,
  HandGestureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HandGestureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HandGestureType_IsValid(int value);
constexpr HandGestureType HandGestureType_MIN = GESTURE_NONE;
constexpr HandGestureType HandGestureType_MAX = GESTURE_PINCH;
constexpr int HandGestureType_ARRAYSIZE = HandGestureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandGestureType_descriptor();
template<typename T>
inline const std::string& HandGestureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HandGestureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HandGestureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HandGestureType_descriptor(), enum_t_value);
}
inline bool HandGestureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HandGestureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HandGestureType>(
    HandGestureType_descriptor(), name, value);
}
enum HandSide : int {
  LEFT = 0,
  RIGHT = 1,
  HandSide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HandSide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HandSide_IsValid(int value);
constexpr HandSide HandSide_MIN = LEFT;
constexpr HandSide HandSide_MAX = RIGHT;
constexpr int HandSide_ARRAYSIZE = HandSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandSide_descriptor();
template<typename T>
inline const std::string& HandSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HandSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HandSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HandSide_descriptor(), enum_t_value);
}
inline bool HandSide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HandSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HandSide>(
    HandSide_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::naki3d::common::protocol::HandGestureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::HandGestureType>() {
  return ::naki3d::common::protocol::HandGestureType_descriptor();
}
template <> struct is_proto_enum< ::naki3d::common::protocol::HandSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::HandSide>() {
  return ::naki3d::common::protocol::HandSide_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_handtracking_2eproto

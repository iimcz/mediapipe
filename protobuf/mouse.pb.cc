// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mouse.proto

#include "mouse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_types_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class MouseMoveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseMoveData> _instance;
} _MouseMoveData_default_instance_;
class MouseButtonDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseButtonData> _instance;
} _MouseButtonData_default_instance_;
class MouseScrollDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseScrollData> _instance;
} _MouseScrollData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static void InitDefaultsscc_info_MouseButtonData_mouse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_MouseButtonData_default_instance_;
    new (ptr) ::naki3d::common::protocol::MouseButtonData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::MouseButtonData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseButtonData_mouse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MouseButtonData_mouse_2eproto}, {}};

static void InitDefaultsscc_info_MouseMoveData_mouse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_MouseMoveData_default_instance_;
    new (ptr) ::naki3d::common::protocol::MouseMoveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::MouseMoveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MouseMoveData_mouse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MouseMoveData_mouse_2eproto}, {
      &scc_info_Vector2_types_2eproto.base,}};

static void InitDefaultsscc_info_MouseScrollData_mouse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::naki3d::common::protocol::_MouseScrollData_default_instance_;
    new (ptr) ::naki3d::common::protocol::MouseScrollData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::naki3d::common::protocol::MouseScrollData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseScrollData_mouse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MouseScrollData_mouse_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mouse_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mouse_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mouse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mouse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseMoveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseMoveData, absolute_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseMoveData, relative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseButtonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseButtonData, type_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseButtonData, button_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseScrollData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseScrollData, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::naki3d::common::protocol::MouseMoveData)},
  { 7, -1, sizeof(::naki3d::common::protocol::MouseButtonData)},
  { 14, -1, sizeof(::naki3d::common::protocol::MouseScrollData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_MouseMoveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_MouseButtonData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_MouseScrollData_default_instance_),
};

const char descriptor_table_protodef_mouse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013mouse.proto\022\026naki3d.common.protocol\032\013t"
  "ypes.proto\"u\n\rMouseMoveData\0221\n\010absolute\030"
  "\001 \001(\0132\037.naki3d.common.protocol.Vector2\0221"
  "\n\010relative\030\002 \001(\0132\037.naki3d.common.protoco"
  "l.Vector2\"[\n\017MouseButtonData\0225\n\004type\030\001 \001"
  "(\0162\'.naki3d.common.protocol.MouseActionT"
  "ype\022\021\n\tbutton_id\030\002 \001(\005\"H\n\017MouseScrollDat"
  "a\0225\n\004type\030\001 \001(\0162\'.naki3d.common.protocol"
  ".MouseScrollType*1\n\017MouseActionType\022\r\n\tB"
  "UTTON_UP\020\000\022\017\n\013BUTTON_DOWN\020\001*1\n\017MouseScro"
  "llType\022\r\n\tSCROLL_UP\020\000\022\017\n\013SCROLL_DOWN\020\001b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mouse_2eproto_deps[1] = {
  &::descriptor_table_types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mouse_2eproto_sccs[3] = {
  &scc_info_MouseButtonData_mouse_2eproto.base,
  &scc_info_MouseMoveData_mouse_2eproto.base,
  &scc_info_MouseScrollData_mouse_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mouse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mouse_2eproto = {
  false, false, descriptor_table_protodef_mouse_2eproto, "mouse.proto", 446,
  &descriptor_table_mouse_2eproto_once, descriptor_table_mouse_2eproto_sccs, descriptor_table_mouse_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_mouse_2eproto::offsets,
  file_level_metadata_mouse_2eproto, 3, file_level_enum_descriptors_mouse_2eproto, file_level_service_descriptors_mouse_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mouse_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mouse_2eproto)), true);
namespace naki3d {
namespace common {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mouse_2eproto);
  return file_level_enum_descriptors_mouse_2eproto[0];
}
bool MouseActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseScrollType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mouse_2eproto);
  return file_level_enum_descriptors_mouse_2eproto[1];
}
bool MouseScrollType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MouseMoveData::InitAsDefaultInstance() {
  ::naki3d::common::protocol::_MouseMoveData_default_instance_._instance.get_mutable()->absolute_ = const_cast< ::naki3d::common::protocol::Vector2*>(
      ::naki3d::common::protocol::Vector2::internal_default_instance());
  ::naki3d::common::protocol::_MouseMoveData_default_instance_._instance.get_mutable()->relative_ = const_cast< ::naki3d::common::protocol::Vector2*>(
      ::naki3d::common::protocol::Vector2::internal_default_instance());
}
class MouseMoveData::_Internal {
 public:
  static const ::naki3d::common::protocol::Vector2& absolute(const MouseMoveData* msg);
  static const ::naki3d::common::protocol::Vector2& relative(const MouseMoveData* msg);
};

const ::naki3d::common::protocol::Vector2&
MouseMoveData::_Internal::absolute(const MouseMoveData* msg) {
  return *msg->absolute_;
}
const ::naki3d::common::protocol::Vector2&
MouseMoveData::_Internal::relative(const MouseMoveData* msg) {
  return *msg->relative_;
}
void MouseMoveData::clear_absolute() {
  if (GetArena() == nullptr && absolute_ != nullptr) {
    delete absolute_;
  }
  absolute_ = nullptr;
}
void MouseMoveData::clear_relative() {
  if (GetArena() == nullptr && relative_ != nullptr) {
    delete relative_;
  }
  relative_ = nullptr;
}
MouseMoveData::MouseMoveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.MouseMoveData)
}
MouseMoveData::MouseMoveData(const MouseMoveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_absolute()) {
    absolute_ = new ::naki3d::common::protocol::Vector2(*from.absolute_);
  } else {
    absolute_ = nullptr;
  }
  if (from._internal_has_relative()) {
    relative_ = new ::naki3d::common::protocol::Vector2(*from.relative_);
  } else {
    relative_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.MouseMoveData)
}

void MouseMoveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MouseMoveData_mouse_2eproto.base);
  ::memset(&absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_) -
      reinterpret_cast<char*>(&absolute_)) + sizeof(relative_));
}

MouseMoveData::~MouseMoveData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.MouseMoveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MouseMoveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete absolute_;
  if (this != internal_default_instance()) delete relative_;
}

void MouseMoveData::ArenaDtor(void* object) {
  MouseMoveData* _this = reinterpret_cast< MouseMoveData* >(object);
  (void)_this;
}
void MouseMoveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MouseMoveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseMoveData& MouseMoveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseMoveData_mouse_2eproto.base);
  return *internal_default_instance();
}


void MouseMoveData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.MouseMoveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && absolute_ != nullptr) {
    delete absolute_;
  }
  absolute_ = nullptr;
  if (GetArena() == nullptr && relative_ != nullptr) {
    delete relative_;
  }
  relative_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseMoveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .naki3d.common.protocol.Vector2 absolute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .naki3d.common.protocol.Vector2 relative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseMoveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.MouseMoveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.Vector2 absolute = 1;
  if (this->has_absolute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::absolute(this), target, stream);
  }

  // .naki3d.common.protocol.Vector2 relative = 2;
  if (this->has_relative()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relative(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.MouseMoveData)
  return target;
}

size_t MouseMoveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.MouseMoveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.Vector2 absolute = 1;
  if (this->has_absolute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *absolute_);
  }

  // .naki3d.common.protocol.Vector2 relative = 2;
  if (this->has_relative()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseMoveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.MouseMoveData)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseMoveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseMoveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.MouseMoveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.MouseMoveData)
    MergeFrom(*source);
  }
}

void MouseMoveData::MergeFrom(const MouseMoveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.MouseMoveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_absolute()) {
    _internal_mutable_absolute()->::naki3d::common::protocol::Vector2::MergeFrom(from._internal_absolute());
  }
  if (from.has_relative()) {
    _internal_mutable_relative()->::naki3d::common::protocol::Vector2::MergeFrom(from._internal_relative());
  }
}

void MouseMoveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.MouseMoveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseMoveData::CopyFrom(const MouseMoveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.MouseMoveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseMoveData::IsInitialized() const {
  return true;
}

void MouseMoveData::InternalSwap(MouseMoveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseMoveData, relative_)
      + sizeof(MouseMoveData::relative_)
      - PROTOBUF_FIELD_OFFSET(MouseMoveData, absolute_)>(
          reinterpret_cast<char*>(&absolute_),
          reinterpret_cast<char*>(&other->absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseMoveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MouseButtonData::InitAsDefaultInstance() {
}
class MouseButtonData::_Internal {
 public:
};

MouseButtonData::MouseButtonData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.MouseButtonData)
}
MouseButtonData::MouseButtonData(const MouseButtonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(button_id_));
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.MouseButtonData)
}

void MouseButtonData::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(button_id_));
}

MouseButtonData::~MouseButtonData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.MouseButtonData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MouseButtonData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MouseButtonData::ArenaDtor(void* object) {
  MouseButtonData* _this = reinterpret_cast< MouseButtonData* >(object);
  (void)_this;
}
void MouseButtonData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MouseButtonData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseButtonData& MouseButtonData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseButtonData_mouse_2eproto.base);
  return *internal_default_instance();
}


void MouseButtonData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.MouseButtonData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(button_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseButtonData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .naki3d.common.protocol.MouseActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::MouseActionType>(val));
        } else goto handle_unusual;
        continue;
      // int32 button_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          button_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseButtonData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.MouseButtonData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseActionType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 button_id = 2;
  if (this->button_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_button_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.MouseButtonData)
  return target;
}

size_t MouseButtonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.MouseButtonData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 button_id = 2;
  if (this->button_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_button_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseButtonData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.MouseButtonData)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseButtonData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseButtonData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.MouseButtonData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.MouseButtonData)
    MergeFrom(*source);
  }
}

void MouseButtonData::MergeFrom(const MouseButtonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.MouseButtonData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.button_id() != 0) {
    _internal_set_button_id(from._internal_button_id());
  }
}

void MouseButtonData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.MouseButtonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseButtonData::CopyFrom(const MouseButtonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.MouseButtonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseButtonData::IsInitialized() const {
  return true;
}

void MouseButtonData::InternalSwap(MouseButtonData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseButtonData, button_id_)
      + sizeof(MouseButtonData::button_id_)
      - PROTOBUF_FIELD_OFFSET(MouseButtonData, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseButtonData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MouseScrollData::InitAsDefaultInstance() {
}
class MouseScrollData::_Internal {
 public:
};

MouseScrollData::MouseScrollData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.MouseScrollData)
}
MouseScrollData::MouseScrollData(const MouseScrollData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.MouseScrollData)
}

void MouseScrollData::SharedCtor() {
  type_ = 0;
}

MouseScrollData::~MouseScrollData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.MouseScrollData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MouseScrollData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MouseScrollData::ArenaDtor(void* object) {
  MouseScrollData* _this = reinterpret_cast< MouseScrollData* >(object);
  (void)_this;
}
void MouseScrollData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MouseScrollData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseScrollData& MouseScrollData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseScrollData_mouse_2eproto.base);
  return *internal_default_instance();
}


void MouseScrollData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.MouseScrollData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseScrollData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .naki3d.common.protocol.MouseScrollType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::MouseScrollType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseScrollData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.MouseScrollData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseScrollType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.MouseScrollData)
  return target;
}

size_t MouseScrollData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.MouseScrollData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseScrollType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseScrollData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naki3d.common.protocol.MouseScrollData)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseScrollData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseScrollData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naki3d.common.protocol.MouseScrollData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naki3d.common.protocol.MouseScrollData)
    MergeFrom(*source);
  }
}

void MouseScrollData::MergeFrom(const MouseScrollData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.MouseScrollData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MouseScrollData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naki3d.common.protocol.MouseScrollData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseScrollData::CopyFrom(const MouseScrollData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.MouseScrollData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseScrollData::IsInitialized() const {
  return true;
}

void MouseScrollData::InternalSwap(MouseScrollData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseScrollData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::MouseMoveData* Arena::CreateMaybeMessage< ::naki3d::common::protocol::MouseMoveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::MouseMoveData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::MouseButtonData* Arena::CreateMaybeMessage< ::naki3d::common::protocol::MouseButtonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::MouseButtonData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::MouseScrollData* Arena::CreateMaybeMessage< ::naki3d::common::protocol::MouseScrollData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::MouseScrollData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

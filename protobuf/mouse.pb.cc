// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mouse.proto

#include "mouse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace naki3d {
namespace common {
namespace protocol {
PROTOBUF_CONSTEXPR MouseMoveData::MouseMoveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.absolute_)*/nullptr
  , /*decltype(_impl_.relative_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MouseMoveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MouseMoveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MouseMoveDataDefaultTypeInternal() {}
  union {
    MouseMoveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MouseMoveDataDefaultTypeInternal _MouseMoveData_default_instance_;
PROTOBUF_CONSTEXPR MouseButtonData::MouseButtonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.button_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MouseButtonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MouseButtonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MouseButtonDataDefaultTypeInternal() {}
  union {
    MouseButtonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MouseButtonDataDefaultTypeInternal _MouseButtonData_default_instance_;
PROTOBUF_CONSTEXPR MouseScrollData::MouseScrollData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MouseScrollDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MouseScrollDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MouseScrollDataDefaultTypeInternal() {}
  union {
    MouseScrollData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MouseScrollDataDefaultTypeInternal _MouseScrollData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static ::_pb::Metadata file_level_metadata_mouse_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mouse_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mouse_2eproto = nullptr;

const uint32_t TableStruct_mouse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseMoveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseMoveData, _impl_.absolute_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseMoveData, _impl_.relative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseButtonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseButtonData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseButtonData, _impl_.button_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseScrollData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::MouseScrollData, _impl_.type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::naki3d::common::protocol::MouseMoveData)},
  { 8, -1, -1, sizeof(::naki3d::common::protocol::MouseButtonData)},
  { 16, -1, -1, sizeof(::naki3d::common::protocol::MouseScrollData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::naki3d::common::protocol::_MouseMoveData_default_instance_._instance,
  &::naki3d::common::protocol::_MouseButtonData_default_instance_._instance,
  &::naki3d::common::protocol::_MouseScrollData_default_instance_._instance,
};

const char descriptor_table_protodef_mouse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013mouse.proto\022\026naki3d.common.protocol\032\013t"
  "ypes.proto\"u\n\rMouseMoveData\0221\n\010absolute\030"
  "\001 \001(\0132\037.naki3d.common.protocol.Vector2\0221"
  "\n\010relative\030\002 \001(\0132\037.naki3d.common.protoco"
  "l.Vector2\"[\n\017MouseButtonData\0225\n\004type\030\001 \001"
  "(\0162\'.naki3d.common.protocol.MouseActionT"
  "ype\022\021\n\tbutton_id\030\002 \001(\005\"H\n\017MouseScrollDat"
  "a\0225\n\004type\030\001 \001(\0162\'.naki3d.common.protocol"
  ".MouseScrollType*1\n\017MouseActionType\022\r\n\tB"
  "UTTON_UP\020\000\022\017\n\013BUTTON_DOWN\020\001*1\n\017MouseScro"
  "llType\022\r\n\tSCROLL_UP\020\000\022\017\n\013SCROLL_DOWN\020\001b\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_mouse_2eproto_deps[1] = {
  &::descriptor_table_types_2eproto,
};
static ::_pbi::once_flag descriptor_table_mouse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mouse_2eproto = {
    false, false, 446, descriptor_table_protodef_mouse_2eproto,
    "mouse.proto",
    &descriptor_table_mouse_2eproto_once, descriptor_table_mouse_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_mouse_2eproto::offsets,
    file_level_metadata_mouse_2eproto, file_level_enum_descriptors_mouse_2eproto,
    file_level_service_descriptors_mouse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mouse_2eproto_getter() {
  return &descriptor_table_mouse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mouse_2eproto(&descriptor_table_mouse_2eproto);
namespace naki3d {
namespace common {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mouse_2eproto);
  return file_level_enum_descriptors_mouse_2eproto[0];
}
bool MouseActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseScrollType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mouse_2eproto);
  return file_level_enum_descriptors_mouse_2eproto[1];
}
bool MouseScrollType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MouseMoveData::_Internal {
 public:
  static const ::naki3d::common::protocol::Vector2& absolute(const MouseMoveData* msg);
  static const ::naki3d::common::protocol::Vector2& relative(const MouseMoveData* msg);
};

const ::naki3d::common::protocol::Vector2&
MouseMoveData::_Internal::absolute(const MouseMoveData* msg) {
  return *msg->_impl_.absolute_;
}
const ::naki3d::common::protocol::Vector2&
MouseMoveData::_Internal::relative(const MouseMoveData* msg) {
  return *msg->_impl_.relative_;
}
void MouseMoveData::clear_absolute() {
  if (GetArenaForAllocation() == nullptr && _impl_.absolute_ != nullptr) {
    delete _impl_.absolute_;
  }
  _impl_.absolute_ = nullptr;
}
void MouseMoveData::clear_relative() {
  if (GetArenaForAllocation() == nullptr && _impl_.relative_ != nullptr) {
    delete _impl_.relative_;
  }
  _impl_.relative_ = nullptr;
}
MouseMoveData::MouseMoveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.MouseMoveData)
}
MouseMoveData::MouseMoveData(const MouseMoveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MouseMoveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.absolute_){nullptr}
    , decltype(_impl_.relative_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_absolute()) {
    _this->_impl_.absolute_ = new ::naki3d::common::protocol::Vector2(*from._impl_.absolute_);
  }
  if (from._internal_has_relative()) {
    _this->_impl_.relative_ = new ::naki3d::common::protocol::Vector2(*from._impl_.relative_);
  }
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.MouseMoveData)
}

inline void MouseMoveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.absolute_){nullptr}
    , decltype(_impl_.relative_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MouseMoveData::~MouseMoveData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.MouseMoveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MouseMoveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.absolute_;
  if (this != internal_default_instance()) delete _impl_.relative_;
}

void MouseMoveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MouseMoveData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.MouseMoveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.absolute_ != nullptr) {
    delete _impl_.absolute_;
  }
  _impl_.absolute_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relative_ != nullptr) {
    delete _impl_.relative_;
  }
  _impl_.relative_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseMoveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.Vector2 absolute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.Vector2 relative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MouseMoveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.MouseMoveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.Vector2 absolute = 1;
  if (this->_internal_has_absolute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::absolute(this),
        _Internal::absolute(this).GetCachedSize(), target, stream);
  }

  // .naki3d.common.protocol.Vector2 relative = 2;
  if (this->_internal_has_relative()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::relative(this),
        _Internal::relative(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.MouseMoveData)
  return target;
}

size_t MouseMoveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.MouseMoveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.Vector2 absolute = 1;
  if (this->_internal_has_absolute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.absolute_);
  }

  // .naki3d.common.protocol.Vector2 relative = 2;
  if (this->_internal_has_relative()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relative_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MouseMoveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MouseMoveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MouseMoveData::GetClassData() const { return &_class_data_; }


void MouseMoveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MouseMoveData*>(&to_msg);
  auto& from = static_cast<const MouseMoveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.MouseMoveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_absolute()) {
    _this->_internal_mutable_absolute()->::naki3d::common::protocol::Vector2::MergeFrom(
        from._internal_absolute());
  }
  if (from._internal_has_relative()) {
    _this->_internal_mutable_relative()->::naki3d::common::protocol::Vector2::MergeFrom(
        from._internal_relative());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MouseMoveData::CopyFrom(const MouseMoveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.MouseMoveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseMoveData::IsInitialized() const {
  return true;
}

void MouseMoveData::InternalSwap(MouseMoveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseMoveData, _impl_.relative_)
      + sizeof(MouseMoveData::_impl_.relative_)
      - PROTOBUF_FIELD_OFFSET(MouseMoveData, _impl_.absolute_)>(
          reinterpret_cast<char*>(&_impl_.absolute_),
          reinterpret_cast<char*>(&other->_impl_.absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseMoveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mouse_2eproto_getter, &descriptor_table_mouse_2eproto_once,
      file_level_metadata_mouse_2eproto[0]);
}

// ===================================================================

class MouseButtonData::_Internal {
 public:
};

MouseButtonData::MouseButtonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.MouseButtonData)
}
MouseButtonData::MouseButtonData(const MouseButtonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MouseButtonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.button_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.button_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.button_id_));
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.MouseButtonData)
}

inline void MouseButtonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.button_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MouseButtonData::~MouseButtonData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.MouseButtonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MouseButtonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MouseButtonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MouseButtonData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.MouseButtonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.button_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.button_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseButtonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.MouseActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::MouseActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 button_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.button_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MouseButtonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.MouseButtonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseActionType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 button_id = 2;
  if (this->_internal_button_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_button_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.MouseButtonData)
  return target;
}

size_t MouseButtonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.MouseButtonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseActionType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 button_id = 2;
  if (this->_internal_button_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_button_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MouseButtonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MouseButtonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MouseButtonData::GetClassData() const { return &_class_data_; }


void MouseButtonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MouseButtonData*>(&to_msg);
  auto& from = static_cast<const MouseButtonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.MouseButtonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_button_id() != 0) {
    _this->_internal_set_button_id(from._internal_button_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MouseButtonData::CopyFrom(const MouseButtonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.MouseButtonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseButtonData::IsInitialized() const {
  return true;
}

void MouseButtonData::InternalSwap(MouseButtonData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseButtonData, _impl_.button_id_)
      + sizeof(MouseButtonData::_impl_.button_id_)
      - PROTOBUF_FIELD_OFFSET(MouseButtonData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseButtonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mouse_2eproto_getter, &descriptor_table_mouse_2eproto_once,
      file_level_metadata_mouse_2eproto[1]);
}

// ===================================================================

class MouseScrollData::_Internal {
 public:
};

MouseScrollData::MouseScrollData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.MouseScrollData)
}
MouseScrollData::MouseScrollData(const MouseScrollData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MouseScrollData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.MouseScrollData)
}

inline void MouseScrollData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MouseScrollData::~MouseScrollData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.MouseScrollData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MouseScrollData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MouseScrollData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MouseScrollData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.MouseScrollData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseScrollData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.MouseScrollType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::MouseScrollType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MouseScrollData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.MouseScrollData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseScrollType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.MouseScrollData)
  return target;
}

size_t MouseScrollData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.MouseScrollData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.MouseScrollType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MouseScrollData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MouseScrollData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MouseScrollData::GetClassData() const { return &_class_data_; }


void MouseScrollData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MouseScrollData*>(&to_msg);
  auto& from = static_cast<const MouseScrollData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.MouseScrollData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MouseScrollData::CopyFrom(const MouseScrollData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.MouseScrollData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseScrollData::IsInitialized() const {
  return true;
}

void MouseScrollData::InternalSwap(MouseScrollData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseScrollData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mouse_2eproto_getter, &descriptor_table_mouse_2eproto_once,
      file_level_metadata_mouse_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::MouseMoveData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::MouseMoveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::MouseMoveData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::MouseButtonData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::MouseButtonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::MouseButtonData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::MouseScrollData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::MouseScrollData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::MouseScrollData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realsense.proto

#include "realsense.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace naki3d {
namespace common {
namespace protocol {
PROTOBUF_CONSTEXPR GestureData::GestureData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GestureDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GestureDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GestureDataDefaultTypeInternal() {}
  union {
    GestureData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GestureDataDefaultTypeInternal _GestureData_default_instance_;
PROTOBUF_CONSTEXPR HandMovementData::HandMovementData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proj_position_)*/nullptr
  , /*decltype(_impl_.hand_)*/0
  , /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandMovementDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandMovementDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandMovementDataDefaultTypeInternal() {}
  union {
    HandMovementData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandMovementDataDefaultTypeInternal _HandMovementData_default_instance_;
PROTOBUF_CONSTEXPR BestUserChangedData::BestUserChangedData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.best_user_id_)*/0
  , /*decltype(_impl_.user_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BestUserChangedDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BestUserChangedDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BestUserChangedDataDefaultTypeInternal() {}
  union {
    BestUserChangedData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BestUserChangedDataDefaultTypeInternal _BestUserChangedData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static ::_pb::Metadata file_level_metadata_realsense_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_realsense_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_realsense_2eproto = nullptr;

const uint32_t TableStruct_realsense_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::GestureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::GestureData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::GestureData, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::HandMovementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::HandMovementData, _impl_.hand_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::HandMovementData, _impl_.proj_position_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::HandMovementData, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::BestUserChangedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::BestUserChangedData, _impl_.best_user_id_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::BestUserChangedData, _impl_.user_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::naki3d::common::protocol::GestureData)},
  { 8, -1, -1, sizeof(::naki3d::common::protocol::HandMovementData)},
  { 17, -1, -1, sizeof(::naki3d::common::protocol::BestUserChangedData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::naki3d::common::protocol::_GestureData_default_instance_._instance,
  &::naki3d::common::protocol::_HandMovementData_default_instance_._instance,
  &::naki3d::common::protocol::_BestUserChangedData_default_instance_._instance,
};

const char descriptor_table_protodef_realsense_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017realsense.proto\022\026naki3d.common.protoco"
  "l\032\013types.proto\032\022handtracking.proto\"U\n\013Ge"
  "stureData\0225\n\004type\030\001 \001(\0162\'.naki3d.common."
  "protocol.HandGestureType\022\017\n\007user_id\030\002 \001("
  "\005\"\213\001\n\020HandMovementData\022.\n\004hand\030\001 \001(\0162 .n"
  "aki3d.common.protocol.HandSide\0226\n\rproj_p"
  "osition\030\002 \001(\0132\037.naki3d.common.protocol.V"
  "ector3\022\017\n\007user_id\030\003 \001(\005\"\?\n\023BestUserChang"
  "edData\022\024\n\014best_user_id\030\001 \001(\005\022\022\n\nuser_cou"
  "nt\030\002 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_realsense_2eproto_deps[2] = {
  &::descriptor_table_handtracking_2eproto,
  &::descriptor_table_types_2eproto,
};
static ::_pbi::once_flag descriptor_table_realsense_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_realsense_2eproto = {
    false, false, 376, descriptor_table_protodef_realsense_2eproto,
    "realsense.proto",
    &descriptor_table_realsense_2eproto_once, descriptor_table_realsense_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_realsense_2eproto::offsets,
    file_level_metadata_realsense_2eproto, file_level_enum_descriptors_realsense_2eproto,
    file_level_service_descriptors_realsense_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_realsense_2eproto_getter() {
  return &descriptor_table_realsense_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_realsense_2eproto(&descriptor_table_realsense_2eproto);
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class GestureData::_Internal {
 public:
};

GestureData::GestureData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.GestureData)
}
GestureData::GestureData(const GestureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GestureData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.GestureData)
}

inline void GestureData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.user_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GestureData::~GestureData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.GestureData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GestureData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GestureData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GestureData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.GestureData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GestureData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.HandGestureType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::naki3d::common::protocol::HandGestureType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GestureData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.GestureData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.HandGestureType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.GestureData)
  return target;
}

size_t GestureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.GestureData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.HandGestureType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GestureData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GestureData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GestureData::GetClassData() const { return &_class_data_; }


void GestureData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GestureData*>(&to_msg);
  auto& from = static_cast<const GestureData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.GestureData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GestureData::CopyFrom(const GestureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.GestureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GestureData::IsInitialized() const {
  return true;
}

void GestureData::InternalSwap(GestureData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GestureData, _impl_.user_id_)
      + sizeof(GestureData::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GestureData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GestureData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_realsense_2eproto_getter, &descriptor_table_realsense_2eproto_once,
      file_level_metadata_realsense_2eproto[0]);
}

// ===================================================================

class HandMovementData::_Internal {
 public:
  static const ::naki3d::common::protocol::Vector3& proj_position(const HandMovementData* msg);
};

const ::naki3d::common::protocol::Vector3&
HandMovementData::_Internal::proj_position(const HandMovementData* msg) {
  return *msg->_impl_.proj_position_;
}
void HandMovementData::clear_proj_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.proj_position_ != nullptr) {
    delete _impl_.proj_position_;
  }
  _impl_.proj_position_ = nullptr;
}
HandMovementData::HandMovementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.HandMovementData)
}
HandMovementData::HandMovementData(const HandMovementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandMovementData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proj_position_){nullptr}
    , decltype(_impl_.hand_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proj_position()) {
    _this->_impl_.proj_position_ = new ::naki3d::common::protocol::Vector3(*from._impl_.proj_position_);
  }
  ::memcpy(&_impl_.hand_, &from._impl_.hand_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.hand_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.HandMovementData)
}

inline void HandMovementData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proj_position_){nullptr}
    , decltype(_impl_.hand_){0}
    , decltype(_impl_.user_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandMovementData::~HandMovementData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.HandMovementData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandMovementData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.proj_position_;
}

void HandMovementData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandMovementData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.HandMovementData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.proj_position_ != nullptr) {
    delete _impl_.proj_position_;
  }
  _impl_.proj_position_ = nullptr;
  ::memset(&_impl_.hand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.hand_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandMovementData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.HandSide hand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hand(static_cast<::naki3d::common::protocol::HandSide>(val));
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.Vector3 proj_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proj_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandMovementData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.HandMovementData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.HandSide hand = 1;
  if (this->_internal_hand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hand(), target);
  }

  // .naki3d.common.protocol.Vector3 proj_position = 2;
  if (this->_internal_has_proj_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::proj_position(this),
        _Internal::proj_position(this).GetCachedSize(), target, stream);
  }

  // int32 user_id = 3;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.HandMovementData)
  return target;
}

size_t HandMovementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.HandMovementData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.Vector3 proj_position = 2;
  if (this->_internal_has_proj_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proj_position_);
  }

  // .naki3d.common.protocol.HandSide hand = 1;
  if (this->_internal_hand() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_hand());
  }

  // int32 user_id = 3;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandMovementData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandMovementData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandMovementData::GetClassData() const { return &_class_data_; }


void HandMovementData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandMovementData*>(&to_msg);
  auto& from = static_cast<const HandMovementData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.HandMovementData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proj_position()) {
    _this->_internal_mutable_proj_position()->::naki3d::common::protocol::Vector3::MergeFrom(
        from._internal_proj_position());
  }
  if (from._internal_hand() != 0) {
    _this->_internal_set_hand(from._internal_hand());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandMovementData::CopyFrom(const HandMovementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.HandMovementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandMovementData::IsInitialized() const {
  return true;
}

void HandMovementData::InternalSwap(HandMovementData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandMovementData, _impl_.user_id_)
      + sizeof(HandMovementData::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(HandMovementData, _impl_.proj_position_)>(
          reinterpret_cast<char*>(&_impl_.proj_position_),
          reinterpret_cast<char*>(&other->_impl_.proj_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HandMovementData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_realsense_2eproto_getter, &descriptor_table_realsense_2eproto_once,
      file_level_metadata_realsense_2eproto[1]);
}

// ===================================================================

class BestUserChangedData::_Internal {
 public:
};

BestUserChangedData::BestUserChangedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.BestUserChangedData)
}
BestUserChangedData::BestUserChangedData(const BestUserChangedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BestUserChangedData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.best_user_id_){}
    , decltype(_impl_.user_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.best_user_id_, &from._impl_.best_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_count_) -
    reinterpret_cast<char*>(&_impl_.best_user_id_)) + sizeof(_impl_.user_count_));
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.BestUserChangedData)
}

inline void BestUserChangedData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.best_user_id_){0}
    , decltype(_impl_.user_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BestUserChangedData::~BestUserChangedData() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.BestUserChangedData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BestUserChangedData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BestUserChangedData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BestUserChangedData::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.BestUserChangedData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.best_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_count_) -
      reinterpret_cast<char*>(&_impl_.best_user_id_)) + sizeof(_impl_.user_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BestUserChangedData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 best_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.best_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BestUserChangedData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.BestUserChangedData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 best_user_id = 1;
  if (this->_internal_best_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_best_user_id(), target);
  }

  // int32 user_count = 2;
  if (this->_internal_user_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.BestUserChangedData)
  return target;
}

size_t BestUserChangedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.BestUserChangedData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 best_user_id = 1;
  if (this->_internal_best_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_best_user_id());
  }

  // int32 user_count = 2;
  if (this->_internal_user_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BestUserChangedData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BestUserChangedData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BestUserChangedData::GetClassData() const { return &_class_data_; }


void BestUserChangedData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BestUserChangedData*>(&to_msg);
  auto& from = static_cast<const BestUserChangedData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.BestUserChangedData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_best_user_id() != 0) {
    _this->_internal_set_best_user_id(from._internal_best_user_id());
  }
  if (from._internal_user_count() != 0) {
    _this->_internal_set_user_count(from._internal_user_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BestUserChangedData::CopyFrom(const BestUserChangedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.BestUserChangedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestUserChangedData::IsInitialized() const {
  return true;
}

void BestUserChangedData::InternalSwap(BestUserChangedData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BestUserChangedData, _impl_.user_count_)
      + sizeof(BestUserChangedData::_impl_.user_count_)
      - PROTOBUF_FIELD_OFFSET(BestUserChangedData, _impl_.best_user_id_)>(
          reinterpret_cast<char*>(&_impl_.best_user_id_),
          reinterpret_cast<char*>(&other->_impl_.best_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BestUserChangedData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_realsense_2eproto_getter, &descriptor_table_realsense_2eproto_once,
      file_level_metadata_realsense_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::GestureData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::GestureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::GestureData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::HandMovementData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::HandMovementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::HandMovementData >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::BestUserChangedData*
Arena::CreateMaybeMessage< ::naki3d::common::protocol::BestUserChangedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::BestUserChangedData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

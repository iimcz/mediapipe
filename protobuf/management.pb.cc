// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: management.proto

#include "management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace naki3d {
namespace common {
namespace protocol {
constexpr LogsRequest::LogsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lines_(0){}
struct LogsRequestDefaultTypeInternal {
  constexpr LogsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogsRequestDefaultTypeInternal() {}
  union {
    LogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogsRequestDefaultTypeInternal _LogsRequest_default_instance_;
constexpr LogsResponse::LogsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_line_(){}
struct LogsResponseDefaultTypeInternal {
  constexpr LogsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogsResponseDefaultTypeInternal() {}
  union {
    LogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogsResponseDefaultTypeInternal _LogsResponse_default_instance_;
constexpr ServiceStatusRequest::ServiceStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServiceStatusRequestDefaultTypeInternal {
  constexpr ServiceStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceStatusRequestDefaultTypeInternal() {}
  union {
    ServiceStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
constexpr ServiceStatusResponse_Service::ServiceStatusResponse_Service(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct ServiceStatusResponse_ServiceDefaultTypeInternal {
  constexpr ServiceStatusResponse_ServiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceStatusResponse_ServiceDefaultTypeInternal() {}
  union {
    ServiceStatusResponse_Service _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceStatusResponse_ServiceDefaultTypeInternal _ServiceStatusResponse_Service_default_instance_;
constexpr ServiceStatusResponse::ServiceStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : services_(){}
struct ServiceStatusResponseDefaultTypeInternal {
  constexpr ServiceStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceStatusResponseDefaultTypeInternal() {}
  union {
    ServiceStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceStatusResponseDefaultTypeInternal _ServiceStatusResponse_default_instance_;
constexpr StartRequest::StartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mute_audio_(false){}
struct StartRequestDefaultTypeInternal {
  constexpr StartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartRequestDefaultTypeInternal() {}
  union {
    StartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartRequestDefaultTypeInternal _StartRequest_default_instance_;
constexpr ManagementResponse::ManagementResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_status_(0)
{}
struct ManagementResponseDefaultTypeInternal {
  constexpr ManagementResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ManagementResponseDefaultTypeInternal() {}
  union {
    ManagementResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ManagementResponseDefaultTypeInternal _ManagementResponse_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_management_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_management_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_management_2eproto = nullptr;

const uint32_t TableStruct_management_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LogsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LogsRequest, lines_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::LogsResponse, log_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ServiceStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ServiceStatusResponse_Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ServiceStatusResponse_Service, service_name_),
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ServiceStatusResponse_Service, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ServiceStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ServiceStatusResponse, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::StartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::StartRequest, mute_audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ManagementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::naki3d::common::protocol::ManagementResponse, device_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::naki3d::common::protocol::LogsRequest)},
  { 8, -1, -1, sizeof(::naki3d::common::protocol::LogsResponse)},
  { 15, -1, -1, sizeof(::naki3d::common::protocol::ServiceStatusRequest)},
  { 21, -1, -1, sizeof(::naki3d::common::protocol::ServiceStatusResponse_Service)},
  { 29, -1, -1, sizeof(::naki3d::common::protocol::ServiceStatusResponse)},
  { 36, -1, -1, sizeof(::naki3d::common::protocol::StartRequest)},
  { 43, -1, -1, sizeof(::naki3d::common::protocol::ManagementResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_LogsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_LogsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_ServiceStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_ServiceStatusResponse_Service_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_ServiceStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_StartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::naki3d::common::protocol::_ManagementResponse_default_instance_),
};

const char descriptor_table_protodef_management_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020management.proto\022\026naki3d.common.protoc"
  "ol\032\033google/protobuf/empty.proto\"+\n\013LogsR"
  "equest\022\022\n\005lines\030\001 \001(\005H\000\210\001\001B\010\n\006_lines\" \n\014"
  "LogsResponse\022\020\n\010log_line\030\001 \003(\t\"\026\n\024Servic"
  "eStatusRequest\"\236\002\n\025ServiceStatusResponse"
  "\022G\n\010services\030\001 \003(\01325.naki3d.common.proto"
  "col.ServiceStatusResponse.Service\032l\n\007Ser"
  "vice\022\024\n\014service_name\030\001 \001(\t\022K\n\006status\030\002 \001"
  "(\0162;.naki3d.common.protocol.ServiceStatu"
  "sResponse.ServiceStatus\"N\n\rServiceStatus"
  "\022\023\n\017SERVICE_STOPPED\020\000\022\023\n\017SERVICE_RUNNING"
  "\020\001\022\023\n\017SERVICE_CRASHED\020\002\"\"\n\014StartRequest\022"
  "\022\n\nmute_audio\030\001 \001(\010\"\207\001\n\022ManagementRespon"
  "se\022N\n\rdevice_status\030\001 \001(\01627.naki3d.commo"
  "n.protocol.ManagementResponse.DeviceStat"
  "us\"!\n\014DeviceStatus\022\006\n\002OK\020\000\022\t\n\005ERROR\020\0012\237\004"
  "\n\021ManagementService\022N\n\010Shutdown\022\026.google"
  ".protobuf.Empty\032*.naki3d.common.protocol"
  ".ManagementResponse\022L\n\006Reboot\022\026.google.p"
  "rotobuf.Empty\032*.naki3d.common.protocol.M"
  "anagementResponse\022Y\n\005Start\022$.naki3d.comm"
  "on.protocol.StartRequest\032*.naki3d.common"
  ".protocol.ManagementResponse\022J\n\004Stop\022\026.g"
  "oogle.protobuf.Empty\032*.naki3d.common.pro"
  "tocol.ManagementResponse\022T\n\007GetLogs\022#.na"
  "ki3d.common.protocol.LogsRequest\032$.naki3"
  "d.common.protocol.LogsResponse\022o\n\020GetSer"
  "viceStatus\022,.naki3d.common.protocol.Serv"
  "iceStatusRequest\032-.naki3d.common.protoco"
  "l.ServiceStatusResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_management_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_management_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_management_2eproto = {
  false, false, 1191, descriptor_table_protodef_management_2eproto, "management.proto", 
  &descriptor_table_management_2eproto_once, descriptor_table_management_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_management_2eproto::offsets,
  file_level_metadata_management_2eproto, file_level_enum_descriptors_management_2eproto, file_level_service_descriptors_management_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_management_2eproto_getter() {
  return &descriptor_table_management_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_management_2eproto(&descriptor_table_management_2eproto);
namespace naki3d {
namespace common {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceStatusResponse_ServiceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_management_2eproto);
  return file_level_enum_descriptors_management_2eproto[0];
}
bool ServiceStatusResponse_ServiceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServiceStatusResponse_ServiceStatus ServiceStatusResponse::SERVICE_STOPPED;
constexpr ServiceStatusResponse_ServiceStatus ServiceStatusResponse::SERVICE_RUNNING;
constexpr ServiceStatusResponse_ServiceStatus ServiceStatusResponse::SERVICE_CRASHED;
constexpr ServiceStatusResponse_ServiceStatus ServiceStatusResponse::ServiceStatus_MIN;
constexpr ServiceStatusResponse_ServiceStatus ServiceStatusResponse::ServiceStatus_MAX;
constexpr int ServiceStatusResponse::ServiceStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ManagementResponse_DeviceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_management_2eproto);
  return file_level_enum_descriptors_management_2eproto[1];
}
bool ManagementResponse_DeviceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ManagementResponse_DeviceStatus ManagementResponse::OK;
constexpr ManagementResponse_DeviceStatus ManagementResponse::ERROR;
constexpr ManagementResponse_DeviceStatus ManagementResponse::DeviceStatus_MIN;
constexpr ManagementResponse_DeviceStatus ManagementResponse::DeviceStatus_MAX;
constexpr int ManagementResponse::DeviceStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LogsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LogsRequest>()._has_bits_);
  static void set_has_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogsRequest::LogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.LogsRequest)
}
LogsRequest::LogsRequest(const LogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lines_ = from.lines_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LogsRequest)
}

inline void LogsRequest::SharedCtor() {
lines_ = 0;
}

LogsRequest::~LogsRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LogsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogsRequest::ArenaDtor(void* object) {
  LogsRequest* _this = reinterpret_cast< LogsRequest* >(object);
  (void)_this;
}
void LogsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LogsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lines(&has_bits);
          lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LogsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 lines = 1;
  if (_internal_has_lines()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lines(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LogsRequest)
  return target;
}

size_t LogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LogsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 lines = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lines());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsRequest::GetClassData() const { return &_class_data_; }

void LogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogsRequest *>(to)->MergeFrom(
      static_cast<const LogsRequest &>(from));
}


void LogsRequest::MergeFrom(const LogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lines()) {
    _internal_set_lines(from._internal_lines());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsRequest::CopyFrom(const LogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsRequest::IsInitialized() const {
  return true;
}

void LogsRequest::InternalSwap(LogsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lines_, other->lines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_management_2eproto_getter, &descriptor_table_management_2eproto_once,
      file_level_metadata_management_2eproto[0]);
}

// ===================================================================

class LogsResponse::_Internal {
 public:
};

LogsResponse::LogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  log_line_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.LogsResponse)
}
LogsResponse::LogsResponse(const LogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      log_line_(from.log_line_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.LogsResponse)
}

inline void LogsResponse::SharedCtor() {
}

LogsResponse::~LogsResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.LogsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogsResponse::ArenaDtor(void* object) {
  LogsResponse* _this = reinterpret_cast< LogsResponse* >(object);
  (void)_this;
}
void LogsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.LogsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_line_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string log_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_log_line();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.LogsResponse.log_line"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.LogsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string log_line = 1;
  for (int i = 0, n = this->_internal_log_line_size(); i < n; i++) {
    const auto& s = this->_internal_log_line(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.LogsResponse.log_line");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.LogsResponse)
  return target;
}

size_t LogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.LogsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string log_line = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(log_line_.size());
  for (int i = 0, n = log_line_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      log_line_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsResponse::GetClassData() const { return &_class_data_; }

void LogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogsResponse *>(to)->MergeFrom(
      static_cast<const LogsResponse &>(from));
}


void LogsResponse::MergeFrom(const LogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.LogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  log_line_.MergeFrom(from.log_line_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsResponse::CopyFrom(const LogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.LogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsResponse::IsInitialized() const {
  return true;
}

void LogsResponse::InternalSwap(LogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  log_line_.InternalSwap(&other->log_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_management_2eproto_getter, &descriptor_table_management_2eproto_once,
      file_level_metadata_management_2eproto[1]);
}

// ===================================================================

class ServiceStatusRequest::_Internal {
 public:
};

ServiceStatusRequest::ServiceStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.ServiceStatusRequest)
}
ServiceStatusRequest::ServiceStatusRequest(const ServiceStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ServiceStatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceStatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServiceStatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_management_2eproto_getter, &descriptor_table_management_2eproto_once,
      file_level_metadata_management_2eproto[2]);
}

// ===================================================================

class ServiceStatusResponse_Service::_Internal {
 public:
};

ServiceStatusResponse_Service::ServiceStatusResponse_Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.ServiceStatusResponse.Service)
}
ServiceStatusResponse_Service::ServiceStatusResponse_Service(const ServiceStatusResponse_Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ServiceStatusResponse.Service)
}

inline void ServiceStatusResponse_Service::SharedCtor() {
service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

ServiceStatusResponse_Service::~ServiceStatusResponse_Service() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.ServiceStatusResponse.Service)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceStatusResponse_Service::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceStatusResponse_Service::ArenaDtor(void* object) {
  ServiceStatusResponse_Service* _this = reinterpret_cast< ServiceStatusResponse_Service* >(object);
  (void)_this;
}
void ServiceStatusResponse_Service::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceStatusResponse_Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceStatusResponse_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.ServiceStatusResponse.Service)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceStatusResponse_Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "naki3d.common.protocol.ServiceStatusResponse.Service.service_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .naki3d.common.protocol.ServiceStatusResponse.ServiceStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceStatusResponse_Service::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.ServiceStatusResponse.Service)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "naki3d.common.protocol.ServiceStatusResponse.Service.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // .naki3d.common.protocol.ServiceStatusResponse.ServiceStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.ServiceStatusResponse.Service)
  return target;
}

size_t ServiceStatusResponse_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.ServiceStatusResponse.Service)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // .naki3d.common.protocol.ServiceStatusResponse.ServiceStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceStatusResponse_Service::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceStatusResponse_Service::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceStatusResponse_Service::GetClassData() const { return &_class_data_; }

void ServiceStatusResponse_Service::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceStatusResponse_Service *>(to)->MergeFrom(
      static_cast<const ServiceStatusResponse_Service &>(from));
}


void ServiceStatusResponse_Service::MergeFrom(const ServiceStatusResponse_Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.ServiceStatusResponse.Service)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceStatusResponse_Service::CopyFrom(const ServiceStatusResponse_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.ServiceStatusResponse.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatusResponse_Service::IsInitialized() const {
  return true;
}

void ServiceStatusResponse_Service::InternalSwap(ServiceStatusResponse_Service* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceStatusResponse_Service::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_management_2eproto_getter, &descriptor_table_management_2eproto_once,
      file_level_metadata_management_2eproto[3]);
}

// ===================================================================

class ServiceStatusResponse::_Internal {
 public:
};

ServiceStatusResponse::ServiceStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  services_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.ServiceStatusResponse)
}
ServiceStatusResponse::ServiceStatusResponse(const ServiceStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      services_(from.services_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ServiceStatusResponse)
}

inline void ServiceStatusResponse::SharedCtor() {
}

ServiceStatusResponse::~ServiceStatusResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.ServiceStatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServiceStatusResponse::ArenaDtor(void* object) {
  ServiceStatusResponse* _this = reinterpret_cast< ServiceStatusResponse* >(object);
  (void)_this;
}
void ServiceStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.ServiceStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .naki3d.common.protocol.ServiceStatusResponse.Service services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.ServiceStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.ServiceStatusResponse.Service services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_services(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.ServiceStatusResponse)
  return target;
}

size_t ServiceStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.ServiceStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .naki3d.common.protocol.ServiceStatusResponse.Service services = 1;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceStatusResponse::GetClassData() const { return &_class_data_; }

void ServiceStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceStatusResponse *>(to)->MergeFrom(
      static_cast<const ServiceStatusResponse &>(from));
}


void ServiceStatusResponse::MergeFrom(const ServiceStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.ServiceStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceStatusResponse::CopyFrom(const ServiceStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.ServiceStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatusResponse::IsInitialized() const {
  return true;
}

void ServiceStatusResponse::InternalSwap(ServiceStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  services_.InternalSwap(&other->services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceStatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_management_2eproto_getter, &descriptor_table_management_2eproto_once,
      file_level_metadata_management_2eproto[4]);
}

// ===================================================================

class StartRequest::_Internal {
 public:
};

StartRequest::StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.StartRequest)
}
StartRequest::StartRequest(const StartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mute_audio_ = from.mute_audio_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.StartRequest)
}

inline void StartRequest::SharedCtor() {
mute_audio_ = false;
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.StartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartRequest::ArenaDtor(void* object) {
  StartRequest* _this = reinterpret_cast< StartRequest* >(object);
  (void)_this;
}
void StartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.StartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mute_audio_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool mute_audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mute_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.StartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool mute_audio = 1;
  if (this->_internal_mute_audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mute_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.StartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool mute_audio = 1;
  if (this->_internal_mute_audio() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRequest::GetClassData() const { return &_class_data_; }

void StartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRequest *>(to)->MergeFrom(
      static_cast<const StartRequest &>(from));
}


void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mute_audio() != 0) {
    _internal_set_mute_audio(from._internal_mute_audio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {
  return true;
}

void StartRequest::InternalSwap(StartRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mute_audio_, other->mute_audio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_management_2eproto_getter, &descriptor_table_management_2eproto_once,
      file_level_metadata_management_2eproto[5]);
}

// ===================================================================

class ManagementResponse::_Internal {
 public:
};

ManagementResponse::ManagementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:naki3d.common.protocol.ManagementResponse)
}
ManagementResponse::ManagementResponse(const ManagementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_status_ = from.device_status_;
  // @@protoc_insertion_point(copy_constructor:naki3d.common.protocol.ManagementResponse)
}

inline void ManagementResponse::SharedCtor() {
device_status_ = 0;
}

ManagementResponse::~ManagementResponse() {
  // @@protoc_insertion_point(destructor:naki3d.common.protocol.ManagementResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ManagementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ManagementResponse::ArenaDtor(void* object) {
  ManagementResponse* _this = reinterpret_cast< ManagementResponse* >(object);
  (void)_this;
}
void ManagementResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManagementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ManagementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:naki3d.common.protocol.ManagementResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManagementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .naki3d.common.protocol.ManagementResponse.DeviceStatus device_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_status(static_cast<::naki3d::common::protocol::ManagementResponse_DeviceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ManagementResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:naki3d.common.protocol.ManagementResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .naki3d.common.protocol.ManagementResponse.DeviceStatus device_status = 1;
  if (this->_internal_device_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_device_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naki3d.common.protocol.ManagementResponse)
  return target;
}

size_t ManagementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naki3d.common.protocol.ManagementResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .naki3d.common.protocol.ManagementResponse.DeviceStatus device_status = 1;
  if (this->_internal_device_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManagementResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ManagementResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManagementResponse::GetClassData() const { return &_class_data_; }

void ManagementResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ManagementResponse *>(to)->MergeFrom(
      static_cast<const ManagementResponse &>(from));
}


void ManagementResponse::MergeFrom(const ManagementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naki3d.common.protocol.ManagementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device_status() != 0) {
    _internal_set_device_status(from._internal_device_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManagementResponse::CopyFrom(const ManagementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naki3d.common.protocol.ManagementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagementResponse::IsInitialized() const {
  return true;
}

void ManagementResponse::InternalSwap(ManagementResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_status_, other->device_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManagementResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_management_2eproto_getter, &descriptor_table_management_2eproto_once,
      file_level_metadata_management_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::LogsRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::LogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::LogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::LogsResponse* Arena::CreateMaybeMessage< ::naki3d::common::protocol::LogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::LogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::ServiceStatusRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::ServiceStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::ServiceStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::ServiceStatusResponse_Service* Arena::CreateMaybeMessage< ::naki3d::common::protocol::ServiceStatusResponse_Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::ServiceStatusResponse_Service >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::ServiceStatusResponse* Arena::CreateMaybeMessage< ::naki3d::common::protocol::ServiceStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::ServiceStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::StartRequest* Arena::CreateMaybeMessage< ::naki3d::common::protocol::StartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::StartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::naki3d::common::protocol::ManagementResponse* Arena::CreateMaybeMessage< ::naki3d::common::protocol::ManagementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::naki3d::common::protocol::ManagementResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class ClearPackage;
struct ClearPackageDefaultTypeInternal;
extern ClearPackageDefaultTypeInternal _ClearPackage_default_instance_;
class LoadPackage;
struct LoadPackageDefaultTypeInternal;
extern LoadPackageDefaultTypeInternal _LoadPackage_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::ClearPackage* Arena::CreateMaybeMessage<::naki3d::common::protocol::ClearPackage>(Arena*);
template<> ::naki3d::common::protocol::LoadPackage* Arena::CreateMaybeMessage<::naki3d::common::protocol::LoadPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class LoadPackage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LoadPackage) */ {
 public:
  inline LoadPackage() : LoadPackage(nullptr) {}
  ~LoadPackage() override;
  explicit PROTOBUF_CONSTEXPR LoadPackage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadPackage(const LoadPackage& from);
  LoadPackage(LoadPackage&& from) noexcept
    : LoadPackage() {
    *this = ::std::move(from);
  }

  inline LoadPackage& operator=(const LoadPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPackage& operator=(LoadPackage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadPackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadPackage* internal_default_instance() {
    return reinterpret_cast<const LoadPackage*>(
               &_LoadPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadPackage& a, LoadPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPackage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadPackage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadPackage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadPackage& from) {
    LoadPackage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPackage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.LoadPackage";
  }
  protected:
  explicit LoadPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorJsonFieldNumber = 1,
    kIsPreviewFieldNumber = 2,
  };
  // string descriptor_json = 1;
  void clear_descriptor_json();
  const std::string& descriptor_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptor_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptor_json();
  PROTOBUF_NODISCARD std::string* release_descriptor_json();
  void set_allocated_descriptor_json(std::string* descriptor_json);
  private:
  const std::string& _internal_descriptor_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptor_json(const std::string& value);
  std::string* _internal_mutable_descriptor_json();
  public:

  // bool is_preview = 2;
  void clear_is_preview();
  bool is_preview() const;
  void set_is_preview(bool value);
  private:
  bool _internal_is_preview() const;
  void _internal_set_is_preview(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LoadPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor_json_;
    bool is_preview_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class ClearPackage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ClearPackage) */ {
 public:
  inline ClearPackage() : ClearPackage(nullptr) {}
  ~ClearPackage() override;
  explicit PROTOBUF_CONSTEXPR ClearPackage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearPackage(const ClearPackage& from);
  ClearPackage(ClearPackage&& from) noexcept
    : ClearPackage() {
    *this = ::std::move(from);
  }

  inline ClearPackage& operator=(const ClearPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearPackage& operator=(ClearPackage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearPackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearPackage* internal_default_instance() {
    return reinterpret_cast<const ClearPackage*>(
               &_ClearPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClearPackage& a, ClearPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearPackage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearPackage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClearPackage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClearPackage& from) {
    ClearPackage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearPackage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ClearPackage";
  }
  protected:
  explicit ClearPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurgeDataFieldNumber = 1,
  };
  // bool purge_data = 1;
  void clear_purge_data();
  bool purge_data() const;
  void set_purge_data(bool value);
  private:
  bool _internal_purge_data() const;
  void _internal_set_purge_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ClearPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool purge_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_commands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadPackage

// string descriptor_json = 1;
inline void LoadPackage::clear_descriptor_json() {
  _impl_.descriptor_json_.ClearToEmpty();
}
inline const std::string& LoadPackage::descriptor_json() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackage.descriptor_json)
  return _internal_descriptor_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadPackage::set_descriptor_json(ArgT0&& arg0, ArgT... args) {
 
 _impl_.descriptor_json_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackage.descriptor_json)
}
inline std::string* LoadPackage::mutable_descriptor_json() {
  std::string* _s = _internal_mutable_descriptor_json();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LoadPackage.descriptor_json)
  return _s;
}
inline const std::string& LoadPackage::_internal_descriptor_json() const {
  return _impl_.descriptor_json_.Get();
}
inline void LoadPackage::_internal_set_descriptor_json(const std::string& value) {
  
  _impl_.descriptor_json_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadPackage::_internal_mutable_descriptor_json() {
  
  return _impl_.descriptor_json_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadPackage::release_descriptor_json() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.LoadPackage.descriptor_json)
  return _impl_.descriptor_json_.Release();
}
inline void LoadPackage::set_allocated_descriptor_json(std::string* descriptor_json) {
  if (descriptor_json != nullptr) {
    
  } else {
    
  }
  _impl_.descriptor_json_.SetAllocated(descriptor_json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.descriptor_json_.IsDefault()) {
    _impl_.descriptor_json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.LoadPackage.descriptor_json)
}

// bool is_preview = 2;
inline void LoadPackage::clear_is_preview() {
  _impl_.is_preview_ = false;
}
inline bool LoadPackage::_internal_is_preview() const {
  return _impl_.is_preview_;
}
inline bool LoadPackage::is_preview() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackage.is_preview)
  return _internal_is_preview();
}
inline void LoadPackage::_internal_set_is_preview(bool value) {
  
  _impl_.is_preview_ = value;
}
inline void LoadPackage::set_is_preview(bool value) {
  _internal_set_is_preview(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackage.is_preview)
}

// -------------------------------------------------------------------

// ClearPackage

// bool purge_data = 1;
inline void ClearPackage::clear_purge_data() {
  _impl_.purge_data_ = false;
}
inline bool ClearPackage::_internal_purge_data() const {
  return _impl_.purge_data_;
}
inline bool ClearPackage::purge_data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ClearPackage.purge_data)
  return _internal_purge_data();
}
inline void ClearPackage::_internal_set_purge_data(bool value) {
  
  _impl_.purge_data_ = value;
}
inline void ClearPackage::set_purge_data(bool value) {
  _internal_set_purge_data(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ClearPackage.purge_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands_2eproto

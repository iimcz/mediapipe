// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class ClearPackage;
class ClearPackageDefaultTypeInternal;
extern ClearPackageDefaultTypeInternal _ClearPackage_default_instance_;
class LoadPackage;
class LoadPackageDefaultTypeInternal;
extern LoadPackageDefaultTypeInternal _LoadPackage_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::ClearPackage* Arena::CreateMaybeMessage<::naki3d::common::protocol::ClearPackage>(Arena*);
template<> ::naki3d::common::protocol::LoadPackage* Arena::CreateMaybeMessage<::naki3d::common::protocol::LoadPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class LoadPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LoadPackage) */ {
 public:
  inline LoadPackage() : LoadPackage(nullptr) {};
  virtual ~LoadPackage();

  LoadPackage(const LoadPackage& from);
  LoadPackage(LoadPackage&& from) noexcept
    : LoadPackage() {
    *this = ::std::move(from);
  }

  inline LoadPackage& operator=(const LoadPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPackage& operator=(LoadPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPackage* internal_default_instance() {
    return reinterpret_cast<const LoadPackage*>(
               &_LoadPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadPackage& a, LoadPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPackage* New() const final {
    return CreateMaybeMessage<LoadPackage>(nullptr);
  }

  LoadPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPackage& from);
  void MergeFrom(const LoadPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.LoadPackage";
  }
  protected:
  explicit LoadPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorJsonFieldNumber = 1,
    kIsPreviewFieldNumber = 2,
  };
  // string descriptor_json = 1;
  void clear_descriptor_json();
  const std::string& descriptor_json() const;
  void set_descriptor_json(const std::string& value);
  void set_descriptor_json(std::string&& value);
  void set_descriptor_json(const char* value);
  void set_descriptor_json(const char* value, size_t size);
  std::string* mutable_descriptor_json();
  std::string* release_descriptor_json();
  void set_allocated_descriptor_json(std::string* descriptor_json);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_descriptor_json();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_descriptor_json(
      std::string* descriptor_json);
  private:
  const std::string& _internal_descriptor_json() const;
  void _internal_set_descriptor_json(const std::string& value);
  std::string* _internal_mutable_descriptor_json();
  public:

  // bool is_preview = 2;
  void clear_is_preview();
  bool is_preview() const;
  void set_is_preview(bool value);
  private:
  bool _internal_is_preview() const;
  void _internal_set_is_preview(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LoadPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor_json_;
  bool is_preview_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class ClearPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ClearPackage) */ {
 public:
  inline ClearPackage() : ClearPackage(nullptr) {};
  virtual ~ClearPackage();

  ClearPackage(const ClearPackage& from);
  ClearPackage(ClearPackage&& from) noexcept
    : ClearPackage() {
    *this = ::std::move(from);
  }

  inline ClearPackage& operator=(const ClearPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearPackage& operator=(ClearPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearPackage* internal_default_instance() {
    return reinterpret_cast<const ClearPackage*>(
               &_ClearPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClearPackage& a, ClearPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearPackage* New() const final {
    return CreateMaybeMessage<ClearPackage>(nullptr);
  }

  ClearPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearPackage& from);
  void MergeFrom(const ClearPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ClearPackage";
  }
  protected:
  explicit ClearPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurgeDataFieldNumber = 1,
  };
  // bool purge_data = 1;
  void clear_purge_data();
  bool purge_data() const;
  void set_purge_data(bool value);
  private:
  bool _internal_purge_data() const;
  void _internal_set_purge_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ClearPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool purge_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadPackage

// string descriptor_json = 1;
inline void LoadPackage::clear_descriptor_json() {
  descriptor_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadPackage::descriptor_json() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackage.descriptor_json)
  return _internal_descriptor_json();
}
inline void LoadPackage::set_descriptor_json(const std::string& value) {
  _internal_set_descriptor_json(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackage.descriptor_json)
}
inline std::string* LoadPackage::mutable_descriptor_json() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LoadPackage.descriptor_json)
  return _internal_mutable_descriptor_json();
}
inline const std::string& LoadPackage::_internal_descriptor_json() const {
  return descriptor_json_.Get();
}
inline void LoadPackage::_internal_set_descriptor_json(const std::string& value) {
  
  descriptor_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadPackage::set_descriptor_json(std::string&& value) {
  
  descriptor_json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:naki3d.common.protocol.LoadPackage.descriptor_json)
}
inline void LoadPackage::set_descriptor_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptor_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.LoadPackage.descriptor_json)
}
inline void LoadPackage::set_descriptor_json(const char* value,
    size_t size) {
  
  descriptor_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.LoadPackage.descriptor_json)
}
inline std::string* LoadPackage::_internal_mutable_descriptor_json() {
  
  return descriptor_json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadPackage::release_descriptor_json() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.LoadPackage.descriptor_json)
  return descriptor_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadPackage::set_allocated_descriptor_json(std::string* descriptor_json) {
  if (descriptor_json != nullptr) {
    
  } else {
    
  }
  descriptor_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptor_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.LoadPackage.descriptor_json)
}
inline std::string* LoadPackage::unsafe_arena_release_descriptor_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:naki3d.common.protocol.LoadPackage.descriptor_json)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return descriptor_json_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadPackage::unsafe_arena_set_allocated_descriptor_json(
    std::string* descriptor_json) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (descriptor_json != nullptr) {
    
  } else {
    
  }
  descriptor_json_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      descriptor_json, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.LoadPackage.descriptor_json)
}

// bool is_preview = 2;
inline void LoadPackage::clear_is_preview() {
  is_preview_ = false;
}
inline bool LoadPackage::_internal_is_preview() const {
  return is_preview_;
}
inline bool LoadPackage::is_preview() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackage.is_preview)
  return _internal_is_preview();
}
inline void LoadPackage::_internal_set_is_preview(bool value) {
  
  is_preview_ = value;
}
inline void LoadPackage::set_is_preview(bool value) {
  _internal_set_is_preview(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackage.is_preview)
}

// -------------------------------------------------------------------

// ClearPackage

// bool purge_data = 1;
inline void ClearPackage::clear_purge_data() {
  purge_data_ = false;
}
inline bool ClearPackage::_internal_purge_data() const {
  return purge_data_;
}
inline bool ClearPackage::purge_data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ClearPackage.purge_data)
  return _internal_purge_data();
}
inline void ClearPackage::_internal_set_purge_data(bool value) {
  
  purge_data_ = value;
}
inline void ClearPackage::set_purge_data(bool value) {
  _internal_set_purge_data(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ClearPackage.purge_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emt-grpc.proto

#ifndef PROTOBUF_emt_2dgrpc_2eproto__INCLUDED
#define PROTOBUF_emt_2dgrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "discovery.pb.h"
// @@protoc_insertion_point(includes)

namespace naki3d {
namespace common {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_emt_2dgrpc_2eproto();
void protobuf_AssignDesc_emt_2dgrpc_2eproto();
void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

class BeaconMessage;
class CachedPackagesResponse;
class CachedPackagesResponse_SinglePackage;
class ClearStartupPackageRequest;
class DeviceDescriptorResponse;
class LoadPackageRequest;
class LogsRequest;
class LogsResponse;
class PingRequest;
class PingResponse;
class SetStartupPackageRequest;
class StartPackageRequest;
class StartupPackageResponse;

// ===================================================================

class BeaconMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.BeaconMessage) */ {
 public:
  BeaconMessage();
  virtual ~BeaconMessage();

  BeaconMessage(const BeaconMessage& from);

  inline BeaconMessage& operator=(const BeaconMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeaconMessage& default_instance();

  void Swap(BeaconMessage* other);

  // implements Message ----------------------------------------------

  inline BeaconMessage* New() const { return New(NULL); }

  BeaconMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeaconMessage& from);
  void MergeFrom(const BeaconMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeaconMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 protocol_version = 1;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::int32 protocol_version() const;
  void set_protocol_version(::google::protobuf::int32 value);

  // optional string hostname = 2;
  void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional string device_type = 3;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 3;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.BeaconMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::google::protobuf::int32 protocol_version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static BeaconMessage* default_instance_;
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  void Swap(PingRequest* other);

  // implements Message ----------------------------------------------

  inline PingRequest* New() const { return New(NULL); }

  PingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static PingRequest* default_instance_;
};
// -------------------------------------------------------------------

class PingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.PingResponse) */ {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponse& default_instance();

  void Swap(PingResponse* other);

  // implements Message ----------------------------------------------

  inline PingResponse* New() const { return New(NULL); }

  PingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string echo = 1;
  void clear_echo();
  static const int kEchoFieldNumber = 1;
  const ::std::string& echo() const;
  void set_echo(const ::std::string& value);
  void set_echo(const char* value);
  void set_echo(const char* value, size_t size);
  ::std::string* mutable_echo();
  ::std::string* release_echo();
  void set_allocated_echo(::std::string* echo);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.PingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr echo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static PingResponse* default_instance_;
};
// -------------------------------------------------------------------

class LogsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LogsRequest) */ {
 public:
  LogsRequest();
  virtual ~LogsRequest();

  LogsRequest(const LogsRequest& from);

  inline LogsRequest& operator=(const LogsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogsRequest& default_instance();

  void Swap(LogsRequest* other);

  // implements Message ----------------------------------------------

  inline LogsRequest* New() const { return New(NULL); }

  LogsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogsRequest& from);
  void MergeFrom(const LogsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lines = 1;
  void clear_lines();
  static const int kLinesFieldNumber = 1;
  ::google::protobuf::int32 lines() const;
  void set_lines(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LogsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 lines_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static LogsRequest* default_instance_;
};
// -------------------------------------------------------------------

class LogsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LogsResponse) */ {
 public:
  LogsResponse();
  virtual ~LogsResponse();

  LogsResponse(const LogsResponse& from);

  inline LogsResponse& operator=(const LogsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogsResponse& default_instance();

  void Swap(LogsResponse* other);

  // implements Message ----------------------------------------------

  inline LogsResponse* New() const { return New(NULL); }

  LogsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogsResponse& from);
  void MergeFrom(const LogsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string log_line = 1;
  int log_line_size() const;
  void clear_log_line();
  static const int kLogLineFieldNumber = 1;
  const ::std::string& log_line(int index) const;
  ::std::string* mutable_log_line(int index);
  void set_log_line(int index, const ::std::string& value);
  void set_log_line(int index, const char* value);
  void set_log_line(int index, const char* value, size_t size);
  ::std::string* add_log_line();
  void add_log_line(const ::std::string& value);
  void add_log_line(const char* value);
  void add_log_line(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& log_line() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_log_line();

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LogsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> log_line_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static LogsResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoadPackageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LoadPackageRequest) */ {
 public:
  LoadPackageRequest();
  virtual ~LoadPackageRequest();

  LoadPackageRequest(const LoadPackageRequest& from);

  inline LoadPackageRequest& operator=(const LoadPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadPackageRequest& default_instance();

  void Swap(LoadPackageRequest* other);

  // implements Message ----------------------------------------------

  inline LoadPackageRequest* New() const { return New(NULL); }

  LoadPackageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadPackageRequest& from);
  void MergeFrom(const LoadPackageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadPackageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string descriptor_json = 1;
  void clear_descriptor_json();
  static const int kDescriptorJsonFieldNumber = 1;
  const ::std::string& descriptor_json() const;
  void set_descriptor_json(const ::std::string& value);
  void set_descriptor_json(const char* value);
  void set_descriptor_json(const char* value, size_t size);
  ::std::string* mutable_descriptor_json();
  ::std::string* release_descriptor_json();
  void set_allocated_descriptor_json(::std::string* descriptor_json);

  // optional bool is_preview = 2;
  void clear_is_preview();
  static const int kIsPreviewFieldNumber = 2;
  bool is_preview() const;
  void set_is_preview(bool value);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LoadPackageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_json_;
  bool is_preview_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static LoadPackageRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClearStartupPackageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ClearStartupPackageRequest) */ {
 public:
  ClearStartupPackageRequest();
  virtual ~ClearStartupPackageRequest();

  ClearStartupPackageRequest(const ClearStartupPackageRequest& from);

  inline ClearStartupPackageRequest& operator=(const ClearStartupPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearStartupPackageRequest& default_instance();

  void Swap(ClearStartupPackageRequest* other);

  // implements Message ----------------------------------------------

  inline ClearStartupPackageRequest* New() const { return New(NULL); }

  ClearStartupPackageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearStartupPackageRequest& from);
  void MergeFrom(const ClearStartupPackageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearStartupPackageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool purge_data = 1;
  void clear_purge_data();
  static const int kPurgeDataFieldNumber = 1;
  bool purge_data() const;
  void set_purge_data(bool value);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ClearStartupPackageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool purge_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static ClearStartupPackageRequest* default_instance_;
};
// -------------------------------------------------------------------

class StartupPackageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.StartupPackageResponse) */ {
 public:
  StartupPackageResponse();
  virtual ~StartupPackageResponse();

  StartupPackageResponse(const StartupPackageResponse& from);

  inline StartupPackageResponse& operator=(const StartupPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartupPackageResponse& default_instance();

  void Swap(StartupPackageResponse* other);

  // implements Message ----------------------------------------------

  inline StartupPackageResponse* New() const { return New(NULL); }

  StartupPackageResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartupPackageResponse& from);
  void MergeFrom(const StartupPackageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartupPackageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string package_id = 1;
  void clear_package_id();
  static const int kPackageIdFieldNumber = 1;
  const ::std::string& package_id() const;
  void set_package_id(const ::std::string& value);
  void set_package_id(const char* value);
  void set_package_id(const char* value, size_t size);
  ::std::string* mutable_package_id();
  ::std::string* release_package_id();
  void set_allocated_package_id(::std::string* package_id);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.StartupPackageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr package_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static StartupPackageResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetStartupPackageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SetStartupPackageRequest) */ {
 public:
  SetStartupPackageRequest();
  virtual ~SetStartupPackageRequest();

  SetStartupPackageRequest(const SetStartupPackageRequest& from);

  inline SetStartupPackageRequest& operator=(const SetStartupPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetStartupPackageRequest& default_instance();

  void Swap(SetStartupPackageRequest* other);

  // implements Message ----------------------------------------------

  inline SetStartupPackageRequest* New() const { return New(NULL); }

  SetStartupPackageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetStartupPackageRequest& from);
  void MergeFrom(const SetStartupPackageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetStartupPackageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string package_id = 1;
  void clear_package_id();
  static const int kPackageIdFieldNumber = 1;
  const ::std::string& package_id() const;
  void set_package_id(const ::std::string& value);
  void set_package_id(const char* value);
  void set_package_id(const char* value, size_t size);
  ::std::string* mutable_package_id();
  ::std::string* release_package_id();
  void set_allocated_package_id(::std::string* package_id);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SetStartupPackageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr package_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static SetStartupPackageRequest* default_instance_;
};
// -------------------------------------------------------------------

class StartPackageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.StartPackageRequest) */ {
 public:
  StartPackageRequest();
  virtual ~StartPackageRequest();

  StartPackageRequest(const StartPackageRequest& from);

  inline StartPackageRequest& operator=(const StartPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartPackageRequest& default_instance();

  void Swap(StartPackageRequest* other);

  // implements Message ----------------------------------------------

  inline StartPackageRequest* New() const { return New(NULL); }

  StartPackageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartPackageRequest& from);
  void MergeFrom(const StartPackageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartPackageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string package_id = 1;
  void clear_package_id();
  static const int kPackageIdFieldNumber = 1;
  const ::std::string& package_id() const;
  void set_package_id(const ::std::string& value);
  void set_package_id(const char* value);
  void set_package_id(const char* value, size_t size);
  ::std::string* mutable_package_id();
  ::std::string* release_package_id();
  void set_allocated_package_id(::std::string* package_id);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.StartPackageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr package_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static StartPackageRequest* default_instance_;
};
// -------------------------------------------------------------------

class CachedPackagesResponse_SinglePackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.CachedPackagesResponse.SinglePackage) */ {
 public:
  CachedPackagesResponse_SinglePackage();
  virtual ~CachedPackagesResponse_SinglePackage();

  CachedPackagesResponse_SinglePackage(const CachedPackagesResponse_SinglePackage& from);

  inline CachedPackagesResponse_SinglePackage& operator=(const CachedPackagesResponse_SinglePackage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CachedPackagesResponse_SinglePackage& default_instance();

  void Swap(CachedPackagesResponse_SinglePackage* other);

  // implements Message ----------------------------------------------

  inline CachedPackagesResponse_SinglePackage* New() const { return New(NULL); }

  CachedPackagesResponse_SinglePackage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachedPackagesResponse_SinglePackage& from);
  void MergeFrom(const CachedPackagesResponse_SinglePackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CachedPackagesResponse_SinglePackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string package_id = 1;
  void clear_package_id();
  static const int kPackageIdFieldNumber = 1;
  const ::std::string& package_id() const;
  void set_package_id(const ::std::string& value);
  void set_package_id(const char* value);
  void set_package_id(const char* value, size_t size);
  ::std::string* mutable_package_id();
  ::std::string* release_package_id();
  void set_allocated_package_id(::std::string* package_id);

  // optional string checksum = 2;
  void clear_checksum();
  static const int kChecksumFieldNumber = 2;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // optional .google.protobuf.Timestamp download_time = 3;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& download_time() const;
  ::google::protobuf::Timestamp* mutable_download_time();
  ::google::protobuf::Timestamp* release_download_time();
  void set_allocated_download_time(::google::protobuf::Timestamp* download_time);

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr package_id_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  ::google::protobuf::Timestamp* download_time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static CachedPackagesResponse_SinglePackage* default_instance_;
};
// -------------------------------------------------------------------

class CachedPackagesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.CachedPackagesResponse) */ {
 public:
  CachedPackagesResponse();
  virtual ~CachedPackagesResponse();

  CachedPackagesResponse(const CachedPackagesResponse& from);

  inline CachedPackagesResponse& operator=(const CachedPackagesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CachedPackagesResponse& default_instance();

  void Swap(CachedPackagesResponse* other);

  // implements Message ----------------------------------------------

  inline CachedPackagesResponse* New() const { return New(NULL); }

  CachedPackagesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachedPackagesResponse& from);
  void MergeFrom(const CachedPackagesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CachedPackagesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CachedPackagesResponse_SinglePackage SinglePackage;

  // accessors -------------------------------------------------------

  // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
  int packages_size() const;
  void clear_packages();
  static const int kPackagesFieldNumber = 1;
  const ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage& packages(int index) const;
  ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* mutable_packages(int index);
  ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* add_packages();
  ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >*
      mutable_packages();
  const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >&
      packages() const;

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.CachedPackagesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage > packages_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static CachedPackagesResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeviceDescriptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.DeviceDescriptorResponse) */ {
 public:
  DeviceDescriptorResponse();
  virtual ~DeviceDescriptorResponse();

  DeviceDescriptorResponse(const DeviceDescriptorResponse& from);

  inline DeviceDescriptorResponse& operator=(const DeviceDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceDescriptorResponse& default_instance();

  void Swap(DeviceDescriptorResponse* other);

  // implements Message ----------------------------------------------

  inline DeviceDescriptorResponse* New() const { return New(NULL); }

  DeviceDescriptorResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceDescriptorResponse& from);
  void MergeFrom(const DeviceDescriptorResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceDescriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 protocol_version = 1;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::int32 protocol_version() const;
  void set_protocol_version(::google::protobuf::int32 value);

  // optional string hostname = 2;
  void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional string device_type = 3;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 3;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // optional string firmware_version = 4;
  void clear_firmware_version();
  static const int kFirmwareVersionFieldNumber = 4;
  const ::std::string& firmware_version() const;
  void set_firmware_version(const ::std::string& value);
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  ::std::string* mutable_firmware_version();
  ::std::string* release_firmware_version();
  void set_allocated_firmware_version(::std::string* firmware_version);

  // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
  int available_sensors_size() const;
  void clear_available_sensors();
  static const int kAvailableSensorsFieldNumber = 5;
  const ::naki3d::common::protocol::SensorDescriptor& available_sensors(int index) const;
  ::naki3d::common::protocol::SensorDescriptor* mutable_available_sensors(int index);
  ::naki3d::common::protocol::SensorDescriptor* add_available_sensors();
  ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
      mutable_available_sensors();
  const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
      available_sensors() const;

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.DeviceDescriptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::google::protobuf::internal::ArenaStringPtr firmware_version_;
  ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor > available_sensors_;
  ::google::protobuf::int32 protocol_version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_emt_2dgrpc_2eproto();
  friend void protobuf_AssignDesc_emt_2dgrpc_2eproto();
  friend void protobuf_ShutdownFile_emt_2dgrpc_2eproto();

  void InitAsDefaultInstance();
  static DeviceDescriptorResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BeaconMessage

// optional int32 protocol_version = 1;
inline void BeaconMessage::clear_protocol_version() {
  protocol_version_ = 0;
}
inline ::google::protobuf::int32 BeaconMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.protocol_version)
  return protocol_version_;
}
inline void BeaconMessage::set_protocol_version(::google::protobuf::int32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.protocol_version)
}

// optional string hostname = 2;
inline void BeaconMessage::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeaconMessage::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconMessage::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.hostname)
}
inline void BeaconMessage::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.BeaconMessage.hostname)
}
inline void BeaconMessage::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.BeaconMessage.hostname)
}
inline ::std::string* BeaconMessage::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.BeaconMessage.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeaconMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.BeaconMessage.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconMessage::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.BeaconMessage.hostname)
}

// optional string device_type = 3;
inline void BeaconMessage::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeaconMessage::device_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.device_type)
  return device_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconMessage::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.device_type)
}
inline void BeaconMessage::set_device_type(const char* value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.BeaconMessage.device_type)
}
inline void BeaconMessage::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.BeaconMessage.device_type)
}
inline ::std::string* BeaconMessage::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.BeaconMessage.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeaconMessage::release_device_type() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.BeaconMessage.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconMessage::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.BeaconMessage.device_type)
}

// -------------------------------------------------------------------

// PingRequest

// optional string msg = 1;
inline void PingRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingRequest::msg() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.PingRequest.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.PingRequest.msg)
}
inline void PingRequest::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.PingRequest.msg)
}
inline void PingRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.PingRequest.msg)
}
inline ::std::string* PingRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.PingRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingRequest::release_msg() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.PingRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.PingRequest.msg)
}

// -------------------------------------------------------------------

// PingResponse

// optional string echo = 1;
inline void PingResponse::clear_echo() {
  echo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingResponse::echo() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.PingResponse.echo)
  return echo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingResponse::set_echo(const ::std::string& value) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.PingResponse.echo)
}
inline void PingResponse::set_echo(const char* value) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.PingResponse.echo)
}
inline void PingResponse::set_echo(const char* value, size_t size) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.PingResponse.echo)
}
inline ::std::string* PingResponse::mutable_echo() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.PingResponse.echo)
  return echo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingResponse::release_echo() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.PingResponse.echo)
  
  return echo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingResponse::set_allocated_echo(::std::string* echo) {
  if (echo != NULL) {
    
  } else {
    
  }
  echo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), echo);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.PingResponse.echo)
}

// -------------------------------------------------------------------

// LogsRequest

// optional int32 lines = 1;
inline void LogsRequest::clear_lines() {
  lines_ = 0;
}
inline ::google::protobuf::int32 LogsRequest::lines() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LogsRequest.lines)
  return lines_;
}
inline void LogsRequest::set_lines(::google::protobuf::int32 value) {
  
  lines_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LogsRequest.lines)
}

// -------------------------------------------------------------------

// LogsResponse

// repeated string log_line = 1;
inline int LogsResponse::log_line_size() const {
  return log_line_.size();
}
inline void LogsResponse::clear_log_line() {
  log_line_.Clear();
}
inline const ::std::string& LogsResponse::log_line(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_.Get(index);
}
inline ::std::string* LogsResponse::mutable_log_line(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_.Mutable(index);
}
inline void LogsResponse::set_log_line(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LogsResponse.log_line)
  log_line_.Mutable(index)->assign(value);
}
inline void LogsResponse::set_log_line(int index, const char* value) {
  log_line_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::set_log_line(int index, const char* value, size_t size) {
  log_line_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.LogsResponse.log_line)
}
inline ::std::string* LogsResponse::add_log_line() {
  // @@protoc_insertion_point(field_add_mutable:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_.Add();
}
inline void LogsResponse::add_log_line(const ::std::string& value) {
  log_line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::add_log_line(const char* value) {
  log_line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::add_log_line(const char* value, size_t size) {
  log_line_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:naki3d.common.protocol.LogsResponse.log_line)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LogsResponse::log_line() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LogsResponse::mutable_log_line() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.LogsResponse.log_line)
  return &log_line_;
}

// -------------------------------------------------------------------

// LoadPackageRequest

// optional string descriptor_json = 1;
inline void LoadPackageRequest::clear_descriptor_json() {
  descriptor_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadPackageRequest::descriptor_json() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  return descriptor_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPackageRequest::set_descriptor_json(const ::std::string& value) {
  
  descriptor_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}
inline void LoadPackageRequest::set_descriptor_json(const char* value) {
  
  descriptor_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}
inline void LoadPackageRequest::set_descriptor_json(const char* value, size_t size) {
  
  descriptor_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}
inline ::std::string* LoadPackageRequest::mutable_descriptor_json() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  return descriptor_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadPackageRequest::release_descriptor_json() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  
  return descriptor_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPackageRequest::set_allocated_descriptor_json(::std::string* descriptor_json) {
  if (descriptor_json != NULL) {
    
  } else {
    
  }
  descriptor_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_json);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}

// optional bool is_preview = 2;
inline void LoadPackageRequest::clear_is_preview() {
  is_preview_ = false;
}
inline bool LoadPackageRequest::is_preview() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackageRequest.is_preview)
  return is_preview_;
}
inline void LoadPackageRequest::set_is_preview(bool value) {
  
  is_preview_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackageRequest.is_preview)
}

// -------------------------------------------------------------------

// ClearStartupPackageRequest

// optional bool purge_data = 1;
inline void ClearStartupPackageRequest::clear_purge_data() {
  purge_data_ = false;
}
inline bool ClearStartupPackageRequest::purge_data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ClearStartupPackageRequest.purge_data)
  return purge_data_;
}
inline void ClearStartupPackageRequest::set_purge_data(bool value) {
  
  purge_data_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ClearStartupPackageRequest.purge_data)
}

// -------------------------------------------------------------------

// StartupPackageResponse

// optional string package_id = 1;
inline void StartupPackageResponse::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartupPackageResponse::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.StartupPackageResponse.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartupPackageResponse::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.StartupPackageResponse.package_id)
}
inline void StartupPackageResponse::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.StartupPackageResponse.package_id)
}
inline void StartupPackageResponse::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.StartupPackageResponse.package_id)
}
inline ::std::string* StartupPackageResponse::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.StartupPackageResponse.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartupPackageResponse::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.StartupPackageResponse.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartupPackageResponse::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.StartupPackageResponse.package_id)
}

// -------------------------------------------------------------------

// SetStartupPackageRequest

// optional string package_id = 1;
inline void SetStartupPackageRequest::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetStartupPackageRequest::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetStartupPackageRequest::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}
inline void SetStartupPackageRequest::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}
inline void SetStartupPackageRequest::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}
inline ::std::string* SetStartupPackageRequest::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetStartupPackageRequest::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetStartupPackageRequest::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}

// -------------------------------------------------------------------

// StartPackageRequest

// optional string package_id = 1;
inline void StartPackageRequest::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartPackageRequest::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.StartPackageRequest.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartPackageRequest::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.StartPackageRequest.package_id)
}
inline void StartPackageRequest::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.StartPackageRequest.package_id)
}
inline void StartPackageRequest::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.StartPackageRequest.package_id)
}
inline ::std::string* StartPackageRequest::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.StartPackageRequest.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartPackageRequest::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.StartPackageRequest.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartPackageRequest::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.StartPackageRequest.package_id)
}

// -------------------------------------------------------------------

// CachedPackagesResponse_SinglePackage

// optional string package_id = 1;
inline void CachedPackagesResponse_SinglePackage::clear_package_id() {
  package_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CachedPackagesResponse_SinglePackage::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  return package_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CachedPackagesResponse_SinglePackage::set_package_id(const ::std::string& value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}
inline void CachedPackagesResponse_SinglePackage::set_package_id(const char* value) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}
inline void CachedPackagesResponse_SinglePackage::set_package_id(const char* value, size_t size) {
  
  package_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}
inline ::std::string* CachedPackagesResponse_SinglePackage::mutable_package_id() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  return package_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CachedPackagesResponse_SinglePackage::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  
  return package_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CachedPackagesResponse_SinglePackage::set_allocated_package_id(::std::string* package_id) {
  if (package_id != NULL) {
    
  } else {
    
  }
  package_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_id);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}

// optional string checksum = 2;
inline void CachedPackagesResponse_SinglePackage::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CachedPackagesResponse_SinglePackage::checksum() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  return checksum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CachedPackagesResponse_SinglePackage::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}
inline void CachedPackagesResponse_SinglePackage::set_checksum(const char* value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}
inline void CachedPackagesResponse_SinglePackage::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}
inline ::std::string* CachedPackagesResponse_SinglePackage::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CachedPackagesResponse_SinglePackage::release_checksum() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CachedPackagesResponse_SinglePackage::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}

// optional .google.protobuf.Timestamp download_time = 3;
inline bool CachedPackagesResponse_SinglePackage::has_download_time() const {
  return !_is_default_instance_ && download_time_ != NULL;
}
inline void CachedPackagesResponse_SinglePackage::clear_download_time() {
  if (GetArenaNoVirtual() == NULL && download_time_ != NULL) delete download_time_;
  download_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& CachedPackagesResponse_SinglePackage::download_time() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  return download_time_ != NULL ? *download_time_ : *default_instance_->download_time_;
}
inline ::google::protobuf::Timestamp* CachedPackagesResponse_SinglePackage::mutable_download_time() {
  
  if (download_time_ == NULL) {
    download_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  return download_time_;
}
inline ::google::protobuf::Timestamp* CachedPackagesResponse_SinglePackage::release_download_time() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  
  ::google::protobuf::Timestamp* temp = download_time_;
  download_time_ = NULL;
  return temp;
}
inline void CachedPackagesResponse_SinglePackage::set_allocated_download_time(::google::protobuf::Timestamp* download_time) {
  delete download_time_;
  if (download_time != NULL && download_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_download_time = new ::google::protobuf::Timestamp;
    new_download_time->CopyFrom(*download_time);
    download_time = new_download_time;
  }
  download_time_ = download_time;
  if (download_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
}

// -------------------------------------------------------------------

// CachedPackagesResponse

// repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
inline int CachedPackagesResponse::packages_size() const {
  return packages_.size();
}
inline void CachedPackagesResponse::clear_packages() {
  packages_.Clear();
}
inline const ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage& CachedPackagesResponse::packages(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_.Get(index);
}
inline ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* CachedPackagesResponse::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_.Mutable(index);
}
inline ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* CachedPackagesResponse::add_packages() {
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >*
CachedPackagesResponse::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.CachedPackagesResponse.packages)
  return &packages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >&
CachedPackagesResponse::packages() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_;
}

// -------------------------------------------------------------------

// DeviceDescriptorResponse

// optional int32 protocol_version = 1;
inline void DeviceDescriptorResponse::clear_protocol_version() {
  protocol_version_ = 0;
}
inline ::google::protobuf::int32 DeviceDescriptorResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.protocol_version)
  return protocol_version_;
}
inline void DeviceDescriptorResponse::set_protocol_version(::google::protobuf::int32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.protocol_version)
}

// optional string hostname = 2;
inline void DeviceDescriptorResponse::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDescriptorResponse::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescriptorResponse::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}
inline void DeviceDescriptorResponse::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}
inline void DeviceDescriptorResponse::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}
inline ::std::string* DeviceDescriptorResponse::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDescriptorResponse::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescriptorResponse::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}

// optional string device_type = 3;
inline void DeviceDescriptorResponse::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDescriptorResponse::device_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  return device_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescriptorResponse::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}
inline void DeviceDescriptorResponse::set_device_type(const char* value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}
inline void DeviceDescriptorResponse::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}
inline ::std::string* DeviceDescriptorResponse::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDescriptorResponse::release_device_type() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescriptorResponse::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}

// optional string firmware_version = 4;
inline void DeviceDescriptorResponse::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDescriptorResponse::firmware_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  return firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescriptorResponse::set_firmware_version(const ::std::string& value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}
inline void DeviceDescriptorResponse::set_firmware_version(const char* value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}
inline void DeviceDescriptorResponse::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}
inline ::std::string* DeviceDescriptorResponse::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDescriptorResponse::release_firmware_version() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescriptorResponse::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}

// repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
inline int DeviceDescriptorResponse::available_sensors_size() const {
  return available_sensors_.size();
}
inline void DeviceDescriptorResponse::clear_available_sensors() {
  available_sensors_.Clear();
}
inline const ::naki3d::common::protocol::SensorDescriptor& DeviceDescriptorResponse::available_sensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_.Get(index);
}
inline ::naki3d::common::protocol::SensorDescriptor* DeviceDescriptorResponse::mutable_available_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_.Mutable(index);
}
inline ::naki3d::common::protocol::SensorDescriptor* DeviceDescriptorResponse::add_available_sensors() {
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
DeviceDescriptorResponse::mutable_available_sensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return &available_sensors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
DeviceDescriptorResponse::available_sensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_emt_2dgrpc_2eproto__INCLUDED

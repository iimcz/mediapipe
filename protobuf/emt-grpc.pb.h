// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emt-grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_emt_2dgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_emt_2dgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "discovery.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_emt_2dgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_emt_2dgrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_emt_2dgrpc_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class BeaconMessage;
struct BeaconMessageDefaultTypeInternal;
extern BeaconMessageDefaultTypeInternal _BeaconMessage_default_instance_;
class CachedPackagesResponse;
struct CachedPackagesResponseDefaultTypeInternal;
extern CachedPackagesResponseDefaultTypeInternal _CachedPackagesResponse_default_instance_;
class CachedPackagesResponse_SinglePackage;
struct CachedPackagesResponse_SinglePackageDefaultTypeInternal;
extern CachedPackagesResponse_SinglePackageDefaultTypeInternal _CachedPackagesResponse_SinglePackage_default_instance_;
class ClearStartupPackageRequest;
struct ClearStartupPackageRequestDefaultTypeInternal;
extern ClearStartupPackageRequestDefaultTypeInternal _ClearStartupPackageRequest_default_instance_;
class DeviceDescriptorResponse;
struct DeviceDescriptorResponseDefaultTypeInternal;
extern DeviceDescriptorResponseDefaultTypeInternal _DeviceDescriptorResponse_default_instance_;
class LoadPackageRequest;
struct LoadPackageRequestDefaultTypeInternal;
extern LoadPackageRequestDefaultTypeInternal _LoadPackageRequest_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class SetStartupPackageRequest;
struct SetStartupPackageRequestDefaultTypeInternal;
extern SetStartupPackageRequestDefaultTypeInternal _SetStartupPackageRequest_default_instance_;
class StartPackageRequest;
struct StartPackageRequestDefaultTypeInternal;
extern StartPackageRequestDefaultTypeInternal _StartPackageRequest_default_instance_;
class StartupPackageResponse;
struct StartupPackageResponseDefaultTypeInternal;
extern StartupPackageResponseDefaultTypeInternal _StartupPackageResponse_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::BeaconMessage* Arena::CreateMaybeMessage<::naki3d::common::protocol::BeaconMessage>(Arena*);
template<> ::naki3d::common::protocol::CachedPackagesResponse* Arena::CreateMaybeMessage<::naki3d::common::protocol::CachedPackagesResponse>(Arena*);
template<> ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* Arena::CreateMaybeMessage<::naki3d::common::protocol::CachedPackagesResponse_SinglePackage>(Arena*);
template<> ::naki3d::common::protocol::ClearStartupPackageRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::ClearStartupPackageRequest>(Arena*);
template<> ::naki3d::common::protocol::DeviceDescriptorResponse* Arena::CreateMaybeMessage<::naki3d::common::protocol::DeviceDescriptorResponse>(Arena*);
template<> ::naki3d::common::protocol::LoadPackageRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::LoadPackageRequest>(Arena*);
template<> ::naki3d::common::protocol::PingRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::PingRequest>(Arena*);
template<> ::naki3d::common::protocol::PingResponse* Arena::CreateMaybeMessage<::naki3d::common::protocol::PingResponse>(Arena*);
template<> ::naki3d::common::protocol::SetStartupPackageRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::SetStartupPackageRequest>(Arena*);
template<> ::naki3d::common::protocol::StartPackageRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::StartPackageRequest>(Arena*);
template<> ::naki3d::common::protocol::StartupPackageResponse* Arena::CreateMaybeMessage<::naki3d::common::protocol::StartupPackageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class BeaconMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.BeaconMessage) */ {
 public:
  inline BeaconMessage() : BeaconMessage(nullptr) {}
  ~BeaconMessage() override;
  explicit constexpr BeaconMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeaconMessage(const BeaconMessage& from);
  BeaconMessage(BeaconMessage&& from) noexcept
    : BeaconMessage() {
    *this = ::std::move(from);
  }

  inline BeaconMessage& operator=(const BeaconMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeaconMessage& operator=(BeaconMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeaconMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeaconMessage* internal_default_instance() {
    return reinterpret_cast<const BeaconMessage*>(
               &_BeaconMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BeaconMessage& a, BeaconMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BeaconMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeaconMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BeaconMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BeaconMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeaconMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BeaconMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeaconMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.BeaconMessage";
  }
  protected:
  explicit BeaconMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 2,
    kDeviceTypeFieldNumber = 3,
    kProtocolVersionFieldNumber = 1,
  };
  // string hostname = 2;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string device_type = 3;
  void clear_device_type();
  const std::string& device_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_type();
  PROTOBUF_NODISCARD std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // int32 protocol_version = 1;
  void clear_protocol_version();
  int32_t protocol_version() const;
  void set_protocol_version(int32_t value);
  private:
  int32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.BeaconMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  int32_t protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  explicit constexpr PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class PingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  explicit constexpr PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
  };
  // string echo = 1;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class LoadPackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LoadPackageRequest) */ {
 public:
  inline LoadPackageRequest() : LoadPackageRequest(nullptr) {}
  ~LoadPackageRequest() override;
  explicit constexpr LoadPackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadPackageRequest(const LoadPackageRequest& from);
  LoadPackageRequest(LoadPackageRequest&& from) noexcept
    : LoadPackageRequest() {
    *this = ::std::move(from);
  }

  inline LoadPackageRequest& operator=(const LoadPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPackageRequest& operator=(LoadPackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadPackageRequest* internal_default_instance() {
    return reinterpret_cast<const LoadPackageRequest*>(
               &_LoadPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoadPackageRequest& a, LoadPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadPackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadPackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadPackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.LoadPackageRequest";
  }
  protected:
  explicit LoadPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorJsonFieldNumber = 1,
    kIsPreviewFieldNumber = 2,
  };
  // string descriptor_json = 1;
  void clear_descriptor_json();
  const std::string& descriptor_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptor_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptor_json();
  PROTOBUF_NODISCARD std::string* release_descriptor_json();
  void set_allocated_descriptor_json(std::string* descriptor_json);
  private:
  const std::string& _internal_descriptor_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptor_json(const std::string& value);
  std::string* _internal_mutable_descriptor_json();
  public:

  // bool is_preview = 2;
  void clear_is_preview();
  bool is_preview() const;
  void set_is_preview(bool value);
  private:
  bool _internal_is_preview() const;
  void _internal_set_is_preview(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LoadPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor_json_;
  bool is_preview_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class ClearStartupPackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ClearStartupPackageRequest) */ {
 public:
  inline ClearStartupPackageRequest() : ClearStartupPackageRequest(nullptr) {}
  ~ClearStartupPackageRequest() override;
  explicit constexpr ClearStartupPackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearStartupPackageRequest(const ClearStartupPackageRequest& from);
  ClearStartupPackageRequest(ClearStartupPackageRequest&& from) noexcept
    : ClearStartupPackageRequest() {
    *this = ::std::move(from);
  }

  inline ClearStartupPackageRequest& operator=(const ClearStartupPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearStartupPackageRequest& operator=(ClearStartupPackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearStartupPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearStartupPackageRequest* internal_default_instance() {
    return reinterpret_cast<const ClearStartupPackageRequest*>(
               &_ClearStartupPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClearStartupPackageRequest& a, ClearStartupPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearStartupPackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearStartupPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearStartupPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearStartupPackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClearStartupPackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClearStartupPackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearStartupPackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ClearStartupPackageRequest";
  }
  protected:
  explicit ClearStartupPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurgeDataFieldNumber = 1,
  };
  // bool purge_data = 1;
  void clear_purge_data();
  bool purge_data() const;
  void set_purge_data(bool value);
  private:
  bool _internal_purge_data() const;
  void _internal_set_purge_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ClearStartupPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool purge_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class StartupPackageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.StartupPackageResponse) */ {
 public:
  inline StartupPackageResponse() : StartupPackageResponse(nullptr) {}
  ~StartupPackageResponse() override;
  explicit constexpr StartupPackageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartupPackageResponse(const StartupPackageResponse& from);
  StartupPackageResponse(StartupPackageResponse&& from) noexcept
    : StartupPackageResponse() {
    *this = ::std::move(from);
  }

  inline StartupPackageResponse& operator=(const StartupPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartupPackageResponse& operator=(StartupPackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartupPackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartupPackageResponse* internal_default_instance() {
    return reinterpret_cast<const StartupPackageResponse*>(
               &_StartupPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartupPackageResponse& a, StartupPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartupPackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartupPackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartupPackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartupPackageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartupPackageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartupPackageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartupPackageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.StartupPackageResponse";
  }
  protected:
  explicit StartupPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageIdFieldNumber = 1,
  };
  // string package_id = 1;
  void clear_package_id();
  const std::string& package_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_id();
  PROTOBUF_NODISCARD std::string* release_package_id();
  void set_allocated_package_id(std::string* package_id);
  private:
  const std::string& _internal_package_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_id(const std::string& value);
  std::string* _internal_mutable_package_id();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.StartupPackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class SetStartupPackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.SetStartupPackageRequest) */ {
 public:
  inline SetStartupPackageRequest() : SetStartupPackageRequest(nullptr) {}
  ~SetStartupPackageRequest() override;
  explicit constexpr SetStartupPackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetStartupPackageRequest(const SetStartupPackageRequest& from);
  SetStartupPackageRequest(SetStartupPackageRequest&& from) noexcept
    : SetStartupPackageRequest() {
    *this = ::std::move(from);
  }

  inline SetStartupPackageRequest& operator=(const SetStartupPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStartupPackageRequest& operator=(SetStartupPackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetStartupPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetStartupPackageRequest* internal_default_instance() {
    return reinterpret_cast<const SetStartupPackageRequest*>(
               &_SetStartupPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetStartupPackageRequest& a, SetStartupPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStartupPackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStartupPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetStartupPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetStartupPackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetStartupPackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetStartupPackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetStartupPackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.SetStartupPackageRequest";
  }
  protected:
  explicit SetStartupPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageIdFieldNumber = 1,
  };
  // string package_id = 1;
  void clear_package_id();
  const std::string& package_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_id();
  PROTOBUF_NODISCARD std::string* release_package_id();
  void set_allocated_package_id(std::string* package_id);
  private:
  const std::string& _internal_package_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_id(const std::string& value);
  std::string* _internal_mutable_package_id();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.SetStartupPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class StartPackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.StartPackageRequest) */ {
 public:
  inline StartPackageRequest() : StartPackageRequest(nullptr) {}
  ~StartPackageRequest() override;
  explicit constexpr StartPackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartPackageRequest(const StartPackageRequest& from);
  StartPackageRequest(StartPackageRequest&& from) noexcept
    : StartPackageRequest() {
    *this = ::std::move(from);
  }

  inline StartPackageRequest& operator=(const StartPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPackageRequest& operator=(StartPackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartPackageRequest* internal_default_instance() {
    return reinterpret_cast<const StartPackageRequest*>(
               &_StartPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartPackageRequest& a, StartPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartPackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartPackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartPackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.StartPackageRequest";
  }
  protected:
  explicit StartPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageIdFieldNumber = 1,
  };
  // string package_id = 1;
  void clear_package_id();
  const std::string& package_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_id();
  PROTOBUF_NODISCARD std::string* release_package_id();
  void set_allocated_package_id(std::string* package_id);
  private:
  const std::string& _internal_package_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_id(const std::string& value);
  std::string* _internal_mutable_package_id();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.StartPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class CachedPackagesResponse_SinglePackage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.CachedPackagesResponse.SinglePackage) */ {
 public:
  inline CachedPackagesResponse_SinglePackage() : CachedPackagesResponse_SinglePackage(nullptr) {}
  ~CachedPackagesResponse_SinglePackage() override;
  explicit constexpr CachedPackagesResponse_SinglePackage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CachedPackagesResponse_SinglePackage(const CachedPackagesResponse_SinglePackage& from);
  CachedPackagesResponse_SinglePackage(CachedPackagesResponse_SinglePackage&& from) noexcept
    : CachedPackagesResponse_SinglePackage() {
    *this = ::std::move(from);
  }

  inline CachedPackagesResponse_SinglePackage& operator=(const CachedPackagesResponse_SinglePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedPackagesResponse_SinglePackage& operator=(CachedPackagesResponse_SinglePackage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedPackagesResponse_SinglePackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CachedPackagesResponse_SinglePackage* internal_default_instance() {
    return reinterpret_cast<const CachedPackagesResponse_SinglePackage*>(
               &_CachedPackagesResponse_SinglePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CachedPackagesResponse_SinglePackage& a, CachedPackagesResponse_SinglePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedPackagesResponse_SinglePackage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedPackagesResponse_SinglePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedPackagesResponse_SinglePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CachedPackagesResponse_SinglePackage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CachedPackagesResponse_SinglePackage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CachedPackagesResponse_SinglePackage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachedPackagesResponse_SinglePackage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.CachedPackagesResponse.SinglePackage";
  }
  protected:
  explicit CachedPackagesResponse_SinglePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageIdFieldNumber = 1,
    kChecksumFieldNumber = 2,
    kDownloadTimeFieldNumber = 3,
  };
  // string package_id = 1;
  void clear_package_id();
  const std::string& package_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_id();
  PROTOBUF_NODISCARD std::string* release_package_id();
  void set_allocated_package_id(std::string* package_id);
  private:
  const std::string& _internal_package_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_id(const std::string& value);
  std::string* _internal_mutable_package_id();
  public:

  // string checksum = 2;
  void clear_checksum();
  const std::string& checksum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checksum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checksum();
  PROTOBUF_NODISCARD std::string* release_checksum();
  void set_allocated_checksum(std::string* checksum);
  private:
  const std::string& _internal_checksum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checksum(const std::string& value);
  std::string* _internal_mutable_checksum();
  public:

  // .google.protobuf.Timestamp download_time = 3;
  bool has_download_time() const;
  private:
  bool _internal_has_download_time() const;
  public:
  void clear_download_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& download_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_download_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_download_time();
  void set_allocated_download_time(::PROTOBUF_NAMESPACE_ID::Timestamp* download_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_download_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_download_time();
  public:
  void unsafe_arena_set_allocated_download_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* download_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_download_time();

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.CachedPackagesResponse.SinglePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checksum_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* download_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class CachedPackagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.CachedPackagesResponse) */ {
 public:
  inline CachedPackagesResponse() : CachedPackagesResponse(nullptr) {}
  ~CachedPackagesResponse() override;
  explicit constexpr CachedPackagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CachedPackagesResponse(const CachedPackagesResponse& from);
  CachedPackagesResponse(CachedPackagesResponse&& from) noexcept
    : CachedPackagesResponse() {
    *this = ::std::move(from);
  }

  inline CachedPackagesResponse& operator=(const CachedPackagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedPackagesResponse& operator=(CachedPackagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedPackagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CachedPackagesResponse* internal_default_instance() {
    return reinterpret_cast<const CachedPackagesResponse*>(
               &_CachedPackagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CachedPackagesResponse& a, CachedPackagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedPackagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedPackagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedPackagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CachedPackagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CachedPackagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CachedPackagesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachedPackagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.CachedPackagesResponse";
  }
  protected:
  explicit CachedPackagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CachedPackagesResponse_SinglePackage SinglePackage;

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
  };
  // repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >*
      mutable_packages();
  private:
  const ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage& _internal_packages(int index) const;
  ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* _internal_add_packages();
  public:
  const ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage& packages(int index) const;
  ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >&
      packages() const;

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.CachedPackagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage > packages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class DeviceDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.DeviceDescriptorResponse) */ {
 public:
  inline DeviceDescriptorResponse() : DeviceDescriptorResponse(nullptr) {}
  ~DeviceDescriptorResponse() override;
  explicit constexpr DeviceDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceDescriptorResponse(const DeviceDescriptorResponse& from);
  DeviceDescriptorResponse(DeviceDescriptorResponse&& from) noexcept
    : DeviceDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline DeviceDescriptorResponse& operator=(const DeviceDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceDescriptorResponse& operator=(DeviceDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceDescriptorResponse*>(
               &_DeviceDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeviceDescriptorResponse& a, DeviceDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceDescriptorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceDescriptorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.DeviceDescriptorResponse";
  }
  protected:
  explicit DeviceDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableSensorsFieldNumber = 5,
    kHostnameFieldNumber = 2,
    kDeviceTypeFieldNumber = 3,
    kFirmwareVersionFieldNumber = 4,
    kProtocolVersionFieldNumber = 1,
  };
  // repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
  int available_sensors_size() const;
  private:
  int _internal_available_sensors_size() const;
  public:
  void clear_available_sensors();
  ::naki3d::common::protocol::SensorDescriptor* mutable_available_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
      mutable_available_sensors();
  private:
  const ::naki3d::common::protocol::SensorDescriptor& _internal_available_sensors(int index) const;
  ::naki3d::common::protocol::SensorDescriptor* _internal_add_available_sensors();
  public:
  const ::naki3d::common::protocol::SensorDescriptor& available_sensors(int index) const;
  ::naki3d::common::protocol::SensorDescriptor* add_available_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
      available_sensors() const;

  // string hostname = 2;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string device_type = 3;
  void clear_device_type();
  const std::string& device_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_type();
  PROTOBUF_NODISCARD std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // string firmware_version = 4;
  void clear_firmware_version();
  const std::string& firmware_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firmware_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firmware_version();
  PROTOBUF_NODISCARD std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);
  private:
  const std::string& _internal_firmware_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firmware_version(const std::string& value);
  std::string* _internal_mutable_firmware_version();
  public:

  // int32 protocol_version = 1;
  void clear_protocol_version();
  int32_t protocol_version() const;
  void set_protocol_version(int32_t value);
  private:
  int32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.DeviceDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor > available_sensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  int32_t protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emt_2dgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeaconMessage

// int32 protocol_version = 1;
inline void BeaconMessage::clear_protocol_version() {
  protocol_version_ = 0;
}
inline int32_t BeaconMessage::_internal_protocol_version() const {
  return protocol_version_;
}
inline int32_t BeaconMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.protocol_version)
  return _internal_protocol_version();
}
inline void BeaconMessage::_internal_set_protocol_version(int32_t value) {
  
  protocol_version_ = value;
}
inline void BeaconMessage::set_protocol_version(int32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.protocol_version)
}

// string hostname = 2;
inline void BeaconMessage::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& BeaconMessage::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BeaconMessage::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.hostname)
}
inline std::string* BeaconMessage::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.BeaconMessage.hostname)
  return _s;
}
inline const std::string& BeaconMessage::_internal_hostname() const {
  return hostname_.Get();
}
inline void BeaconMessage::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BeaconMessage::_internal_mutable_hostname() {
  
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BeaconMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.BeaconMessage.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BeaconMessage::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.BeaconMessage.hostname)
}

// string device_type = 3;
inline void BeaconMessage::clear_device_type() {
  device_type_.ClearToEmpty();
}
inline const std::string& BeaconMessage::device_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.BeaconMessage.device_type)
  return _internal_device_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BeaconMessage::set_device_type(ArgT0&& arg0, ArgT... args) {
 
 device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.BeaconMessage.device_type)
}
inline std::string* BeaconMessage::mutable_device_type() {
  std::string* _s = _internal_mutable_device_type();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.BeaconMessage.device_type)
  return _s;
}
inline const std::string& BeaconMessage::_internal_device_type() const {
  return device_type_.Get();
}
inline void BeaconMessage::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BeaconMessage::_internal_mutable_device_type() {
  
  return device_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BeaconMessage::release_device_type() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.BeaconMessage.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BeaconMessage::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.BeaconMessage.device_type)
}

// -------------------------------------------------------------------

// PingRequest

// string msg = 1;
inline void PingRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& PingRequest::msg() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.PingRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PingRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.PingRequest.msg)
}
inline std::string* PingRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.PingRequest.msg)
  return _s;
}
inline const std::string& PingRequest::_internal_msg() const {
  return msg_.Get();
}
inline void PingRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PingRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PingRequest::release_msg() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.PingRequest.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PingRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.PingRequest.msg)
}

// -------------------------------------------------------------------

// PingResponse

// string echo = 1;
inline void PingResponse::clear_echo() {
  echo_.ClearToEmpty();
}
inline const std::string& PingResponse::echo() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.PingResponse.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PingResponse::set_echo(ArgT0&& arg0, ArgT... args) {
 
 echo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.PingResponse.echo)
}
inline std::string* PingResponse::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.PingResponse.echo)
  return _s;
}
inline const std::string& PingResponse::_internal_echo() const {
  return echo_.Get();
}
inline void PingResponse::_internal_set_echo(const std::string& value) {
  
  echo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PingResponse::_internal_mutable_echo() {
  
  return echo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PingResponse::release_echo() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.PingResponse.echo)
  return echo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PingResponse::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  echo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), echo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (echo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.PingResponse.echo)
}

// -------------------------------------------------------------------

// LoadPackageRequest

// string descriptor_json = 1;
inline void LoadPackageRequest::clear_descriptor_json() {
  descriptor_json_.ClearToEmpty();
}
inline const std::string& LoadPackageRequest::descriptor_json() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  return _internal_descriptor_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadPackageRequest::set_descriptor_json(ArgT0&& arg0, ArgT... args) {
 
 descriptor_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}
inline std::string* LoadPackageRequest::mutable_descriptor_json() {
  std::string* _s = _internal_mutable_descriptor_json();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  return _s;
}
inline const std::string& LoadPackageRequest::_internal_descriptor_json() const {
  return descriptor_json_.Get();
}
inline void LoadPackageRequest::_internal_set_descriptor_json(const std::string& value) {
  
  descriptor_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadPackageRequest::_internal_mutable_descriptor_json() {
  
  return descriptor_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadPackageRequest::release_descriptor_json() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
  return descriptor_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadPackageRequest::set_allocated_descriptor_json(std::string* descriptor_json) {
  if (descriptor_json != nullptr) {
    
  } else {
    
  }
  descriptor_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptor_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptor_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    descriptor_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.LoadPackageRequest.descriptor_json)
}

// bool is_preview = 2;
inline void LoadPackageRequest::clear_is_preview() {
  is_preview_ = false;
}
inline bool LoadPackageRequest::_internal_is_preview() const {
  return is_preview_;
}
inline bool LoadPackageRequest::is_preview() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LoadPackageRequest.is_preview)
  return _internal_is_preview();
}
inline void LoadPackageRequest::_internal_set_is_preview(bool value) {
  
  is_preview_ = value;
}
inline void LoadPackageRequest::set_is_preview(bool value) {
  _internal_set_is_preview(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LoadPackageRequest.is_preview)
}

// -------------------------------------------------------------------

// ClearStartupPackageRequest

// bool purge_data = 1;
inline void ClearStartupPackageRequest::clear_purge_data() {
  purge_data_ = false;
}
inline bool ClearStartupPackageRequest::_internal_purge_data() const {
  return purge_data_;
}
inline bool ClearStartupPackageRequest::purge_data() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ClearStartupPackageRequest.purge_data)
  return _internal_purge_data();
}
inline void ClearStartupPackageRequest::_internal_set_purge_data(bool value) {
  
  purge_data_ = value;
}
inline void ClearStartupPackageRequest::set_purge_data(bool value) {
  _internal_set_purge_data(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ClearStartupPackageRequest.purge_data)
}

// -------------------------------------------------------------------

// StartupPackageResponse

// string package_id = 1;
inline void StartupPackageResponse::clear_package_id() {
  package_id_.ClearToEmpty();
}
inline const std::string& StartupPackageResponse::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.StartupPackageResponse.package_id)
  return _internal_package_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartupPackageResponse::set_package_id(ArgT0&& arg0, ArgT... args) {
 
 package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.StartupPackageResponse.package_id)
}
inline std::string* StartupPackageResponse::mutable_package_id() {
  std::string* _s = _internal_mutable_package_id();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.StartupPackageResponse.package_id)
  return _s;
}
inline const std::string& StartupPackageResponse::_internal_package_id() const {
  return package_id_.Get();
}
inline void StartupPackageResponse::_internal_set_package_id(const std::string& value) {
  
  package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartupPackageResponse::_internal_mutable_package_id() {
  
  return package_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartupPackageResponse::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.StartupPackageResponse.package_id)
  return package_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartupPackageResponse::set_allocated_package_id(std::string* package_id) {
  if (package_id != nullptr) {
    
  } else {
    
  }
  package_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.StartupPackageResponse.package_id)
}

// -------------------------------------------------------------------

// SetStartupPackageRequest

// string package_id = 1;
inline void SetStartupPackageRequest::clear_package_id() {
  package_id_.ClearToEmpty();
}
inline const std::string& SetStartupPackageRequest::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  return _internal_package_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetStartupPackageRequest::set_package_id(ArgT0&& arg0, ArgT... args) {
 
 package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}
inline std::string* SetStartupPackageRequest::mutable_package_id() {
  std::string* _s = _internal_mutable_package_id();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  return _s;
}
inline const std::string& SetStartupPackageRequest::_internal_package_id() const {
  return package_id_.Get();
}
inline void SetStartupPackageRequest::_internal_set_package_id(const std::string& value) {
  
  package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetStartupPackageRequest::_internal_mutable_package_id() {
  
  return package_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetStartupPackageRequest::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.SetStartupPackageRequest.package_id)
  return package_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetStartupPackageRequest::set_allocated_package_id(std::string* package_id) {
  if (package_id != nullptr) {
    
  } else {
    
  }
  package_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.SetStartupPackageRequest.package_id)
}

// -------------------------------------------------------------------

// StartPackageRequest

// string package_id = 1;
inline void StartPackageRequest::clear_package_id() {
  package_id_.ClearToEmpty();
}
inline const std::string& StartPackageRequest::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.StartPackageRequest.package_id)
  return _internal_package_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPackageRequest::set_package_id(ArgT0&& arg0, ArgT... args) {
 
 package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.StartPackageRequest.package_id)
}
inline std::string* StartPackageRequest::mutable_package_id() {
  std::string* _s = _internal_mutable_package_id();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.StartPackageRequest.package_id)
  return _s;
}
inline const std::string& StartPackageRequest::_internal_package_id() const {
  return package_id_.Get();
}
inline void StartPackageRequest::_internal_set_package_id(const std::string& value) {
  
  package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPackageRequest::_internal_mutable_package_id() {
  
  return package_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPackageRequest::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.StartPackageRequest.package_id)
  return package_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPackageRequest::set_allocated_package_id(std::string* package_id) {
  if (package_id != nullptr) {
    
  } else {
    
  }
  package_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.StartPackageRequest.package_id)
}

// -------------------------------------------------------------------

// CachedPackagesResponse_SinglePackage

// string package_id = 1;
inline void CachedPackagesResponse_SinglePackage::clear_package_id() {
  package_id_.ClearToEmpty();
}
inline const std::string& CachedPackagesResponse_SinglePackage::package_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  return _internal_package_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CachedPackagesResponse_SinglePackage::set_package_id(ArgT0&& arg0, ArgT... args) {
 
 package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}
inline std::string* CachedPackagesResponse_SinglePackage::mutable_package_id() {
  std::string* _s = _internal_mutable_package_id();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  return _s;
}
inline const std::string& CachedPackagesResponse_SinglePackage::_internal_package_id() const {
  return package_id_.Get();
}
inline void CachedPackagesResponse_SinglePackage::_internal_set_package_id(const std::string& value) {
  
  package_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CachedPackagesResponse_SinglePackage::_internal_mutable_package_id() {
  
  return package_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CachedPackagesResponse_SinglePackage::release_package_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
  return package_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CachedPackagesResponse_SinglePackage::set_allocated_package_id(std::string* package_id) {
  if (package_id != nullptr) {
    
  } else {
    
  }
  package_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.package_id)
}

// string checksum = 2;
inline void CachedPackagesResponse_SinglePackage::clear_checksum() {
  checksum_.ClearToEmpty();
}
inline const std::string& CachedPackagesResponse_SinglePackage::checksum() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  return _internal_checksum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CachedPackagesResponse_SinglePackage::set_checksum(ArgT0&& arg0, ArgT... args) {
 
 checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}
inline std::string* CachedPackagesResponse_SinglePackage::mutable_checksum() {
  std::string* _s = _internal_mutable_checksum();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  return _s;
}
inline const std::string& CachedPackagesResponse_SinglePackage::_internal_checksum() const {
  return checksum_.Get();
}
inline void CachedPackagesResponse_SinglePackage::_internal_set_checksum(const std::string& value) {
  
  checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CachedPackagesResponse_SinglePackage::_internal_mutable_checksum() {
  
  return checksum_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CachedPackagesResponse_SinglePackage::release_checksum() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
  return checksum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CachedPackagesResponse_SinglePackage::set_allocated_checksum(std::string* checksum) {
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checksum,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (checksum_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.checksum)
}

// .google.protobuf.Timestamp download_time = 3;
inline bool CachedPackagesResponse_SinglePackage::_internal_has_download_time() const {
  return this != internal_default_instance() && download_time_ != nullptr;
}
inline bool CachedPackagesResponse_SinglePackage::has_download_time() const {
  return _internal_has_download_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CachedPackagesResponse_SinglePackage::_internal_download_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = download_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CachedPackagesResponse_SinglePackage::download_time() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  return _internal_download_time();
}
inline void CachedPackagesResponse_SinglePackage::unsafe_arena_set_allocated_download_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* download_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_time_);
  }
  download_time_ = download_time;
  if (download_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CachedPackagesResponse_SinglePackage::release_download_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = download_time_;
  download_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CachedPackagesResponse_SinglePackage::unsafe_arena_release_download_time() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = download_time_;
  download_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CachedPackagesResponse_SinglePackage::_internal_mutable_download_time() {
  
  if (download_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    download_time_ = p;
  }
  return download_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CachedPackagesResponse_SinglePackage::mutable_download_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_download_time();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
  return _msg;
}
inline void CachedPackagesResponse_SinglePackage::set_allocated_download_time(::PROTOBUF_NAMESPACE_ID::Timestamp* download_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_time_);
  }
  if (download_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_time));
    if (message_arena != submessage_arena) {
      download_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download_time, submessage_arena);
    }
    
  } else {
    
  }
  download_time_ = download_time;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.CachedPackagesResponse.SinglePackage.download_time)
}

// -------------------------------------------------------------------

// CachedPackagesResponse

// repeated .naki3d.common.protocol.CachedPackagesResponse.SinglePackage packages = 1;
inline int CachedPackagesResponse::_internal_packages_size() const {
  return packages_.size();
}
inline int CachedPackagesResponse::packages_size() const {
  return _internal_packages_size();
}
inline void CachedPackagesResponse::clear_packages() {
  packages_.Clear();
}
inline ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* CachedPackagesResponse::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >*
CachedPackagesResponse::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.CachedPackagesResponse.packages)
  return &packages_;
}
inline const ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage& CachedPackagesResponse::_internal_packages(int index) const {
  return packages_.Get(index);
}
inline const ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage& CachedPackagesResponse::packages(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.CachedPackagesResponse.packages)
  return _internal_packages(index);
}
inline ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* CachedPackagesResponse::_internal_add_packages() {
  return packages_.Add();
}
inline ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* CachedPackagesResponse::add_packages() {
  ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.CachedPackagesResponse.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::CachedPackagesResponse_SinglePackage >&
CachedPackagesResponse::packages() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.CachedPackagesResponse.packages)
  return packages_;
}

// -------------------------------------------------------------------

// DeviceDescriptorResponse

// int32 protocol_version = 1;
inline void DeviceDescriptorResponse::clear_protocol_version() {
  protocol_version_ = 0;
}
inline int32_t DeviceDescriptorResponse::_internal_protocol_version() const {
  return protocol_version_;
}
inline int32_t DeviceDescriptorResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.protocol_version)
  return _internal_protocol_version();
}
inline void DeviceDescriptorResponse::_internal_set_protocol_version(int32_t value) {
  
  protocol_version_ = value;
}
inline void DeviceDescriptorResponse::set_protocol_version(int32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.protocol_version)
}

// string hostname = 2;
inline void DeviceDescriptorResponse::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& DeviceDescriptorResponse::hostname() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceDescriptorResponse::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}
inline std::string* DeviceDescriptorResponse::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  return _s;
}
inline const std::string& DeviceDescriptorResponse::_internal_hostname() const {
  return hostname_.Get();
}
inline void DeviceDescriptorResponse::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceDescriptorResponse::_internal_mutable_hostname() {
  
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceDescriptorResponse::release_hostname() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceDescriptorResponse::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.hostname)
}

// string device_type = 3;
inline void DeviceDescriptorResponse::clear_device_type() {
  device_type_.ClearToEmpty();
}
inline const std::string& DeviceDescriptorResponse::device_type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  return _internal_device_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceDescriptorResponse::set_device_type(ArgT0&& arg0, ArgT... args) {
 
 device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}
inline std::string* DeviceDescriptorResponse::mutable_device_type() {
  std::string* _s = _internal_mutable_device_type();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  return _s;
}
inline const std::string& DeviceDescriptorResponse::_internal_device_type() const {
  return device_type_.Get();
}
inline void DeviceDescriptorResponse::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceDescriptorResponse::_internal_mutable_device_type() {
  
  return device_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceDescriptorResponse::release_device_type() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceDescriptorResponse::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.device_type)
}

// string firmware_version = 4;
inline void DeviceDescriptorResponse::clear_firmware_version() {
  firmware_version_.ClearToEmpty();
}
inline const std::string& DeviceDescriptorResponse::firmware_version() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  return _internal_firmware_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceDescriptorResponse::set_firmware_version(ArgT0&& arg0, ArgT... args) {
 
 firmware_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}
inline std::string* DeviceDescriptorResponse::mutable_firmware_version() {
  std::string* _s = _internal_mutable_firmware_version();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  return _s;
}
inline const std::string& DeviceDescriptorResponse::_internal_firmware_version() const {
  return firmware_version_.Get();
}
inline void DeviceDescriptorResponse::_internal_set_firmware_version(const std::string& value) {
  
  firmware_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceDescriptorResponse::_internal_mutable_firmware_version() {
  
  return firmware_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceDescriptorResponse::release_firmware_version() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
  return firmware_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceDescriptorResponse::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (firmware_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.DeviceDescriptorResponse.firmware_version)
}

// repeated .naki3d.common.protocol.SensorDescriptor available_sensors = 5;
inline int DeviceDescriptorResponse::_internal_available_sensors_size() const {
  return available_sensors_.size();
}
inline int DeviceDescriptorResponse::available_sensors_size() const {
  return _internal_available_sensors_size();
}
inline ::naki3d::common::protocol::SensorDescriptor* DeviceDescriptorResponse::mutable_available_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >*
DeviceDescriptorResponse::mutable_available_sensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return &available_sensors_;
}
inline const ::naki3d::common::protocol::SensorDescriptor& DeviceDescriptorResponse::_internal_available_sensors(int index) const {
  return available_sensors_.Get(index);
}
inline const ::naki3d::common::protocol::SensorDescriptor& DeviceDescriptorResponse::available_sensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return _internal_available_sensors(index);
}
inline ::naki3d::common::protocol::SensorDescriptor* DeviceDescriptorResponse::_internal_add_available_sensors() {
  return available_sensors_.Add();
}
inline ::naki3d::common::protocol::SensorDescriptor* DeviceDescriptorResponse::add_available_sensors() {
  ::naki3d::common::protocol::SensorDescriptor* _add = _internal_add_available_sensors();
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::SensorDescriptor >&
DeviceDescriptorResponse::available_sensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.DeviceDescriptorResponse.available_sensors)
  return available_sensors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_emt_2dgrpc_2eproto

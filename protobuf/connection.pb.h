// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connection_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class ConnectionAcknowledgement;
struct ConnectionAcknowledgementDefaultTypeInternal;
extern ConnectionAcknowledgementDefaultTypeInternal _ConnectionAcknowledgement_default_instance_;
class ConnectionRequest;
struct ConnectionRequestDefaultTypeInternal;
extern ConnectionRequestDefaultTypeInternal _ConnectionRequest_default_instance_;
class DeviceDescriptor;
struct DeviceDescriptorDefaultTypeInternal;
extern DeviceDescriptorDefaultTypeInternal _DeviceDescriptor_default_instance_;
class EncryptionInfo;
struct EncryptionInfoDefaultTypeInternal;
extern EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class VersionInfo;
struct VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::ConnectionAcknowledgement* Arena::CreateMaybeMessage<::naki3d::common::protocol::ConnectionAcknowledgement>(Arena*);
template<> ::naki3d::common::protocol::ConnectionRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::ConnectionRequest>(Arena*);
template<> ::naki3d::common::protocol::DeviceDescriptor* Arena::CreateMaybeMessage<::naki3d::common::protocol::DeviceDescriptor>(Arena*);
template<> ::naki3d::common::protocol::EncryptionInfo* Arena::CreateMaybeMessage<::naki3d::common::protocol::EncryptionInfo>(Arena*);
template<> ::naki3d::common::protocol::Ping* Arena::CreateMaybeMessage<::naki3d::common::protocol::Ping>(Arena*);
template<> ::naki3d::common::protocol::VersionInfo* Arena::CreateMaybeMessage<::naki3d::common::protocol::VersionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

enum PerformanceCap : int {
  PERFORMANCE_CAP_SLOW = 0,
  PERFORMANCE_CAP_MEDIUM = 1,
  PERFORMANCE_CAP_FAST = 2,
  PerformanceCap_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PerformanceCap_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PerformanceCap_IsValid(int value);
constexpr PerformanceCap PerformanceCap_MIN = PERFORMANCE_CAP_SLOW;
constexpr PerformanceCap PerformanceCap_MAX = PERFORMANCE_CAP_FAST;
constexpr int PerformanceCap_ARRAYSIZE = PerformanceCap_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceCap_descriptor();
template<typename T>
inline const std::string& PerformanceCap_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerformanceCap>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerformanceCap_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PerformanceCap_descriptor(), enum_t_value);
}
inline bool PerformanceCap_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerformanceCap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerformanceCap>(
    PerformanceCap_descriptor(), name, value);
}
enum SensorType : int {
  SENSOR_TYPE_GESTURE = 0,
  SENSOR_TYPE_IMAGE = 1,
  SENSOR_TYPE_DEPTH = 2,
  SENSOR_TYPE_LIGHT = 3,
  SENSOR_TYPE_MICROPHONE = 4,
  SENSOR_TYPE_IR = 5,
  SENSOR_TYPE_HANDTRACKING = 6,
  SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SensorType_IsValid(int value);
constexpr SensorType SensorType_MIN = SENSOR_TYPE_GESTURE;
constexpr SensorType SensorType_MAX = SENSOR_TYPE_HANDTRACKING;
constexpr int SensorType_ARRAYSIZE = SensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor();
template<typename T>
inline const std::string& SensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorType_descriptor(), enum_t_value);
}
inline bool SensorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorType>(
    SensorType_descriptor(), name, value);
}
enum DeviceType : int {
  DEVICE_TYPE_UNKNOWN = 0,
  DEVICE_TYPE_IPW = 1,
  DEVICE_TYPE_PGE = 2,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = DEVICE_TYPE_UNKNOWN;
constexpr DeviceType DeviceType_MAX = DEVICE_TYPE_PGE;
constexpr int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor();
template<typename T>
inline const std::string& DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceType_descriptor(), enum_t_value);
}
inline bool DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
// ===================================================================

class VersionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.VersionInfo) */ {
 public:
  inline VersionInfo() : VersionInfo(nullptr) {}
  ~VersionInfo() override;
  explicit PROTOBUF_CONSTEXPR VersionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionInfo(const VersionInfo& from);
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionInfo& from) {
    VersionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.VersionInfo";
  }
  protected:
  explicit VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildFieldNumber = 4,
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // string build = 4;
  void clear_build();
  const std::string& build() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build();
  PROTOBUF_NODISCARD std::string* release_build();
  void set_allocated_build(std::string* build);
  private:
  const std::string& _internal_build() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build(const std::string& value);
  std::string* _internal_mutable_build();
  public:

  // uint32 major = 1;
  void clear_major();
  uint32_t major() const;
  void set_major(uint32_t value);
  private:
  uint32_t _internal_major() const;
  void _internal_set_major(uint32_t value);
  public:

  // uint32 minor = 2;
  void clear_minor();
  uint32_t minor() const;
  void set_minor(uint32_t value);
  private:
  uint32_t _internal_minor() const;
  void _internal_set_minor(uint32_t value);
  public:

  // uint32 patch = 3;
  void clear_patch();
  uint32_t patch() const;
  void set_patch(uint32_t value);
  private:
  uint32_t _internal_patch() const;
  void _internal_set_patch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.VersionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_;
    uint32_t major_;
    uint32_t minor_;
    uint32_t patch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class ConnectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ConnectionRequest) */ {
 public:
  inline ConnectionRequest() : ConnectionRequest(nullptr) {}
  ~ConnectionRequest() override;
  explicit PROTOBUF_CONSTEXPR ConnectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionRequest(const ConnectionRequest& from);
  ConnectionRequest(ConnectionRequest&& from) noexcept
    : ConnectionRequest() {
    *this = ::std::move(from);
  }

  inline ConnectionRequest& operator=(const ConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionRequest& operator=(ConnectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectionRequest*>(
               &_ConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionRequest& a, ConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionRequest& from) {
    ConnectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ConnectionRequest";
  }
  protected:
  explicit ConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // string connection_id = 1;
  void clear_connection_id();
  const std::string& connection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class ConnectionAcknowledgement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ConnectionAcknowledgement) */ {
 public:
  inline ConnectionAcknowledgement() : ConnectionAcknowledgement(nullptr) {}
  ~ConnectionAcknowledgement() override;
  explicit PROTOBUF_CONSTEXPR ConnectionAcknowledgement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionAcknowledgement(const ConnectionAcknowledgement& from);
  ConnectionAcknowledgement(ConnectionAcknowledgement&& from) noexcept
    : ConnectionAcknowledgement() {
    *this = ::std::move(from);
  }

  inline ConnectionAcknowledgement& operator=(const ConnectionAcknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionAcknowledgement& operator=(ConnectionAcknowledgement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionAcknowledgement& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionAcknowledgement* internal_default_instance() {
    return reinterpret_cast<const ConnectionAcknowledgement*>(
               &_ConnectionAcknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectionAcknowledgement& a, ConnectionAcknowledgement& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionAcknowledgement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionAcknowledgement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionAcknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionAcknowledgement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionAcknowledgement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionAcknowledgement& from) {
    ConnectionAcknowledgement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionAcknowledgement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ConnectionAcknowledgement";
  }
  protected:
  explicit ConnectionAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kVerifiedFieldNumber = 2,
  };
  // string connection_id = 1;
  void clear_connection_id();
  const std::string& connection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // bool verified = 2;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ConnectionAcknowledgement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    bool verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class DeviceDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.DeviceDescriptor) */ {
 public:
  inline DeviceDescriptor() : DeviceDescriptor(nullptr) {}
  ~DeviceDescriptor() override;
  explicit PROTOBUF_CONSTEXPR DeviceDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceDescriptor(const DeviceDescriptor& from);
  DeviceDescriptor(DeviceDescriptor&& from) noexcept
    : DeviceDescriptor() {
    *this = ::std::move(from);
  }

  inline DeviceDescriptor& operator=(const DeviceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceDescriptor& operator=(DeviceDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceDescriptor* internal_default_instance() {
    return reinterpret_cast<const DeviceDescriptor*>(
               &_DeviceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceDescriptor& a, DeviceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceDescriptor& from) {
    DeviceDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.DeviceDescriptor";
  }
  protected:
  explicit DeviceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalSensorsFieldNumber = 3,
    kTypeFieldNumber = 1,
    kPerformanceCapFieldNumber = 2,
  };
  // repeated .naki3d.common.protocol.SensorType localSensors = 3;
  int localsensors_size() const;
  private:
  int _internal_localsensors_size() const;
  public:
  void clear_localsensors();
  private:
  ::naki3d::common::protocol::SensorType _internal_localsensors(int index) const;
  void _internal_add_localsensors(::naki3d::common::protocol::SensorType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_localsensors();
  public:
  ::naki3d::common::protocol::SensorType localsensors(int index) const;
  void set_localsensors(int index, ::naki3d::common::protocol::SensorType value);
  void add_localsensors(::naki3d::common::protocol::SensorType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& localsensors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_localsensors();

  // .naki3d.common.protocol.DeviceType type = 1;
  void clear_type();
  ::naki3d::common::protocol::DeviceType type() const;
  void set_type(::naki3d::common::protocol::DeviceType value);
  private:
  ::naki3d::common::protocol::DeviceType _internal_type() const;
  void _internal_set_type(::naki3d::common::protocol::DeviceType value);
  public:

  // .naki3d.common.protocol.PerformanceCap performanceCap = 2;
  void clear_performancecap();
  ::naki3d::common::protocol::PerformanceCap performancecap() const;
  void set_performancecap(::naki3d::common::protocol::PerformanceCap value);
  private:
  ::naki3d::common::protocol::PerformanceCap _internal_performancecap() const;
  void _internal_set_performancecap(::naki3d::common::protocol::PerformanceCap value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.DeviceDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> localsensors_;
    mutable std::atomic<int> _localsensors_cached_byte_size_;
    int type_;
    int performancecap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class Ping final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Ping& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Ping& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class EncryptionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.EncryptionInfo) */ {
 public:
  inline EncryptionInfo() : EncryptionInfo(nullptr) {}
  ~EncryptionInfo() override;
  explicit PROTOBUF_CONSTEXPR EncryptionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptionInfo(const EncryptionInfo& from);
  EncryptionInfo(EncryptionInfo&& from) noexcept
    : EncryptionInfo() {
    *this = ::std::move(from);
  }

  inline EncryptionInfo& operator=(const EncryptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionInfo& operator=(EncryptionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptionInfo* internal_default_instance() {
    return reinterpret_cast<const EncryptionInfo*>(
               &_EncryptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EncryptionInfo& a, EncryptionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncryptionInfo& from) {
    EncryptionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.EncryptionInfo";
  }
  protected:
  explicit EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManagementKeysFieldNumber = 2,
    kDeviceCertificateFieldNumber = 1,
  };
  // repeated bytes managementKeys = 2;
  int managementkeys_size() const;
  private:
  int _internal_managementkeys_size() const;
  public:
  void clear_managementkeys();
  const std::string& managementkeys(int index) const;
  std::string* mutable_managementkeys(int index);
  void set_managementkeys(int index, const std::string& value);
  void set_managementkeys(int index, std::string&& value);
  void set_managementkeys(int index, const char* value);
  void set_managementkeys(int index, const void* value, size_t size);
  std::string* add_managementkeys();
  void add_managementkeys(const std::string& value);
  void add_managementkeys(std::string&& value);
  void add_managementkeys(const char* value);
  void add_managementkeys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& managementkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_managementkeys();
  private:
  const std::string& _internal_managementkeys(int index) const;
  std::string* _internal_add_managementkeys();
  public:

  // bytes deviceCertificate = 1;
  void clear_devicecertificate();
  const std::string& devicecertificate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicecertificate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicecertificate();
  PROTOBUF_NODISCARD std::string* release_devicecertificate();
  void set_allocated_devicecertificate(std::string* devicecertificate);
  private:
  const std::string& _internal_devicecertificate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicecertificate(const std::string& value);
  std::string* _internal_mutable_devicecertificate();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.EncryptionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> managementkeys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicecertificate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionInfo

// uint32 major = 1;
inline void VersionInfo::clear_major() {
  _impl_.major_ = 0u;
}
inline uint32_t VersionInfo::_internal_major() const {
  return _impl_.major_;
}
inline uint32_t VersionInfo::major() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.VersionInfo.major)
  return _internal_major();
}
inline void VersionInfo::_internal_set_major(uint32_t value) {
  
  _impl_.major_ = value;
}
inline void VersionInfo::set_major(uint32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.VersionInfo.major)
}

// uint32 minor = 2;
inline void VersionInfo::clear_minor() {
  _impl_.minor_ = 0u;
}
inline uint32_t VersionInfo::_internal_minor() const {
  return _impl_.minor_;
}
inline uint32_t VersionInfo::minor() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.VersionInfo.minor)
  return _internal_minor();
}
inline void VersionInfo::_internal_set_minor(uint32_t value) {
  
  _impl_.minor_ = value;
}
inline void VersionInfo::set_minor(uint32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.VersionInfo.minor)
}

// uint32 patch = 3;
inline void VersionInfo::clear_patch() {
  _impl_.patch_ = 0u;
}
inline uint32_t VersionInfo::_internal_patch() const {
  return _impl_.patch_;
}
inline uint32_t VersionInfo::patch() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.VersionInfo.patch)
  return _internal_patch();
}
inline void VersionInfo::_internal_set_patch(uint32_t value) {
  
  _impl_.patch_ = value;
}
inline void VersionInfo::set_patch(uint32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.VersionInfo.patch)
}

// string build = 4;
inline void VersionInfo::clear_build() {
  _impl_.build_.ClearToEmpty();
}
inline const std::string& VersionInfo::build() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.VersionInfo.build)
  return _internal_build();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionInfo::set_build(ArgT0&& arg0, ArgT... args) {
 
 _impl_.build_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.VersionInfo.build)
}
inline std::string* VersionInfo::mutable_build() {
  std::string* _s = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.VersionInfo.build)
  return _s;
}
inline const std::string& VersionInfo::_internal_build() const {
  return _impl_.build_.Get();
}
inline void VersionInfo::_internal_set_build(const std::string& value) {
  
  _impl_.build_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_build() {
  
  return _impl_.build_.Mutable(GetArenaForAllocation());
}
inline std::string* VersionInfo::release_build() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.VersionInfo.build)
  return _impl_.build_.Release();
}
inline void VersionInfo::set_allocated_build(std::string* build) {
  if (build != nullptr) {
    
  } else {
    
  }
  _impl_.build_.SetAllocated(build, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.build_.IsDefault()) {
    _impl_.build_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.VersionInfo.build)
}

// -------------------------------------------------------------------

// ConnectionRequest

// string connection_id = 1;
inline void ConnectionRequest::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& ConnectionRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ConnectionRequest.connection_id)
  return _internal_connection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionRequest::set_connection_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.connection_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ConnectionRequest.connection_id)
}
inline std::string* ConnectionRequest::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.ConnectionRequest.connection_id)
  return _s;
}
inline const std::string& ConnectionRequest::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void ConnectionRequest::_internal_set_connection_id(const std::string& value) {
  
  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectionRequest::_internal_mutable_connection_id() {
  
  return _impl_.connection_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectionRequest::release_connection_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.ConnectionRequest.connection_id)
  return _impl_.connection_id_.Release();
}
inline void ConnectionRequest::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  _impl_.connection_id_.SetAllocated(connection_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.connection_id_.IsDefault()) {
    _impl_.connection_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.ConnectionRequest.connection_id)
}

// bytes public_key = 2;
inline void ConnectionRequest::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& ConnectionRequest::public_key() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ConnectionRequest.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionRequest::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ConnectionRequest.public_key)
}
inline std::string* ConnectionRequest::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.ConnectionRequest.public_key)
  return _s;
}
inline const std::string& ConnectionRequest::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void ConnectionRequest::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectionRequest::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectionRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.ConnectionRequest.public_key)
  return _impl_.public_key_.Release();
}
inline void ConnectionRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.ConnectionRequest.public_key)
}

// -------------------------------------------------------------------

// ConnectionAcknowledgement

// string connection_id = 1;
inline void ConnectionAcknowledgement::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& ConnectionAcknowledgement::connection_id() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ConnectionAcknowledgement.connection_id)
  return _internal_connection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionAcknowledgement::set_connection_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.connection_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ConnectionAcknowledgement.connection_id)
}
inline std::string* ConnectionAcknowledgement::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.ConnectionAcknowledgement.connection_id)
  return _s;
}
inline const std::string& ConnectionAcknowledgement::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void ConnectionAcknowledgement::_internal_set_connection_id(const std::string& value) {
  
  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectionAcknowledgement::_internal_mutable_connection_id() {
  
  return _impl_.connection_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectionAcknowledgement::release_connection_id() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.ConnectionAcknowledgement.connection_id)
  return _impl_.connection_id_.Release();
}
inline void ConnectionAcknowledgement::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  _impl_.connection_id_.SetAllocated(connection_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.connection_id_.IsDefault()) {
    _impl_.connection_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.ConnectionAcknowledgement.connection_id)
}

// bool verified = 2;
inline void ConnectionAcknowledgement::clear_verified() {
  _impl_.verified_ = false;
}
inline bool ConnectionAcknowledgement::_internal_verified() const {
  return _impl_.verified_;
}
inline bool ConnectionAcknowledgement::verified() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ConnectionAcknowledgement.verified)
  return _internal_verified();
}
inline void ConnectionAcknowledgement::_internal_set_verified(bool value) {
  
  _impl_.verified_ = value;
}
inline void ConnectionAcknowledgement::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ConnectionAcknowledgement.verified)
}

// -------------------------------------------------------------------

// DeviceDescriptor

// .naki3d.common.protocol.DeviceType type = 1;
inline void DeviceDescriptor::clear_type() {
  _impl_.type_ = 0;
}
inline ::naki3d::common::protocol::DeviceType DeviceDescriptor::_internal_type() const {
  return static_cast< ::naki3d::common::protocol::DeviceType >(_impl_.type_);
}
inline ::naki3d::common::protocol::DeviceType DeviceDescriptor::type() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptor.type)
  return _internal_type();
}
inline void DeviceDescriptor::_internal_set_type(::naki3d::common::protocol::DeviceType value) {
  
  _impl_.type_ = value;
}
inline void DeviceDescriptor::set_type(::naki3d::common::protocol::DeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptor.type)
}

// .naki3d.common.protocol.PerformanceCap performanceCap = 2;
inline void DeviceDescriptor::clear_performancecap() {
  _impl_.performancecap_ = 0;
}
inline ::naki3d::common::protocol::PerformanceCap DeviceDescriptor::_internal_performancecap() const {
  return static_cast< ::naki3d::common::protocol::PerformanceCap >(_impl_.performancecap_);
}
inline ::naki3d::common::protocol::PerformanceCap DeviceDescriptor::performancecap() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptor.performanceCap)
  return _internal_performancecap();
}
inline void DeviceDescriptor::_internal_set_performancecap(::naki3d::common::protocol::PerformanceCap value) {
  
  _impl_.performancecap_ = value;
}
inline void DeviceDescriptor::set_performancecap(::naki3d::common::protocol::PerformanceCap value) {
  _internal_set_performancecap(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptor.performanceCap)
}

// repeated .naki3d.common.protocol.SensorType localSensors = 3;
inline int DeviceDescriptor::_internal_localsensors_size() const {
  return _impl_.localsensors_.size();
}
inline int DeviceDescriptor::localsensors_size() const {
  return _internal_localsensors_size();
}
inline void DeviceDescriptor::clear_localsensors() {
  _impl_.localsensors_.Clear();
}
inline ::naki3d::common::protocol::SensorType DeviceDescriptor::_internal_localsensors(int index) const {
  return static_cast< ::naki3d::common::protocol::SensorType >(_impl_.localsensors_.Get(index));
}
inline ::naki3d::common::protocol::SensorType DeviceDescriptor::localsensors(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.DeviceDescriptor.localSensors)
  return _internal_localsensors(index);
}
inline void DeviceDescriptor::set_localsensors(int index, ::naki3d::common::protocol::SensorType value) {
  _impl_.localsensors_.Set(index, value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.DeviceDescriptor.localSensors)
}
inline void DeviceDescriptor::_internal_add_localsensors(::naki3d::common::protocol::SensorType value) {
  _impl_.localsensors_.Add(value);
}
inline void DeviceDescriptor::add_localsensors(::naki3d::common::protocol::SensorType value) {
  _internal_add_localsensors(value);
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.DeviceDescriptor.localSensors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
DeviceDescriptor::localsensors() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.DeviceDescriptor.localSensors)
  return _impl_.localsensors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeviceDescriptor::_internal_mutable_localsensors() {
  return &_impl_.localsensors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeviceDescriptor::mutable_localsensors() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.DeviceDescriptor.localSensors)
  return _internal_mutable_localsensors();
}

// -------------------------------------------------------------------

// Ping

// -------------------------------------------------------------------

// EncryptionInfo

// bytes deviceCertificate = 1;
inline void EncryptionInfo::clear_devicecertificate() {
  _impl_.devicecertificate_.ClearToEmpty();
}
inline const std::string& EncryptionInfo::devicecertificate() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.EncryptionInfo.deviceCertificate)
  return _internal_devicecertificate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionInfo::set_devicecertificate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.devicecertificate_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.EncryptionInfo.deviceCertificate)
}
inline std::string* EncryptionInfo::mutable_devicecertificate() {
  std::string* _s = _internal_mutable_devicecertificate();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.EncryptionInfo.deviceCertificate)
  return _s;
}
inline const std::string& EncryptionInfo::_internal_devicecertificate() const {
  return _impl_.devicecertificate_.Get();
}
inline void EncryptionInfo::_internal_set_devicecertificate(const std::string& value) {
  
  _impl_.devicecertificate_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionInfo::_internal_mutable_devicecertificate() {
  
  return _impl_.devicecertificate_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionInfo::release_devicecertificate() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.EncryptionInfo.deviceCertificate)
  return _impl_.devicecertificate_.Release();
}
inline void EncryptionInfo::set_allocated_devicecertificate(std::string* devicecertificate) {
  if (devicecertificate != nullptr) {
    
  } else {
    
  }
  _impl_.devicecertificate_.SetAllocated(devicecertificate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicecertificate_.IsDefault()) {
    _impl_.devicecertificate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.EncryptionInfo.deviceCertificate)
}

// repeated bytes managementKeys = 2;
inline int EncryptionInfo::_internal_managementkeys_size() const {
  return _impl_.managementkeys_.size();
}
inline int EncryptionInfo::managementkeys_size() const {
  return _internal_managementkeys_size();
}
inline void EncryptionInfo::clear_managementkeys() {
  _impl_.managementkeys_.Clear();
}
inline std::string* EncryptionInfo::add_managementkeys() {
  std::string* _s = _internal_add_managementkeys();
  // @@protoc_insertion_point(field_add_mutable:naki3d.common.protocol.EncryptionInfo.managementKeys)
  return _s;
}
inline const std::string& EncryptionInfo::_internal_managementkeys(int index) const {
  return _impl_.managementkeys_.Get(index);
}
inline const std::string& EncryptionInfo::managementkeys(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.EncryptionInfo.managementKeys)
  return _internal_managementkeys(index);
}
inline std::string* EncryptionInfo::mutable_managementkeys(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.EncryptionInfo.managementKeys)
  return _impl_.managementkeys_.Mutable(index);
}
inline void EncryptionInfo::set_managementkeys(int index, const std::string& value) {
  _impl_.managementkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline void EncryptionInfo::set_managementkeys(int index, std::string&& value) {
  _impl_.managementkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline void EncryptionInfo::set_managementkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.managementkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline void EncryptionInfo::set_managementkeys(int index, const void* value, size_t size) {
  _impl_.managementkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline std::string* EncryptionInfo::_internal_add_managementkeys() {
  return _impl_.managementkeys_.Add();
}
inline void EncryptionInfo::add_managementkeys(const std::string& value) {
  _impl_.managementkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline void EncryptionInfo::add_managementkeys(std::string&& value) {
  _impl_.managementkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline void EncryptionInfo::add_managementkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.managementkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline void EncryptionInfo::add_managementkeys(const void* value, size_t size) {
  _impl_.managementkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:naki3d.common.protocol.EncryptionInfo.managementKeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EncryptionInfo::managementkeys() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.EncryptionInfo.managementKeys)
  return _impl_.managementkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EncryptionInfo::mutable_managementkeys() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.EncryptionInfo.managementKeys)
  return &_impl_.managementkeys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::naki3d::common::protocol::PerformanceCap> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::PerformanceCap>() {
  return ::naki3d::common::protocol::PerformanceCap_descriptor();
}
template <> struct is_proto_enum< ::naki3d::common::protocol::SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::SensorType>() {
  return ::naki3d::common::protocol::SensorType_descriptor();
}
template <> struct is_proto_enum< ::naki3d::common::protocol::DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::DeviceType>() {
  return ::naki3d::common::protocol::DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connection_2eproto

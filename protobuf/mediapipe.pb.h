// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include "handtracking.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class FingerState;
class FingerStateDefaultTypeInternal;
extern FingerStateDefaultTypeInternal _FingerState_default_instance_;
class HandFingerState;
class HandFingerStateDefaultTypeInternal;
extern HandFingerStateDefaultTypeInternal _HandFingerState_default_instance_;
class MediapipeHandTrackingData;
class MediapipeHandTrackingDataDefaultTypeInternal;
extern MediapipeHandTrackingDataDefaultTypeInternal _MediapipeHandTrackingData_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::FingerState* Arena::CreateMaybeMessage<::naki3d::common::protocol::FingerState>(Arena*);
template<> ::naki3d::common::protocol::HandFingerState* Arena::CreateMaybeMessage<::naki3d::common::protocol::HandFingerState>(Arena*);
template<> ::naki3d::common::protocol::MediapipeHandTrackingData* Arena::CreateMaybeMessage<::naki3d::common::protocol::MediapipeHandTrackingData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

// ===================================================================

class FingerState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.FingerState) */ {
 public:
  inline FingerState() : FingerState(nullptr) {};
  virtual ~FingerState();

  FingerState(const FingerState& from);
  FingerState(FingerState&& from) noexcept
    : FingerState() {
    *this = ::std::move(from);
  }

  inline FingerState& operator=(const FingerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FingerState& operator=(FingerState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FingerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FingerState* internal_default_instance() {
    return reinterpret_cast<const FingerState*>(
               &_FingerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FingerState& a, FingerState& b) {
    a.Swap(&b);
  }
  inline void Swap(FingerState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FingerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FingerState* New() const final {
    return CreateMaybeMessage<FingerState>(nullptr);
  }

  FingerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FingerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FingerState& from);
  void MergeFrom(const FingerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FingerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.FingerState";
  }
  protected:
  explicit FingerState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2eproto);
    return ::descriptor_table_mediapipe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kClosedFieldNumber = 1,
  };
  // .naki3d.common.protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::naki3d::common::protocol::Vector3& position() const;
  ::naki3d::common::protocol::Vector3* release_position();
  ::naki3d::common::protocol::Vector3* mutable_position();
  void set_allocated_position(::naki3d::common::protocol::Vector3* position);
  private:
  const ::naki3d::common::protocol::Vector3& _internal_position() const;
  ::naki3d::common::protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::naki3d::common::protocol::Vector3* position);
  ::naki3d::common::protocol::Vector3* unsafe_arena_release_position();

  // bool closed = 1;
  void clear_closed();
  bool closed() const;
  void set_closed(bool value);
  private:
  bool _internal_closed() const;
  void _internal_set_closed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.FingerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::naki3d::common::protocol::Vector3* position_;
  bool closed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2eproto;
};
// -------------------------------------------------------------------

class HandFingerState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.HandFingerState) */ {
 public:
  inline HandFingerState() : HandFingerState(nullptr) {};
  virtual ~HandFingerState();

  HandFingerState(const HandFingerState& from);
  HandFingerState(HandFingerState&& from) noexcept
    : HandFingerState() {
    *this = ::std::move(from);
  }

  inline HandFingerState& operator=(const HandFingerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandFingerState& operator=(HandFingerState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandFingerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandFingerState* internal_default_instance() {
    return reinterpret_cast<const HandFingerState*>(
               &_HandFingerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandFingerState& a, HandFingerState& b) {
    a.Swap(&b);
  }
  inline void Swap(HandFingerState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandFingerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandFingerState* New() const final {
    return CreateMaybeMessage<HandFingerState>(nullptr);
  }

  HandFingerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandFingerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandFingerState& from);
  void MergeFrom(const HandFingerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandFingerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.HandFingerState";
  }
  protected:
  explicit HandFingerState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2eproto);
    return ::descriptor_table_mediapipe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThumbFieldNumber = 1,
    kIndexFieldNumber = 2,
    kMiddleFieldNumber = 3,
    kRingFieldNumber = 4,
    kPinkyFieldNumber = 5,
  };
  // .naki3d.common.protocol.FingerState thumb = 1;
  bool has_thumb() const;
  private:
  bool _internal_has_thumb() const;
  public:
  void clear_thumb();
  const ::naki3d::common::protocol::FingerState& thumb() const;
  ::naki3d::common::protocol::FingerState* release_thumb();
  ::naki3d::common::protocol::FingerState* mutable_thumb();
  void set_allocated_thumb(::naki3d::common::protocol::FingerState* thumb);
  private:
  const ::naki3d::common::protocol::FingerState& _internal_thumb() const;
  ::naki3d::common::protocol::FingerState* _internal_mutable_thumb();
  public:
  void unsafe_arena_set_allocated_thumb(
      ::naki3d::common::protocol::FingerState* thumb);
  ::naki3d::common::protocol::FingerState* unsafe_arena_release_thumb();

  // .naki3d.common.protocol.FingerState index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  const ::naki3d::common::protocol::FingerState& index() const;
  ::naki3d::common::protocol::FingerState* release_index();
  ::naki3d::common::protocol::FingerState* mutable_index();
  void set_allocated_index(::naki3d::common::protocol::FingerState* index);
  private:
  const ::naki3d::common::protocol::FingerState& _internal_index() const;
  ::naki3d::common::protocol::FingerState* _internal_mutable_index();
  public:
  void unsafe_arena_set_allocated_index(
      ::naki3d::common::protocol::FingerState* index);
  ::naki3d::common::protocol::FingerState* unsafe_arena_release_index();

  // .naki3d.common.protocol.FingerState middle = 3;
  bool has_middle() const;
  private:
  bool _internal_has_middle() const;
  public:
  void clear_middle();
  const ::naki3d::common::protocol::FingerState& middle() const;
  ::naki3d::common::protocol::FingerState* release_middle();
  ::naki3d::common::protocol::FingerState* mutable_middle();
  void set_allocated_middle(::naki3d::common::protocol::FingerState* middle);
  private:
  const ::naki3d::common::protocol::FingerState& _internal_middle() const;
  ::naki3d::common::protocol::FingerState* _internal_mutable_middle();
  public:
  void unsafe_arena_set_allocated_middle(
      ::naki3d::common::protocol::FingerState* middle);
  ::naki3d::common::protocol::FingerState* unsafe_arena_release_middle();

  // .naki3d.common.protocol.FingerState ring = 4;
  bool has_ring() const;
  private:
  bool _internal_has_ring() const;
  public:
  void clear_ring();
  const ::naki3d::common::protocol::FingerState& ring() const;
  ::naki3d::common::protocol::FingerState* release_ring();
  ::naki3d::common::protocol::FingerState* mutable_ring();
  void set_allocated_ring(::naki3d::common::protocol::FingerState* ring);
  private:
  const ::naki3d::common::protocol::FingerState& _internal_ring() const;
  ::naki3d::common::protocol::FingerState* _internal_mutable_ring();
  public:
  void unsafe_arena_set_allocated_ring(
      ::naki3d::common::protocol::FingerState* ring);
  ::naki3d::common::protocol::FingerState* unsafe_arena_release_ring();

  // .naki3d.common.protocol.FingerState pinky = 5;
  bool has_pinky() const;
  private:
  bool _internal_has_pinky() const;
  public:
  void clear_pinky();
  const ::naki3d::common::protocol::FingerState& pinky() const;
  ::naki3d::common::protocol::FingerState* release_pinky();
  ::naki3d::common::protocol::FingerState* mutable_pinky();
  void set_allocated_pinky(::naki3d::common::protocol::FingerState* pinky);
  private:
  const ::naki3d::common::protocol::FingerState& _internal_pinky() const;
  ::naki3d::common::protocol::FingerState* _internal_mutable_pinky();
  public:
  void unsafe_arena_set_allocated_pinky(
      ::naki3d::common::protocol::FingerState* pinky);
  ::naki3d::common::protocol::FingerState* unsafe_arena_release_pinky();

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.HandFingerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::naki3d::common::protocol::FingerState* thumb_;
  ::naki3d::common::protocol::FingerState* index_;
  ::naki3d::common::protocol::FingerState* middle_;
  ::naki3d::common::protocol::FingerState* ring_;
  ::naki3d::common::protocol::FingerState* pinky_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2eproto;
};
// -------------------------------------------------------------------

class MediapipeHandTrackingData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.MediapipeHandTrackingData) */ {
 public:
  inline MediapipeHandTrackingData() : MediapipeHandTrackingData(nullptr) {};
  virtual ~MediapipeHandTrackingData();

  MediapipeHandTrackingData(const MediapipeHandTrackingData& from);
  MediapipeHandTrackingData(MediapipeHandTrackingData&& from) noexcept
    : MediapipeHandTrackingData() {
    *this = ::std::move(from);
  }

  inline MediapipeHandTrackingData& operator=(const MediapipeHandTrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediapipeHandTrackingData& operator=(MediapipeHandTrackingData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediapipeHandTrackingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediapipeHandTrackingData* internal_default_instance() {
    return reinterpret_cast<const MediapipeHandTrackingData*>(
               &_MediapipeHandTrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MediapipeHandTrackingData& a, MediapipeHandTrackingData& b) {
    a.Swap(&b);
  }
  inline void Swap(MediapipeHandTrackingData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediapipeHandTrackingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediapipeHandTrackingData* New() const final {
    return CreateMaybeMessage<MediapipeHandTrackingData>(nullptr);
  }

  MediapipeHandTrackingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediapipeHandTrackingData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediapipeHandTrackingData& from);
  void MergeFrom(const MediapipeHandTrackingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediapipeHandTrackingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.MediapipeHandTrackingData";
  }
  protected:
  explicit MediapipeHandTrackingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2eproto);
    return ::descriptor_table_mediapipe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterPositionFieldNumber = 2,
    kFingerStateFieldNumber = 3,
    kSideFieldNumber = 1,
    kGestureFieldNumber = 4,
  };
  // .naki3d.common.protocol.Vector3 center_position = 2;
  bool has_center_position() const;
  private:
  bool _internal_has_center_position() const;
  public:
  void clear_center_position();
  const ::naki3d::common::protocol::Vector3& center_position() const;
  ::naki3d::common::protocol::Vector3* release_center_position();
  ::naki3d::common::protocol::Vector3* mutable_center_position();
  void set_allocated_center_position(::naki3d::common::protocol::Vector3* center_position);
  private:
  const ::naki3d::common::protocol::Vector3& _internal_center_position() const;
  ::naki3d::common::protocol::Vector3* _internal_mutable_center_position();
  public:
  void unsafe_arena_set_allocated_center_position(
      ::naki3d::common::protocol::Vector3* center_position);
  ::naki3d::common::protocol::Vector3* unsafe_arena_release_center_position();

  // .naki3d.common.protocol.HandFingerState finger_state = 3;
  bool has_finger_state() const;
  private:
  bool _internal_has_finger_state() const;
  public:
  void clear_finger_state();
  const ::naki3d::common::protocol::HandFingerState& finger_state() const;
  ::naki3d::common::protocol::HandFingerState* release_finger_state();
  ::naki3d::common::protocol::HandFingerState* mutable_finger_state();
  void set_allocated_finger_state(::naki3d::common::protocol::HandFingerState* finger_state);
  private:
  const ::naki3d::common::protocol::HandFingerState& _internal_finger_state() const;
  ::naki3d::common::protocol::HandFingerState* _internal_mutable_finger_state();
  public:
  void unsafe_arena_set_allocated_finger_state(
      ::naki3d::common::protocol::HandFingerState* finger_state);
  ::naki3d::common::protocol::HandFingerState* unsafe_arena_release_finger_state();

  // .naki3d.common.protocol.HandSide side = 1;
  void clear_side();
  ::naki3d::common::protocol::HandSide side() const;
  void set_side(::naki3d::common::protocol::HandSide value);
  private:
  ::naki3d::common::protocol::HandSide _internal_side() const;
  void _internal_set_side(::naki3d::common::protocol::HandSide value);
  public:

  // .naki3d.common.protocol.HandGestureType gesture = 4;
  void clear_gesture();
  ::naki3d::common::protocol::HandGestureType gesture() const;
  void set_gesture(::naki3d::common::protocol::HandGestureType value);
  private:
  ::naki3d::common::protocol::HandGestureType _internal_gesture() const;
  void _internal_set_gesture(::naki3d::common::protocol::HandGestureType value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.MediapipeHandTrackingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::naki3d::common::protocol::Vector3* center_position_;
  ::naki3d::common::protocol::HandFingerState* finger_state_;
  int side_;
  int gesture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FingerState

// bool closed = 1;
inline void FingerState::clear_closed() {
  closed_ = false;
}
inline bool FingerState::_internal_closed() const {
  return closed_;
}
inline bool FingerState::closed() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.FingerState.closed)
  return _internal_closed();
}
inline void FingerState::_internal_set_closed(bool value) {
  
  closed_ = value;
}
inline void FingerState::set_closed(bool value) {
  _internal_set_closed(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.FingerState.closed)
}

// .naki3d.common.protocol.Vector3 position = 2;
inline bool FingerState::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool FingerState::has_position() const {
  return _internal_has_position();
}
inline const ::naki3d::common::protocol::Vector3& FingerState::_internal_position() const {
  const ::naki3d::common::protocol::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::Vector3*>(
      &::naki3d::common::protocol::_Vector3_default_instance_);
}
inline const ::naki3d::common::protocol::Vector3& FingerState::position() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.FingerState.position)
  return _internal_position();
}
inline void FingerState::unsafe_arena_set_allocated_position(
    ::naki3d::common::protocol::Vector3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.FingerState.position)
}
inline ::naki3d::common::protocol::Vector3* FingerState::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::Vector3* FingerState::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.FingerState.position)
  
  ::naki3d::common::protocol::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::Vector3* FingerState::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::Vector3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::naki3d::common::protocol::Vector3* FingerState::mutable_position() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.FingerState.position)
  return _internal_mutable_position();
}
inline void FingerState::set_allocated_position(::naki3d::common::protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.FingerState.position)
}

// -------------------------------------------------------------------

// HandFingerState

// .naki3d.common.protocol.FingerState thumb = 1;
inline bool HandFingerState::_internal_has_thumb() const {
  return this != internal_default_instance() && thumb_ != nullptr;
}
inline bool HandFingerState::has_thumb() const {
  return _internal_has_thumb();
}
inline void HandFingerState::clear_thumb() {
  if (GetArena() == nullptr && thumb_ != nullptr) {
    delete thumb_;
  }
  thumb_ = nullptr;
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::_internal_thumb() const {
  const ::naki3d::common::protocol::FingerState* p = thumb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::FingerState*>(
      &::naki3d::common::protocol::_FingerState_default_instance_);
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::thumb() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandFingerState.thumb)
  return _internal_thumb();
}
inline void HandFingerState::unsafe_arena_set_allocated_thumb(
    ::naki3d::common::protocol::FingerState* thumb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumb_);
  }
  thumb_ = thumb;
  if (thumb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.HandFingerState.thumb)
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::release_thumb() {
  auto temp = unsafe_arena_release_thumb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::unsafe_arena_release_thumb() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.HandFingerState.thumb)
  
  ::naki3d::common::protocol::FingerState* temp = thumb_;
  thumb_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::_internal_mutable_thumb() {
  
  if (thumb_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::FingerState>(GetArena());
    thumb_ = p;
  }
  return thumb_;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::mutable_thumb() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.HandFingerState.thumb)
  return _internal_mutable_thumb();
}
inline void HandFingerState::set_allocated_thumb(::naki3d::common::protocol::FingerState* thumb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete thumb_;
  }
  if (thumb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(thumb);
    if (message_arena != submessage_arena) {
      thumb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumb, submessage_arena);
    }
    
  } else {
    
  }
  thumb_ = thumb;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.HandFingerState.thumb)
}

// .naki3d.common.protocol.FingerState index = 2;
inline bool HandFingerState::_internal_has_index() const {
  return this != internal_default_instance() && index_ != nullptr;
}
inline bool HandFingerState::has_index() const {
  return _internal_has_index();
}
inline void HandFingerState::clear_index() {
  if (GetArena() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::_internal_index() const {
  const ::naki3d::common::protocol::FingerState* p = index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::FingerState*>(
      &::naki3d::common::protocol::_FingerState_default_instance_);
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::index() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandFingerState.index)
  return _internal_index();
}
inline void HandFingerState::unsafe_arena_set_allocated_index(
    ::naki3d::common::protocol::FingerState* index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_);
  }
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.HandFingerState.index)
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::release_index() {
  auto temp = unsafe_arena_release_index();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::unsafe_arena_release_index() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.HandFingerState.index)
  
  ::naki3d::common::protocol::FingerState* temp = index_;
  index_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::_internal_mutable_index() {
  
  if (index_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::FingerState>(GetArena());
    index_ = p;
  }
  return index_;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::mutable_index() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.HandFingerState.index)
  return _internal_mutable_index();
}
inline void HandFingerState::set_allocated_index(::naki3d::common::protocol::FingerState* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete index_;
  }
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(index);
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.HandFingerState.index)
}

// .naki3d.common.protocol.FingerState middle = 3;
inline bool HandFingerState::_internal_has_middle() const {
  return this != internal_default_instance() && middle_ != nullptr;
}
inline bool HandFingerState::has_middle() const {
  return _internal_has_middle();
}
inline void HandFingerState::clear_middle() {
  if (GetArena() == nullptr && middle_ != nullptr) {
    delete middle_;
  }
  middle_ = nullptr;
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::_internal_middle() const {
  const ::naki3d::common::protocol::FingerState* p = middle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::FingerState*>(
      &::naki3d::common::protocol::_FingerState_default_instance_);
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::middle() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandFingerState.middle)
  return _internal_middle();
}
inline void HandFingerState::unsafe_arena_set_allocated_middle(
    ::naki3d::common::protocol::FingerState* middle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(middle_);
  }
  middle_ = middle;
  if (middle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.HandFingerState.middle)
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::release_middle() {
  auto temp = unsafe_arena_release_middle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::unsafe_arena_release_middle() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.HandFingerState.middle)
  
  ::naki3d::common::protocol::FingerState* temp = middle_;
  middle_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::_internal_mutable_middle() {
  
  if (middle_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::FingerState>(GetArena());
    middle_ = p;
  }
  return middle_;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::mutable_middle() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.HandFingerState.middle)
  return _internal_mutable_middle();
}
inline void HandFingerState::set_allocated_middle(::naki3d::common::protocol::FingerState* middle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete middle_;
  }
  if (middle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(middle);
    if (message_arena != submessage_arena) {
      middle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, middle, submessage_arena);
    }
    
  } else {
    
  }
  middle_ = middle;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.HandFingerState.middle)
}

// .naki3d.common.protocol.FingerState ring = 4;
inline bool HandFingerState::_internal_has_ring() const {
  return this != internal_default_instance() && ring_ != nullptr;
}
inline bool HandFingerState::has_ring() const {
  return _internal_has_ring();
}
inline void HandFingerState::clear_ring() {
  if (GetArena() == nullptr && ring_ != nullptr) {
    delete ring_;
  }
  ring_ = nullptr;
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::_internal_ring() const {
  const ::naki3d::common::protocol::FingerState* p = ring_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::FingerState*>(
      &::naki3d::common::protocol::_FingerState_default_instance_);
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::ring() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandFingerState.ring)
  return _internal_ring();
}
inline void HandFingerState::unsafe_arena_set_allocated_ring(
    ::naki3d::common::protocol::FingerState* ring) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ring_);
  }
  ring_ = ring;
  if (ring) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.HandFingerState.ring)
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::release_ring() {
  auto temp = unsafe_arena_release_ring();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::unsafe_arena_release_ring() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.HandFingerState.ring)
  
  ::naki3d::common::protocol::FingerState* temp = ring_;
  ring_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::_internal_mutable_ring() {
  
  if (ring_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::FingerState>(GetArena());
    ring_ = p;
  }
  return ring_;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::mutable_ring() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.HandFingerState.ring)
  return _internal_mutable_ring();
}
inline void HandFingerState::set_allocated_ring(::naki3d::common::protocol::FingerState* ring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ring_;
  }
  if (ring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ring);
    if (message_arena != submessage_arena) {
      ring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ring, submessage_arena);
    }
    
  } else {
    
  }
  ring_ = ring;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.HandFingerState.ring)
}

// .naki3d.common.protocol.FingerState pinky = 5;
inline bool HandFingerState::_internal_has_pinky() const {
  return this != internal_default_instance() && pinky_ != nullptr;
}
inline bool HandFingerState::has_pinky() const {
  return _internal_has_pinky();
}
inline void HandFingerState::clear_pinky() {
  if (GetArena() == nullptr && pinky_ != nullptr) {
    delete pinky_;
  }
  pinky_ = nullptr;
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::_internal_pinky() const {
  const ::naki3d::common::protocol::FingerState* p = pinky_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::FingerState*>(
      &::naki3d::common::protocol::_FingerState_default_instance_);
}
inline const ::naki3d::common::protocol::FingerState& HandFingerState::pinky() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.HandFingerState.pinky)
  return _internal_pinky();
}
inline void HandFingerState::unsafe_arena_set_allocated_pinky(
    ::naki3d::common::protocol::FingerState* pinky) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pinky_);
  }
  pinky_ = pinky;
  if (pinky) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.HandFingerState.pinky)
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::release_pinky() {
  auto temp = unsafe_arena_release_pinky();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::unsafe_arena_release_pinky() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.HandFingerState.pinky)
  
  ::naki3d::common::protocol::FingerState* temp = pinky_;
  pinky_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::_internal_mutable_pinky() {
  
  if (pinky_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::FingerState>(GetArena());
    pinky_ = p;
  }
  return pinky_;
}
inline ::naki3d::common::protocol::FingerState* HandFingerState::mutable_pinky() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.HandFingerState.pinky)
  return _internal_mutable_pinky();
}
inline void HandFingerState::set_allocated_pinky(::naki3d::common::protocol::FingerState* pinky) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pinky_;
  }
  if (pinky) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pinky);
    if (message_arena != submessage_arena) {
      pinky = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pinky, submessage_arena);
    }
    
  } else {
    
  }
  pinky_ = pinky;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.HandFingerState.pinky)
}

// -------------------------------------------------------------------

// MediapipeHandTrackingData

// .naki3d.common.protocol.HandSide side = 1;
inline void MediapipeHandTrackingData::clear_side() {
  side_ = 0;
}
inline ::naki3d::common::protocol::HandSide MediapipeHandTrackingData::_internal_side() const {
  return static_cast< ::naki3d::common::protocol::HandSide >(side_);
}
inline ::naki3d::common::protocol::HandSide MediapipeHandTrackingData::side() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MediapipeHandTrackingData.side)
  return _internal_side();
}
inline void MediapipeHandTrackingData::_internal_set_side(::naki3d::common::protocol::HandSide value) {
  
  side_ = value;
}
inline void MediapipeHandTrackingData::set_side(::naki3d::common::protocol::HandSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.MediapipeHandTrackingData.side)
}

// .naki3d.common.protocol.Vector3 center_position = 2;
inline bool MediapipeHandTrackingData::_internal_has_center_position() const {
  return this != internal_default_instance() && center_position_ != nullptr;
}
inline bool MediapipeHandTrackingData::has_center_position() const {
  return _internal_has_center_position();
}
inline const ::naki3d::common::protocol::Vector3& MediapipeHandTrackingData::_internal_center_position() const {
  const ::naki3d::common::protocol::Vector3* p = center_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::Vector3*>(
      &::naki3d::common::protocol::_Vector3_default_instance_);
}
inline const ::naki3d::common::protocol::Vector3& MediapipeHandTrackingData::center_position() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MediapipeHandTrackingData.center_position)
  return _internal_center_position();
}
inline void MediapipeHandTrackingData::unsafe_arena_set_allocated_center_position(
    ::naki3d::common::protocol::Vector3* center_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_position_);
  }
  center_position_ = center_position;
  if (center_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.MediapipeHandTrackingData.center_position)
}
inline ::naki3d::common::protocol::Vector3* MediapipeHandTrackingData::release_center_position() {
  auto temp = unsafe_arena_release_center_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::Vector3* MediapipeHandTrackingData::unsafe_arena_release_center_position() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.MediapipeHandTrackingData.center_position)
  
  ::naki3d::common::protocol::Vector3* temp = center_position_;
  center_position_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::Vector3* MediapipeHandTrackingData::_internal_mutable_center_position() {
  
  if (center_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::Vector3>(GetArena());
    center_position_ = p;
  }
  return center_position_;
}
inline ::naki3d::common::protocol::Vector3* MediapipeHandTrackingData::mutable_center_position() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.MediapipeHandTrackingData.center_position)
  return _internal_mutable_center_position();
}
inline void MediapipeHandTrackingData::set_allocated_center_position(::naki3d::common::protocol::Vector3* center_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_position_);
  }
  if (center_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_position)->GetArena();
    if (message_arena != submessage_arena) {
      center_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_position, submessage_arena);
    }
    
  } else {
    
  }
  center_position_ = center_position;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.MediapipeHandTrackingData.center_position)
}

// .naki3d.common.protocol.HandFingerState finger_state = 3;
inline bool MediapipeHandTrackingData::_internal_has_finger_state() const {
  return this != internal_default_instance() && finger_state_ != nullptr;
}
inline bool MediapipeHandTrackingData::has_finger_state() const {
  return _internal_has_finger_state();
}
inline void MediapipeHandTrackingData::clear_finger_state() {
  if (GetArena() == nullptr && finger_state_ != nullptr) {
    delete finger_state_;
  }
  finger_state_ = nullptr;
}
inline const ::naki3d::common::protocol::HandFingerState& MediapipeHandTrackingData::_internal_finger_state() const {
  const ::naki3d::common::protocol::HandFingerState* p = finger_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::naki3d::common::protocol::HandFingerState*>(
      &::naki3d::common::protocol::_HandFingerState_default_instance_);
}
inline const ::naki3d::common::protocol::HandFingerState& MediapipeHandTrackingData::finger_state() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MediapipeHandTrackingData.finger_state)
  return _internal_finger_state();
}
inline void MediapipeHandTrackingData::unsafe_arena_set_allocated_finger_state(
    ::naki3d::common::protocol::HandFingerState* finger_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finger_state_);
  }
  finger_state_ = finger_state;
  if (finger_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:naki3d.common.protocol.MediapipeHandTrackingData.finger_state)
}
inline ::naki3d::common::protocol::HandFingerState* MediapipeHandTrackingData::release_finger_state() {
  auto temp = unsafe_arena_release_finger_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::naki3d::common::protocol::HandFingerState* MediapipeHandTrackingData::unsafe_arena_release_finger_state() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.MediapipeHandTrackingData.finger_state)
  
  ::naki3d::common::protocol::HandFingerState* temp = finger_state_;
  finger_state_ = nullptr;
  return temp;
}
inline ::naki3d::common::protocol::HandFingerState* MediapipeHandTrackingData::_internal_mutable_finger_state() {
  
  if (finger_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::naki3d::common::protocol::HandFingerState>(GetArena());
    finger_state_ = p;
  }
  return finger_state_;
}
inline ::naki3d::common::protocol::HandFingerState* MediapipeHandTrackingData::mutable_finger_state() {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.MediapipeHandTrackingData.finger_state)
  return _internal_mutable_finger_state();
}
inline void MediapipeHandTrackingData::set_allocated_finger_state(::naki3d::common::protocol::HandFingerState* finger_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete finger_state_;
  }
  if (finger_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(finger_state);
    if (message_arena != submessage_arena) {
      finger_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finger_state, submessage_arena);
    }
    
  } else {
    
  }
  finger_state_ = finger_state;
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.MediapipeHandTrackingData.finger_state)
}

// .naki3d.common.protocol.HandGestureType gesture = 4;
inline void MediapipeHandTrackingData::clear_gesture() {
  gesture_ = 0;
}
inline ::naki3d::common::protocol::HandGestureType MediapipeHandTrackingData::_internal_gesture() const {
  return static_cast< ::naki3d::common::protocol::HandGestureType >(gesture_);
}
inline ::naki3d::common::protocol::HandGestureType MediapipeHandTrackingData::gesture() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.MediapipeHandTrackingData.gesture)
  return _internal_gesture();
}
inline void MediapipeHandTrackingData::_internal_set_gesture(::naki3d::common::protocol::HandGestureType value) {
  
  gesture_ = value;
}
inline void MediapipeHandTrackingData::set_gesture(::naki3d::common::protocol::HandGestureType value) {
  _internal_set_gesture(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.MediapipeHandTrackingData.gesture)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2eproto

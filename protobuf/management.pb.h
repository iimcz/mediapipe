// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_management_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_management_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_management_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_management_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_management_2eproto;
namespace naki3d {
namespace common {
namespace protocol {
class LogsRequest;
struct LogsRequestDefaultTypeInternal;
extern LogsRequestDefaultTypeInternal _LogsRequest_default_instance_;
class LogsResponse;
struct LogsResponseDefaultTypeInternal;
extern LogsResponseDefaultTypeInternal _LogsResponse_default_instance_;
class ManagementResponse;
struct ManagementResponseDefaultTypeInternal;
extern ManagementResponseDefaultTypeInternal _ManagementResponse_default_instance_;
class ServiceStatusRequest;
struct ServiceStatusRequestDefaultTypeInternal;
extern ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
class ServiceStatusResponse;
struct ServiceStatusResponseDefaultTypeInternal;
extern ServiceStatusResponseDefaultTypeInternal _ServiceStatusResponse_default_instance_;
class ServiceStatusResponse_Service;
struct ServiceStatusResponse_ServiceDefaultTypeInternal;
extern ServiceStatusResponse_ServiceDefaultTypeInternal _ServiceStatusResponse_Service_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace naki3d
PROTOBUF_NAMESPACE_OPEN
template<> ::naki3d::common::protocol::LogsRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::LogsRequest>(Arena*);
template<> ::naki3d::common::protocol::LogsResponse* Arena::CreateMaybeMessage<::naki3d::common::protocol::LogsResponse>(Arena*);
template<> ::naki3d::common::protocol::ManagementResponse* Arena::CreateMaybeMessage<::naki3d::common::protocol::ManagementResponse>(Arena*);
template<> ::naki3d::common::protocol::ServiceStatusRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::ServiceStatusRequest>(Arena*);
template<> ::naki3d::common::protocol::ServiceStatusResponse* Arena::CreateMaybeMessage<::naki3d::common::protocol::ServiceStatusResponse>(Arena*);
template<> ::naki3d::common::protocol::ServiceStatusResponse_Service* Arena::CreateMaybeMessage<::naki3d::common::protocol::ServiceStatusResponse_Service>(Arena*);
template<> ::naki3d::common::protocol::StartRequest* Arena::CreateMaybeMessage<::naki3d::common::protocol::StartRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace naki3d {
namespace common {
namespace protocol {

enum ServiceStatusResponse_ServiceStatus : int {
  ServiceStatusResponse_ServiceStatus_SERVICE_STOPPED = 0,
  ServiceStatusResponse_ServiceStatus_SERVICE_RUNNING = 1,
  ServiceStatusResponse_ServiceStatus_SERVICE_CRASHED = 2,
  ServiceStatusResponse_ServiceStatus_ServiceStatusResponse_ServiceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceStatusResponse_ServiceStatus_ServiceStatusResponse_ServiceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceStatusResponse_ServiceStatus_IsValid(int value);
constexpr ServiceStatusResponse_ServiceStatus ServiceStatusResponse_ServiceStatus_ServiceStatus_MIN = ServiceStatusResponse_ServiceStatus_SERVICE_STOPPED;
constexpr ServiceStatusResponse_ServiceStatus ServiceStatusResponse_ServiceStatus_ServiceStatus_MAX = ServiceStatusResponse_ServiceStatus_SERVICE_CRASHED;
constexpr int ServiceStatusResponse_ServiceStatus_ServiceStatus_ARRAYSIZE = ServiceStatusResponse_ServiceStatus_ServiceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceStatusResponse_ServiceStatus_descriptor();
template<typename T>
inline const std::string& ServiceStatusResponse_ServiceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceStatusResponse_ServiceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceStatusResponse_ServiceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceStatusResponse_ServiceStatus_descriptor(), enum_t_value);
}
inline bool ServiceStatusResponse_ServiceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceStatusResponse_ServiceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceStatusResponse_ServiceStatus>(
    ServiceStatusResponse_ServiceStatus_descriptor(), name, value);
}
enum ManagementResponse_DeviceStatus : int {
  ManagementResponse_DeviceStatus_OK = 0,
  ManagementResponse_DeviceStatus_ERROR = 1,
  ManagementResponse_DeviceStatus_ManagementResponse_DeviceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ManagementResponse_DeviceStatus_ManagementResponse_DeviceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ManagementResponse_DeviceStatus_IsValid(int value);
constexpr ManagementResponse_DeviceStatus ManagementResponse_DeviceStatus_DeviceStatus_MIN = ManagementResponse_DeviceStatus_OK;
constexpr ManagementResponse_DeviceStatus ManagementResponse_DeviceStatus_DeviceStatus_MAX = ManagementResponse_DeviceStatus_ERROR;
constexpr int ManagementResponse_DeviceStatus_DeviceStatus_ARRAYSIZE = ManagementResponse_DeviceStatus_DeviceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ManagementResponse_DeviceStatus_descriptor();
template<typename T>
inline const std::string& ManagementResponse_DeviceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ManagementResponse_DeviceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ManagementResponse_DeviceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ManagementResponse_DeviceStatus_descriptor(), enum_t_value);
}
inline bool ManagementResponse_DeviceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ManagementResponse_DeviceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ManagementResponse_DeviceStatus>(
    ManagementResponse_DeviceStatus_descriptor(), name, value);
}
// ===================================================================

class LogsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LogsRequest) */ {
 public:
  inline LogsRequest() : LogsRequest(nullptr) {}
  ~LogsRequest() override;
  explicit constexpr LogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogsRequest(const LogsRequest& from);
  LogsRequest(LogsRequest&& from) noexcept
    : LogsRequest() {
    *this = ::std::move(from);
  }

  inline LogsRequest& operator=(const LogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsRequest& operator=(LogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogsRequest* internal_default_instance() {
    return reinterpret_cast<const LogsRequest*>(
               &_LogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogsRequest& a, LogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.LogsRequest";
  }
  protected:
  explicit LogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 1,
  };
  // optional int32 lines = 1;
  bool has_lines() const;
  private:
  bool _internal_has_lines() const;
  public:
  void clear_lines();
  int32_t lines() const;
  void set_lines(int32_t value);
  private:
  int32_t _internal_lines() const;
  void _internal_set_lines(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t lines_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class LogsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.LogsResponse) */ {
 public:
  inline LogsResponse() : LogsResponse(nullptr) {}
  ~LogsResponse() override;
  explicit constexpr LogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogsResponse(const LogsResponse& from);
  LogsResponse(LogsResponse&& from) noexcept
    : LogsResponse() {
    *this = ::std::move(from);
  }

  inline LogsResponse& operator=(const LogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsResponse& operator=(LogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogsResponse* internal_default_instance() {
    return reinterpret_cast<const LogsResponse*>(
               &_LogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogsResponse& a, LogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.LogsResponse";
  }
  protected:
  explicit LogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLineFieldNumber = 1,
  };
  // repeated string log_line = 1;
  int log_line_size() const;
  private:
  int _internal_log_line_size() const;
  public:
  void clear_log_line();
  const std::string& log_line(int index) const;
  std::string* mutable_log_line(int index);
  void set_log_line(int index, const std::string& value);
  void set_log_line(int index, std::string&& value);
  void set_log_line(int index, const char* value);
  void set_log_line(int index, const char* value, size_t size);
  std::string* add_log_line();
  void add_log_line(const std::string& value);
  void add_log_line(std::string&& value);
  void add_log_line(const char* value);
  void add_log_line(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& log_line() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_log_line();
  private:
  const std::string& _internal_log_line(int index) const;
  std::string* _internal_add_log_line();
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.LogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> log_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ServiceStatusRequest) */ {
 public:
  inline ServiceStatusRequest() : ServiceStatusRequest(nullptr) {}
  explicit constexpr ServiceStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceStatusRequest(const ServiceStatusRequest& from);
  ServiceStatusRequest(ServiceStatusRequest&& from) noexcept
    : ServiceStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServiceStatusRequest& operator=(const ServiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusRequest& operator=(ServiceStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusRequest*>(
               &_ServiceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceStatusRequest& a, ServiceStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ServiceStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ServiceStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ServiceStatusRequest";
  }
  protected:
  explicit ServiceStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ServiceStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusResponse_Service final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ServiceStatusResponse.Service) */ {
 public:
  inline ServiceStatusResponse_Service() : ServiceStatusResponse_Service(nullptr) {}
  ~ServiceStatusResponse_Service() override;
  explicit constexpr ServiceStatusResponse_Service(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceStatusResponse_Service(const ServiceStatusResponse_Service& from);
  ServiceStatusResponse_Service(ServiceStatusResponse_Service&& from) noexcept
    : ServiceStatusResponse_Service() {
    *this = ::std::move(from);
  }

  inline ServiceStatusResponse_Service& operator=(const ServiceStatusResponse_Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusResponse_Service& operator=(ServiceStatusResponse_Service&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceStatusResponse_Service& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceStatusResponse_Service* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusResponse_Service*>(
               &_ServiceStatusResponse_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceStatusResponse_Service& a, ServiceStatusResponse_Service& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusResponse_Service* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatusResponse_Service* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceStatusResponse_Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceStatusResponse_Service>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceStatusResponse_Service& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceStatusResponse_Service& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusResponse_Service* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ServiceStatusResponse.Service";
  }
  protected:
  explicit ServiceStatusResponse_Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // .naki3d.common.protocol.ServiceStatusResponse.ServiceStatus status = 2;
  void clear_status();
  ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus status() const;
  void set_status(::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus value);
  private:
  ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus _internal_status() const;
  void _internal_set_status(::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ServiceStatusResponse.Service)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ServiceStatusResponse) */ {
 public:
  inline ServiceStatusResponse() : ServiceStatusResponse(nullptr) {}
  ~ServiceStatusResponse() override;
  explicit constexpr ServiceStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceStatusResponse(const ServiceStatusResponse& from);
  ServiceStatusResponse(ServiceStatusResponse&& from) noexcept
    : ServiceStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServiceStatusResponse& operator=(const ServiceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusResponse& operator=(ServiceStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusResponse*>(
               &_ServiceStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServiceStatusResponse& a, ServiceStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ServiceStatusResponse";
  }
  protected:
  explicit ServiceStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceStatusResponse_Service Service;

  typedef ServiceStatusResponse_ServiceStatus ServiceStatus;
  static constexpr ServiceStatus SERVICE_STOPPED =
    ServiceStatusResponse_ServiceStatus_SERVICE_STOPPED;
  static constexpr ServiceStatus SERVICE_RUNNING =
    ServiceStatusResponse_ServiceStatus_SERVICE_RUNNING;
  static constexpr ServiceStatus SERVICE_CRASHED =
    ServiceStatusResponse_ServiceStatus_SERVICE_CRASHED;
  static inline bool ServiceStatus_IsValid(int value) {
    return ServiceStatusResponse_ServiceStatus_IsValid(value);
  }
  static constexpr ServiceStatus ServiceStatus_MIN =
    ServiceStatusResponse_ServiceStatus_ServiceStatus_MIN;
  static constexpr ServiceStatus ServiceStatus_MAX =
    ServiceStatusResponse_ServiceStatus_ServiceStatus_MAX;
  static constexpr int ServiceStatus_ARRAYSIZE =
    ServiceStatusResponse_ServiceStatus_ServiceStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServiceStatus_descriptor() {
    return ServiceStatusResponse_ServiceStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ServiceStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceStatus_Name.");
    return ServiceStatusResponse_ServiceStatus_Name(enum_t_value);
  }
  static inline bool ServiceStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServiceStatus* value) {
    return ServiceStatusResponse_ServiceStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated .naki3d.common.protocol.ServiceStatusResponse.Service services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::naki3d::common::protocol::ServiceStatusResponse_Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::ServiceStatusResponse_Service >*
      mutable_services();
  private:
  const ::naki3d::common::protocol::ServiceStatusResponse_Service& _internal_services(int index) const;
  ::naki3d::common::protocol::ServiceStatusResponse_Service* _internal_add_services();
  public:
  const ::naki3d::common::protocol::ServiceStatusResponse_Service& services(int index) const;
  ::naki3d::common::protocol::ServiceStatusResponse_Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::ServiceStatusResponse_Service >&
      services() const;

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ServiceStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::ServiceStatusResponse_Service > services_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  ~StartRequest() override;
  explicit constexpr StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMuteAudioFieldNumber = 1,
  };
  // bool mute_audio = 1;
  void clear_mute_audio();
  bool mute_audio() const;
  void set_mute_audio(bool value);
  private:
  bool _internal_mute_audio() const;
  void _internal_set_mute_audio(bool value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool mute_audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class ManagementResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:naki3d.common.protocol.ManagementResponse) */ {
 public:
  inline ManagementResponse() : ManagementResponse(nullptr) {}
  ~ManagementResponse() override;
  explicit constexpr ManagementResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManagementResponse(const ManagementResponse& from);
  ManagementResponse(ManagementResponse&& from) noexcept
    : ManagementResponse() {
    *this = ::std::move(from);
  }

  inline ManagementResponse& operator=(const ManagementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagementResponse& operator=(ManagementResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManagementResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManagementResponse* internal_default_instance() {
    return reinterpret_cast<const ManagementResponse*>(
               &_ManagementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ManagementResponse& a, ManagementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagementResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManagementResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManagementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManagementResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManagementResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ManagementResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManagementResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "naki3d.common.protocol.ManagementResponse";
  }
  protected:
  explicit ManagementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ManagementResponse_DeviceStatus DeviceStatus;
  static constexpr DeviceStatus OK =
    ManagementResponse_DeviceStatus_OK;
  static constexpr DeviceStatus ERROR =
    ManagementResponse_DeviceStatus_ERROR;
  static inline bool DeviceStatus_IsValid(int value) {
    return ManagementResponse_DeviceStatus_IsValid(value);
  }
  static constexpr DeviceStatus DeviceStatus_MIN =
    ManagementResponse_DeviceStatus_DeviceStatus_MIN;
  static constexpr DeviceStatus DeviceStatus_MAX =
    ManagementResponse_DeviceStatus_DeviceStatus_MAX;
  static constexpr int DeviceStatus_ARRAYSIZE =
    ManagementResponse_DeviceStatus_DeviceStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceStatus_descriptor() {
    return ManagementResponse_DeviceStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceStatus_Name.");
    return ManagementResponse_DeviceStatus_Name(enum_t_value);
  }
  static inline bool DeviceStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceStatus* value) {
    return ManagementResponse_DeviceStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceStatusFieldNumber = 1,
  };
  // .naki3d.common.protocol.ManagementResponse.DeviceStatus device_status = 1;
  void clear_device_status();
  ::naki3d::common::protocol::ManagementResponse_DeviceStatus device_status() const;
  void set_device_status(::naki3d::common::protocol::ManagementResponse_DeviceStatus value);
  private:
  ::naki3d::common::protocol::ManagementResponse_DeviceStatus _internal_device_status() const;
  void _internal_set_device_status(::naki3d::common::protocol::ManagementResponse_DeviceStatus value);
  public:

  // @@protoc_insertion_point(class_scope:naki3d.common.protocol.ManagementResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int device_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogsRequest

// optional int32 lines = 1;
inline bool LogsRequest::_internal_has_lines() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogsRequest::has_lines() const {
  return _internal_has_lines();
}
inline void LogsRequest::clear_lines() {
  lines_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t LogsRequest::_internal_lines() const {
  return lines_;
}
inline int32_t LogsRequest::lines() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LogsRequest.lines)
  return _internal_lines();
}
inline void LogsRequest::_internal_set_lines(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  lines_ = value;
}
inline void LogsRequest::set_lines(int32_t value) {
  _internal_set_lines(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LogsRequest.lines)
}

// -------------------------------------------------------------------

// LogsResponse

// repeated string log_line = 1;
inline int LogsResponse::_internal_log_line_size() const {
  return log_line_.size();
}
inline int LogsResponse::log_line_size() const {
  return _internal_log_line_size();
}
inline void LogsResponse::clear_log_line() {
  log_line_.Clear();
}
inline std::string* LogsResponse::add_log_line() {
  std::string* _s = _internal_add_log_line();
  // @@protoc_insertion_point(field_add_mutable:naki3d.common.protocol.LogsResponse.log_line)
  return _s;
}
inline const std::string& LogsResponse::_internal_log_line(int index) const {
  return log_line_.Get(index);
}
inline const std::string& LogsResponse::log_line(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.LogsResponse.log_line)
  return _internal_log_line(index);
}
inline std::string* LogsResponse::mutable_log_line(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_.Mutable(index);
}
inline void LogsResponse::set_log_line(int index, const std::string& value) {
  log_line_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::set_log_line(int index, std::string&& value) {
  log_line_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::set_log_line(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  log_line_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::set_log_line(int index, const char* value, size_t size) {
  log_line_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:naki3d.common.protocol.LogsResponse.log_line)
}
inline std::string* LogsResponse::_internal_add_log_line() {
  return log_line_.Add();
}
inline void LogsResponse::add_log_line(const std::string& value) {
  log_line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::add_log_line(std::string&& value) {
  log_line_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::add_log_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  log_line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:naki3d.common.protocol.LogsResponse.log_line)
}
inline void LogsResponse::add_log_line(const char* value, size_t size) {
  log_line_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:naki3d.common.protocol.LogsResponse.log_line)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogsResponse::log_line() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.LogsResponse.log_line)
  return log_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogsResponse::mutable_log_line() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.LogsResponse.log_line)
  return &log_line_;
}

// -------------------------------------------------------------------

// ServiceStatusRequest

// -------------------------------------------------------------------

// ServiceStatusResponse_Service

// string service_name = 1;
inline void ServiceStatusResponse_Service::clear_service_name() {
  service_name_.ClearToEmpty();
}
inline const std::string& ServiceStatusResponse_Service::service_name() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ServiceStatusResponse.Service.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceStatusResponse_Service::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ServiceStatusResponse.Service.service_name)
}
inline std::string* ServiceStatusResponse_Service::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.ServiceStatusResponse.Service.service_name)
  return _s;
}
inline const std::string& ServiceStatusResponse_Service::_internal_service_name() const {
  return service_name_.Get();
}
inline void ServiceStatusResponse_Service::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceStatusResponse_Service::_internal_mutable_service_name() {
  
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceStatusResponse_Service::release_service_name() {
  // @@protoc_insertion_point(field_release:naki3d.common.protocol.ServiceStatusResponse.Service.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceStatusResponse_Service::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:naki3d.common.protocol.ServiceStatusResponse.Service.service_name)
}

// .naki3d.common.protocol.ServiceStatusResponse.ServiceStatus status = 2;
inline void ServiceStatusResponse_Service::clear_status() {
  status_ = 0;
}
inline ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus ServiceStatusResponse_Service::_internal_status() const {
  return static_cast< ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus >(status_);
}
inline ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus ServiceStatusResponse_Service::status() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ServiceStatusResponse.Service.status)
  return _internal_status();
}
inline void ServiceStatusResponse_Service::_internal_set_status(::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus value) {
  
  status_ = value;
}
inline void ServiceStatusResponse_Service::set_status(::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ServiceStatusResponse.Service.status)
}

// -------------------------------------------------------------------

// ServiceStatusResponse

// repeated .naki3d.common.protocol.ServiceStatusResponse.Service services = 1;
inline int ServiceStatusResponse::_internal_services_size() const {
  return services_.size();
}
inline int ServiceStatusResponse::services_size() const {
  return _internal_services_size();
}
inline void ServiceStatusResponse::clear_services() {
  services_.Clear();
}
inline ::naki3d::common::protocol::ServiceStatusResponse_Service* ServiceStatusResponse::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:naki3d.common.protocol.ServiceStatusResponse.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::ServiceStatusResponse_Service >*
ServiceStatusResponse::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:naki3d.common.protocol.ServiceStatusResponse.services)
  return &services_;
}
inline const ::naki3d::common::protocol::ServiceStatusResponse_Service& ServiceStatusResponse::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::naki3d::common::protocol::ServiceStatusResponse_Service& ServiceStatusResponse::services(int index) const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ServiceStatusResponse.services)
  return _internal_services(index);
}
inline ::naki3d::common::protocol::ServiceStatusResponse_Service* ServiceStatusResponse::_internal_add_services() {
  return services_.Add();
}
inline ::naki3d::common::protocol::ServiceStatusResponse_Service* ServiceStatusResponse::add_services() {
  ::naki3d::common::protocol::ServiceStatusResponse_Service* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:naki3d.common.protocol.ServiceStatusResponse.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::naki3d::common::protocol::ServiceStatusResponse_Service >&
ServiceStatusResponse::services() const {
  // @@protoc_insertion_point(field_list:naki3d.common.protocol.ServiceStatusResponse.services)
  return services_;
}

// -------------------------------------------------------------------

// StartRequest

// bool mute_audio = 1;
inline void StartRequest::clear_mute_audio() {
  mute_audio_ = false;
}
inline bool StartRequest::_internal_mute_audio() const {
  return mute_audio_;
}
inline bool StartRequest::mute_audio() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.StartRequest.mute_audio)
  return _internal_mute_audio();
}
inline void StartRequest::_internal_set_mute_audio(bool value) {
  
  mute_audio_ = value;
}
inline void StartRequest::set_mute_audio(bool value) {
  _internal_set_mute_audio(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.StartRequest.mute_audio)
}

// -------------------------------------------------------------------

// ManagementResponse

// .naki3d.common.protocol.ManagementResponse.DeviceStatus device_status = 1;
inline void ManagementResponse::clear_device_status() {
  device_status_ = 0;
}
inline ::naki3d::common::protocol::ManagementResponse_DeviceStatus ManagementResponse::_internal_device_status() const {
  return static_cast< ::naki3d::common::protocol::ManagementResponse_DeviceStatus >(device_status_);
}
inline ::naki3d::common::protocol::ManagementResponse_DeviceStatus ManagementResponse::device_status() const {
  // @@protoc_insertion_point(field_get:naki3d.common.protocol.ManagementResponse.device_status)
  return _internal_device_status();
}
inline void ManagementResponse::_internal_set_device_status(::naki3d::common::protocol::ManagementResponse_DeviceStatus value) {
  
  device_status_ = value;
}
inline void ManagementResponse::set_device_status(::naki3d::common::protocol::ManagementResponse_DeviceStatus value) {
  _internal_set_device_status(value);
  // @@protoc_insertion_point(field_set:naki3d.common.protocol.ManagementResponse.device_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace naki3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus>() {
  return ::naki3d::common::protocol::ServiceStatusResponse_ServiceStatus_descriptor();
}
template <> struct is_proto_enum< ::naki3d::common::protocol::ManagementResponse_DeviceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naki3d::common::protocol::ManagementResponse_DeviceStatus>() {
  return ::naki3d::common::protocol::ManagementResponse_DeviceStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_management_2eproto
